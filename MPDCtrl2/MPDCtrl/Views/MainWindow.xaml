<Window x:Class="MPDCtrl.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:properties="clr-namespace:MPDCtrl.Properties"
        xmlns:helpers="clr-namespace:MPDCtrl.Helpers"
        xmlns:local="clr-namespace:MPDCtrl"
        mc:Ignorable="d"
        WindowStyle="None"
        Background="{DynamicResource WindowBackgroundBaseColorBrush}"
        StateChanged="Window_StateChanged"
        DataContext="{StaticResource MainViewModel}"
        Title="{Binding AppTitle}"
        Width="780" Height="480"
        MinWidth="780" MinHeight="250">
    <Window.Style>
        <Style TargetType="Window">
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsBusy}" Value="True">
                    <Setter Property="Cursor" Value="Wait" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </Window.Style>
    <WindowChrome.WindowChrome>
        <WindowChrome CaptionHeight="30" ResizeBorderThickness="{x:Static SystemParameters.WindowResizeBorderThickness}"/>
    </WindowChrome.WindowChrome>
    <Window.InputBindings>
        <KeyBinding Command="{Binding PlayCommand}"
                            Key="Play" />
        <KeyBinding Command="{Binding PlayCommand}"
                            Key="Space" />
        <KeyBinding Command="{Binding PlayCommand}"
                            Key="MediaPlayPause" />
        <KeyBinding Command="{Binding PlayNextCommand}"
                            Key="MediaNextTrack" />
        <KeyBinding Command="{Binding PlayPrevCommand}"
                            Key="MediaPreviousTrack" />
        <KeyBinding Command="{Binding PlayCommand}"
                            Key="MediaStop" />
        <KeyBinding Command="{Binding VolumeMuteCommand}"
                            Key="VolumeMute" />
        <KeyBinding Command="{Binding VolumeDownCommand}"
                            Key="VolumeDown" />
        <KeyBinding Command="{Binding VolumeUpCommand}"
                            Key="VolumeUp" />
        <KeyBinding Command="{Binding EscapeCommand}"
                            Key="Esc" />
    </Window.InputBindings>
    <Border Style="{StaticResource WindowMainPanelStyle}">
        <Grid Background="{DynamicResource BoardBackgroundColorBrush}">
            <Grid.RowDefinitions>
                <RowDefinition Height="27"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <!-- アプリタイトルバー -->
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="27"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="auto"/>
                </Grid.ColumnDefinitions>

                <!-- App icon -->
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                    <Button ToolTip="{Binding AppTitle}" IsHitTestVisible="True" WindowChrome.IsHitTestVisibleInChrome="True">
                        <Button.Style>
                            <Style TargetType="{x:Type Button}">
                                <Setter Property="OverridesDefaultStyle" Value="true" />
                                <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}" />
                                <Setter Property="Foreground" Value="{DynamicResource ControlForegroundColorBrush}"/>
                                <!--
                                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                                -->
                                <Setter Property="BorderThickness" Value="0" />
                                <Setter Property="Margin" Value="0" />
                                <Setter Property="Padding" Value="0" />
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="Button">
                                            <Border x:Name="Border" CornerRadius="0" BorderThickness="0" Background="{TemplateBinding Background}">
                                                <Viewbox Width="16" Height="16" Margin="6 0 6 0">
                                                    <Canvas Width="101.52757" Height="101.52314">
                                                        <Canvas.RenderTransform>
                                                            <TranslateTransform X="0" Y="0"/>
                                                        </Canvas.RenderTransform>
                                                        <Canvas Name="layer1">
                                                            <Canvas.RenderTransform>
                                                                <TranslateTransform X="-2.8648005" Y="-194.52514"/>
                                                            </Canvas.RenderTransform>
                                                            <Path Fill="{DynamicResource ControlForegroundColorBrush}" Data="M 53.823864 196.04415 C 21.886528 194.83142 -3.7832653 229.72314 6.7745021 259.84651 15.060196 290.6957 55.964235 304.96229 81.631867 285.93948 108.66537 268.90685 110.19826 225.61676 84.437146 206.71473 75.820617 199.84108 64.844621 196.0167 53.823864 196.04415 Z m 0 9.84942 c 18.184368 -0.34132 35.234253 13.61727 38.596795 31.47035 3.761965 16.86267 -5.208339 35.37926 -20.678288 43.01021 -15.289342 8.1535 -35.646071 4.41591 -47.068046 -8.60652 -12.118898 -12.84888 -13.65815 -34.02695 -3.509928 -48.48554 7.159606 -10.73064 19.738995 -17.49358 32.659467 -17.3885 z m -9.850044 17.2371 c 0 14.77475 0 29.5495 0 44.32425 9.849834 -7.38748 19.699667 -14.77496 29.549501 -22.16244 -9.849834 -7.38727 -19.699667 -14.77454 -29.549501 -22.16181 z"/>
                                                        </Canvas>
                                                    </Canvas>
                                                </Viewbox>
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Button.Style>
                    </Button>
                </StackPanel>

                <!-- Now Playing -->
                <StackPanel Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="80 0 0 0" Visibility="{Binding IsConnected, Converter={StaticResource BoolToVisibilityCollapsedConverter}}">
                    <TextBlock Style="{StaticResource DefaultTextBlockStyle}">
                        <TextBlock.Triggers>
                            <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0.1" To="1.0" Duration="0:0:2">
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </TextBlock.Triggers>
                        <Run x:Name="CurrentSongTitle" Foreground="{DynamicResource ControlLightColorBrush}" FontWeight="DemiBold" Text="{Binding CurrentSongTitle, NotifyOnTargetUpdated=True, Mode=OneWay}" Style="{DynamicResource DefaultRunStyle}"/>
                    </TextBlock>
                    <TextBlock Foreground="{DynamicResource ControlDarkColorBrush}">
                        <TextBlock.Triggers>
                            <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0.1" To="1.0" Duration="0:0:2">
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </TextBlock.Triggers>
                        <TextBlock.Style>
                            <Style TargetType="TextBlock" BasedOn="{StaticResource DefaultTextBlockStyle}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=CurrentSongArtist, Path=Text}" Value="">
                                        <Setter Property="Control.Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                        <Run Text="  by "/>
                        <Run x:Name="CurrentSongArtist" Foreground="{DynamicResource ControlMediumColorBrush}" Text="{Binding CurrentSongArtist, NotifyOnTargetUpdated=True, Mode=OneWay}" Style="{DynamicResource DefaultRunStyle}" />
                    </TextBlock>
                    <TextBlock  Foreground="{DynamicResource ControlDarkColorBrush}">
                        <TextBlock.Triggers>
                            <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0.1" To="1.0" Duration="0:0:2">
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </TextBlock.Triggers>
                        <TextBlock.Style>
                            <Style TargetType="TextBlock" BasedOn="{StaticResource DefaultTextBlockStyle}">
                                <Style.Triggers>
                                     <DataTrigger Binding="{Binding ElementName=CurrentSongAlbum, Path=Text}" Value="">
                                           <Setter Property="Control.Visibility" Value="Collapsed" />
                                     </DataTrigger>
                                 </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                        <Run Text="  from "/>
                        <Run x:Name="CurrentSongAlbum" Foreground="{DynamicResource ControlMediumColorBrush}" Text="{Binding CurrentSongAlbum, NotifyOnTargetUpdated=True, Mode=OneWay}" Style="{DynamicResource DefaultRunStyle}" />
                    </TextBlock>
                </StackPanel>

                <!-- System icons -->
                <StackPanel Orientation="Horizontal" Grid.Column="2" HorizontalAlignment="Right" Margin="0">

                    <Button x:Name="SettingsButton" Style="{DynamicResource PathButton}" Width="27" Height="27" Margin="0" Opacity="0.7" Command="{Binding ShowSettingsCommand}" ToolTip="(Ctrl+S)" WindowChrome.IsHitTestVisibleInChrome="True"
                                Content="M12,15.5A3.5,3.5 0 0,1 8.5,12A3.5,3.5 0 0,1 12,
8.5A3.5,3.5 0 0,1 15.5,12A3.5,3.5 0 0,1 12,15.5M19.43,12.97C19.47,12.65 19.5,12.33 19.5,12C19.5,
11.67 19.47,11.34 19.43,11L21.54,9.37C21.73,9.22 21.78,8.95 21.66,8.73L19.66,5.27C19.54,5.05 19.27,
4.96 19.05,5.05L16.56,6.05C16.04,5.66 15.5,5.32 14.87,5.07L14.5,2.42C14.46,2.18 14.25,2 14,2H10C9.75,
2 9.54,2.18 9.5,2.42L9.13,5.07C8.5,5.32 7.96,5.66 7.44,6.05L4.95,5.05C4.73,4.96 4.46,5.05 4.34,
5.27L2.34,8.73C2.21,8.95 2.27,9.22 2.46,9.37L4.57,11C4.53,11.34 4.5,11.67 4.5,12C4.5,12.33 4.53,
12.65 4.57,12.97L2.46,14.63C2.27,14.78 2.21,15.05 2.34,15.27L4.34,18.73C4.46,18.95 4.73,19.03 4.95,
18.95L7.44,17.94C7.96,18.34 8.5,18.68 9.13,18.93L9.5,21.58C9.54,21.82 9.75,22 10,22H14C14.25,22 14.46,
21.82 14.5,21.58L14.87,18.93C15.5,18.67 16.04,18.34 16.56,17.94L19.05,18.95C19.27,19.03 19.54,
18.95 19.66,18.73L21.66,15.27C21.78,15.05 21.73,14.78 21.54,14.63L19.43,12.97Z">
                    </Button>

                    <Button x:Name="MinimizeButton" Style="{StaticResource PathButton}" Width="27" Height="27" Margin="0" Opacity="0.7" Click="MinimizeButton_Click" WindowChrome.IsHitTestVisibleInChrome="True">
                        M20,14H4V10H20
                    </Button>

                    <Button x:Name="RestoreButton" Style="{StaticResource PathButton}" Width="27" Height="27" Margin="0" Opacity="0.7" Click="RestoreButton_Click" WindowChrome.IsHitTestVisibleInChrome="True">
                        M4,8H8V4H20V16H16V20H4V8M16,8V14H18V6H10V8H16M6,12V18H14V12H6Z
                    </Button>

                    <Button x:Name="MaxButton" Style="{StaticResource PathButton}" Width="27" Height="27" Margin="0" Opacity="0.7" Click="MaxButton_Click" WindowChrome.IsHitTestVisibleInChrome="True">
                        M4,4H20V20H4V4M6,8V18H18V8H6Z
                    </Button>

                    <Button x:Name="CloseButton" Style="{StaticResource PathButton}" Width="27" Height="27" Margin="0" Opacity="0.7" Click="CloseButton_Click" WindowChrome.IsHitTestVisibleInChrome="True">
                        M13.46,12L19,17.54V19H17.54L12,13.46L6.46,19H5V17.54L10.54,12L5,6.46V5H6.46L12,10.54L17.54,5H19V6.46L13.46,12Z
                    </Button>

                </StackPanel>

            </Grid>

            <!-- メイン画面 -->
            <Grid Grid.Row="1" Visibility="{Binding IsMainShow, Converter={StaticResource BoolToVisibilityCollapsedConverter}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="0"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <!-- Header grid -->
                <Grid Grid.Row="1" Background="{DynamicResource BoardBackgroundColorBrush}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="8"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="8"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <!-- Album cover TODO: -->
                    <Grid Grid.Row="1" Grid.Column="0" Visibility="Collapsed">
                        <StackPanel Margin="18 3 3 3">
                            <TextBlock Text="{Binding CurrentSongArtist}" Style="{StaticResource DefaultTextBlockStyle}"></TextBlock>
                            <Label Content="{Binding CurrentSongTitle}" Style="{StaticResource SectionTitle}"></Label>
                        </StackPanel>
                    </Grid>

                    <!-- Playback Controls -->
                    <Grid Grid.Row="1" Grid.Column="1">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <!-- Playback Buttons -->
                        <Grid Grid.Row="0" Grid.Column="1" Width="280">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <Button x:Name="BackButton" ToolTip="{x:Static properties:Resources.Playback_BackButton}" Grid.Column="0" HorizontalAlignment="Center" Height="42" Width="42" Background="Transparent" Foreground="White" Content="M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M8,8H10V16H8M16,8V16L11,12" Style="{StaticResource PathButton}" Command="{Binding PlayPrevCommand}" >
                            </Button>
                            <Button x:Name="PlayButton" ToolTip="{x:Static properties:Resources.Playback_PlayPauseButton}" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Height="62" Width="62" Background="Transparent" Foreground="White" Style="{StaticResource PathButton}" Command="{Binding PlayCommand}" Content="{Binding PlayButton}">
                            </Button>
                            <Button x:Name="NextButton" ToolTip="{x:Static properties:Resources.Playback_NextButton}" Grid.Column="2" HorizontalAlignment="Center" Height="42" Width="42" Background="Transparent" Foreground="White" Content="M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M8,8L13,12L8,16M14,8H16V16H14" Style="{StaticResource PathButton}" Command="{Binding PlayNextCommand}" >
                            </Button>

                        </Grid>

                        <!-- Slider Seek -->
                        <Grid Grid.Row="1" Grid.ColumnSpan="3" Width="450">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="24"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="24"/>
                            </Grid.ColumnDefinitions>

                            <Slider x:Name="SliderSeek" ToolTip="{x:Static properties:Resources.Playback_SliderSeek}" Style="{DynamicResource SliderHorizontalStyle}" Grid.Column="1" VerticalAlignment="Center" Margin="6 6 6 0" IsMoveToPointEnabled="True" Minimum="0" Maximum="{Binding Mode=TwoWay,Path=Time}" Value="{Binding Mode=TwoWay,Path=Elapsed}">
                            </Slider>

                        </Grid>

                    </Grid>

                    <!-- Playback Options and Volume -->
                    <Grid Grid.Row="1" Grid.Column="2">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <StackPanel Orientation="Horizontal" Grid.Column="0" VerticalAlignment="Bottom">
                            <ToggleButton x:Name="RepeatButton" ToolTip="{x:Static properties:Resources.PlaybackOptions_Repeat}" IsChecked="{Binding Mode=TwoWay,Path=Repeat}" Style="{DynamicResource PathToggleButton}"  Width="16" Height="16" Padding="0" Margin="4" VerticalAlignment="Center" HorizontalAlignment="Center"
                                  Content="M17,17H7V14L3,18L7,22V19H19V13H17M7,7H17V10L21,6L17,2V5H5V11H7V7Z">
                            </ToggleButton>
                            <ToggleButton x:Name="ShuffleButton" ToolTip="{x:Static properties:Resources.PlaybackOptions_Shuffle}" IsChecked="{Binding Mode=TwoWay,Path=Random}" Style="{DynamicResource PathToggleButton}" Width="16" Height="16" Padding="0" Margin="4" VerticalAlignment="Center" HorizontalAlignment="Center"
                                  Content="M17,3L22.25,7.5L17,12L22.25,16.5L17,21V18H14.26L11.44,15.18L13.56,13.06L15.5,15H17V12L17,9H15.5L6.5,18H2V15H5.26L14.26,6H17V3M2,6H6.5L9.32,8.82L7.2,10.94L5.26,9H2V6Z">
                            </ToggleButton>
                            <ToggleButton x:Name="ConsumeButton" ToolTip="{x:Static properties:Resources.PlaybackOptions_Consume}" IsChecked="{Binding Mode=TwoWay,Path=Consume}" Style="{DynamicResource PathToggleButton}" Width="16" Height="16" Padding="0" Margin="4" VerticalAlignment="Center" HorizontalAlignment="Center"
                                  Content="M2,16H10V14H2M12,14V16H22V14M14,6H2V8H14M14,10H2V12H14V10Z">
                            </ToggleButton>
                        </StackPanel>

                        <Grid Grid.Column="1" HorizontalAlignment="Right" VerticalAlignment="Stretch" Margin="0 0 18 0" Width="30">
                            <Slider x:Name="SliderVol" ToolTip="{x:Static properties:Resources.Playback_SliderVolume}" Style="{DynamicResource CustomSliderStyle}" Orientation="Vertical" HorizontalAlignment="Right" VerticalAlignment="Stretch" IsMoveToPointEnabled="True" Maximum="100" Value="{Binding Volume}">
                            </Slider>
                        </Grid>
                    </Grid>

                </Grid>

                <!-- Left and Right pain -->
                <Grid Grid.Row="2" Margin="0 8 0 0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="{Binding MainLeftPainWidth}" MinWidth="0"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="0" MinWidth="0"/>
                    </Grid.ColumnDefinitions>

                    <!-- Libraries -->
                    <Grid Grid.Row="0" Grid.Column="0" Background="{DynamicResource WindowBackgroundBaseColorBrush}" helpers:SizeChange.IsEnabled="True" helpers:SizeChange.ActualWidth="{Binding MainLeftPainActualWidth, Mode=OneWayToSource}">
                        <TabControl Style="{StaticResource NoChromeTabControl}" Margin="0 1 0 0" Background="{DynamicResource BoardBackgroundColorBrush}">
                            
                            <!-- Playlists -->
                            <TabItem Header="{x:Static properties:Resources.PlaylistListviewTabitemHeader_Playlists}" Width="120" Style="{StaticResource NoChromeTabHeader}">
                                <Grid>
                                    
                                    <Grid x:Name="LVPLDummy" Visibility="Hidden" Margin="0 0 20 0">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="26" />
                                            <ColumnDefinition Width="1*"/>
                                        </Grid.ColumnDefinitions>

                                        <!--  This is the hidden helper Field which is used to bind to, using the "Fill" column of the helper grid  -->
                                        <Grid x:Name="LVPLDummy0" Grid.Column="0" />
                                        <Grid x:Name="LVPLDummy1" Grid.Column="1" />
                                    </Grid>

                                    <ListView x:Name="PlaylistListview" ItemsSource="{Binding Playlists}" SelectedItem="{Binding SelectedPlaylist}" SelectionMode="Single" Background="Transparent" IsSynchronizedWithCurrentItem="True" BorderThickness="0" Padding="0" Margin="0" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto">
                                        <ListView.InputBindings>
                                            <KeyBinding Key="Return" Command="{Binding Path=DataContext.PlaylistListviewEnterKeyCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" />
                                        </ListView.InputBindings>
                                        <ListView.Resources>
                                            <ContextMenu x:Key="PlaylistItemContextMenu">
                                                <MenuItem Header="{x:Static properties:Resources.PlaylistItemContextMenu_Load}" Command="{Binding Path=DataContext.PlaylistListviewLoadPlaylistCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                                    <MenuItem.Resources>
                                                        <ControlTemplate x:Key="PlusIcon">
                                                            <Canvas Background="Transparent" >
                                                                <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z" />
                                                            </Canvas>
                                                        </ControlTemplate>
                                                    </MenuItem.Resources>
                                                    <MenuItem.Icon>
                                                        <ContentControl Template="{StaticResource PlusIcon}" />
                                                    </MenuItem.Icon>
                                                </MenuItem>
                                                <MenuItem Header="{x:Static properties:Resources.PlaylistItemContextMenu_ClearAndLoad}" Command="{Binding Path=DataContext.PlaylistListviewClearLoadPlaylistCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                                    <MenuItem.Resources>
                                                        <ControlTemplate x:Key="PlusThickIcon">
                                                            <Canvas Background="Transparent" >
                                                                <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M20 14H14V20H10V14H4V10H10V4H14V10H20V14Z" />
                                                            </Canvas>
                                                        </ControlTemplate>
                                                    </MenuItem.Resources>
                                                    <MenuItem.Icon>
                                                        <ContentControl Template="{StaticResource PlusThickIcon}" />
                                                    </MenuItem.Icon>
                                                </MenuItem>
                                                <Separator/>
                                                <MenuItem Header="{x:Static properties:Resources.PlaylistItemContextMenu_Rename}" Command="{Binding Path=DataContext.PlaylistListviewRenamePlaylistCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                                    <MenuItem.Resources>
                                                        <ControlTemplate x:Key="PlaylistEditIcon">
                                                            <Canvas Background="Transparent" >
                                                                <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M2,6V8H14V6H2M2,10V12H14V10H2M20.04,10.13C19.9,10.13 19.76,10.19 19.65,10.3L18.65,11.3L20.7,13.35L21.7,12.35C21.92,12.14 21.92,11.79 21.7,11.58L20.42,10.3C20.31,10.19 20.18,10.13 20.04,10.13M18.07,11.88L12,17.94V20H14.06L20.12,13.93L18.07,11.88M2,14V16H10V14H2Z" />
                                                            </Canvas>
                                                        </ControlTemplate>
                                                    </MenuItem.Resources>
                                                    <MenuItem.Icon>
                                                        <ContentControl Template="{StaticResource PlaylistEditIcon}" />
                                                    </MenuItem.Icon>
                                                </MenuItem>
                                                <MenuItem Header="{x:Static properties:Resources.PlaylistItemContextMenu_Remove}" Command="{Binding Path=DataContext.PlaylistListviewRemovePlaylistCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                                    <MenuItem.Resources>
                                                        <ControlTemplate x:Key="PlaylistRemoveIcon">
                                                            <Canvas Background="Transparent" >
                                                                <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M2,6V8H14V6H2M2,10V12H11V10H2M14.17,10.76L12.76,12.17L15.59,15L12.76,17.83L14.17,19.24L17,16.41L19.83,19.24L21.24,17.83L18.41,15L21.24,12.17L19.83,10.76L17,13.59L14.17,10.76M2,14V16H11V14H2Z" />
                                                            </Canvas>
                                                        </ControlTemplate>
                                                    </MenuItem.Resources>
                                                    <MenuItem.Icon>
                                                        <ContentControl Template="{StaticResource PlaylistRemoveIcon}" />
                                                    </MenuItem.Icon>
                                                </MenuItem>
                                            </ContextMenu>
                                            <Style TargetType="{x:Type ScrollBar}">
                                                <Setter Property="Margin" Value="0,0,0,0" />
                                                <Setter Property="BorderThickness" Value="0" />
                                                <Style.Triggers>
                                                    <Trigger Property="Orientation" Value="Vertical">
                                                        <Setter Property="Width" Value="18"/>
                                                        <Setter Property="Height" Value="Auto" />
                                                        <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                                                    </Trigger>
                                                </Style.Triggers>
                                            </Style>
                                        </ListView.Resources>
                                        <ListView.View>
                                            <GridView>
                                                <GridView.ColumnHeaderContainerStyle>
                                                    <Style TargetType="GridViewColumnHeader" BasedOn="{StaticResource GridViewColumnHeaderStyle}">
                                                        <Setter Property="Visibility" Value="Collapsed" />
                                                    </Style>
                                                </GridView.ColumnHeaderContainerStyle>
                                                <GridViewColumn Header="" Width="{Binding ElementName=LVPLDummy0, Path=ActualWidth}">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                                                <Viewbox Width="18" Height="18">
                                                                    <Canvas Width="24" Height="24">
                                                                        <Path x:Name="PlaylistIcon" Fill="{DynamicResource ControlMediumColorBrush}" Canvas.Top="6.5" Stretch="Uniform" Data="M15,6H3V8H15V6M15,10H3V12H15V10M3,16H11V14H3V16M17,6V14.18C16.69,14.07 16.35,14 16,14A3,3 0 0,0 13,17A3,3 0 0,0 16,20A3,3 0 0,0 19,17V8H22V6H17Z" />
                                                                    </Canvas>
                                                                </Viewbox>
                                                            </StackPanel>
                                                            <DataTemplate.Triggers>
                                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                                    <Setter TargetName="PlaylistIcon" Property="Fill" Value="#111111" />
                                                                </DataTrigger>
                                                            </DataTemplate.Triggers>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                                <GridViewColumn Header="Playlists" Width="{Binding ElementName=LVPLDummy1, Path=ActualWidth}">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <StackPanel HorizontalAlignment="Stretch">
                                                                <TextBlock Text="{Binding }" Padding="3" />
                                                            </StackPanel>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                            </GridView>
                                        </ListView.View>
                                        <ListView.ItemContainerStyle>
                                            <Style TargetType="ListViewItem" BasedOn="{StaticResource ListViewItemNoAlternateStyle}">
                                                <Setter Property="ContextMenu" Value="{StaticResource PlaylistItemContextMenu}" />
                                                <Setter Property="Margin" Value="0 0 0 0"/>
                                                <Setter Property="Padding" Value="0 1 0 1"/>
                                                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                                                            <Border Name="Border" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="{TemplateBinding ClipToBounds}" CornerRadius="0" SnapsToDevicePixels="true">
                                                                <Border.InputBindings>
                                                                    <MouseBinding Command="{Binding Path=DataContext.PlaylistListviewLeftDoubleClickCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" Gesture="LeftDoubleClick" />
                                                                </Border.InputBindings>

                                                                <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </ListView.ItemContainerStyle>
                                    </ListView>

                                </Grid>
                            </TabItem>

                            <!-- Local files -->
                            <TabItem Header="{x:Static properties:Resources.LocalfileListviewTabitemHeader_LocalFiles}" Width="120" Style="{StaticResource NoChromeTabHeader}">
                                <Grid>

                                    <Grid x:Name="LVLFDummy" Visibility="Hidden" Margin="0 0 20 0">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="26" />
                                            <ColumnDefinition Width="1*"/>
                                        </Grid.ColumnDefinitions>

                                        <!--  This is the hidden helper Field which is used to bind to, using the "Fill" column of the helper grid  -->
                                        <Grid x:Name="LVLFDummy0" Grid.Column="0" />
                                        <Grid x:Name="LVLFDummy1" Grid.Column="1" />
                                    </Grid>

                                    <ListView x:Name="LocalfileListview" ItemsSource="{Binding Localfiles}" SelectedItem="{Binding SelectedLocalfile}" SelectionMode="Extended" Background="Transparent" IsSynchronizedWithCurrentItem="True" BorderThickness="0" Padding="0" Margin="0" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto">
                                        <ListView.InputBindings>
                                            <KeyBinding Key="Return" Command="{Binding Path=DataContext.LocalfileListviewEnterKeyCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" />
                                        </ListView.InputBindings>
                                        <ListView.Resources>
                                            <ContextMenu x:Key="LocalfileItemContextMenu">
                                                <MenuItem Header="{x:Static properties:Resources.LocalfileItemContextMenu_Add}" Command="{Binding Path=DataContext.LocalfileListviewAddCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                                    <MenuItem.Resources>
                                                        <ControlTemplate x:Key="PlusIcon">
                                                            <Canvas Background="Transparent" >
                                                                <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z" />
                                                            </Canvas>
                                                        </ControlTemplate>
                                                    </MenuItem.Resources>
                                                    <MenuItem.Icon>
                                                        <ContentControl Template="{StaticResource PlusIcon}" />
                                                    </MenuItem.Icon>
                                                </MenuItem>
                                            </ContextMenu>
                                            <Style TargetType="{x:Type ScrollBar}">
                                                <Setter Property="Margin" Value="0,0,0,0" />
                                                <Setter Property="BorderThickness" Value="0" />
                                                <Style.Triggers>
                                                    <Trigger Property="Orientation" Value="Vertical">
                                                        <Setter Property="Width" Value="18"/>
                                                        <Setter Property="Height" Value="Auto" />
                                                        <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                                                    </Trigger>
                                                </Style.Triggers>
                                            </Style>
                                        </ListView.Resources>
                                        <ListView.View>
                                            <GridView>
                                                <GridView.ColumnHeaderContainerStyle>
                                                    <Style TargetType="GridViewColumnHeader" BasedOn="{StaticResource GridViewColumnHeaderStyle}">
                                                        <Setter Property="Visibility" Value="Collapsed" />
                                                    </Style>
                                                </GridView.ColumnHeaderContainerStyle>
                                                <GridViewColumn Header="" Width="{Binding ElementName=LVLFDummy0, Path=ActualWidth}">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                                                <Viewbox Width="18" Height="18">
                                                                    <Canvas Width="24" Height="24">
                                                                        <Path x:Name="MusicFileIcon" Fill="{DynamicResource ControlMediumColorBrush}" Canvas.Top="0" Stretch="Uniform" Data="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M13,13H11V18A2,2 0 0,1 9,20A2,2 0 0,1 7,18A2,2 0 0,1 9,16C9.4,16 9.7,16.1 10,16.3V11H13V13M13,9V3.5L18.5,9H13Z" />
                                                                    </Canvas>
                                                                </Viewbox>
                                                            </StackPanel>
                                                            <DataTemplate.Triggers>
                                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                                    <Setter TargetName="MusicFileIcon" Property="Fill" Value="#111111" />
                                                                </DataTrigger>
                                                            </DataTemplate.Triggers>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                                <GridViewColumn Header="Files" Width="{Binding ElementName=LVLFDummy1, Path=ActualWidth}">
                                                    <GridViewColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <StackPanel HorizontalAlignment="Left">
                                                                <TextBlock Text="{Binding }" Padding="3" />
                                                            </StackPanel>
                                                        </DataTemplate>
                                                    </GridViewColumn.CellTemplate>
                                                </GridViewColumn>
                                            </GridView>
                                        </ListView.View>
                                        <ListView.ItemContainerStyle>
                                            <Style TargetType="ListViewItem" BasedOn="{StaticResource ListViewItemNoAlternateStyle}">
                                                <Setter Property="ContextMenu" Value="{StaticResource LocalfileItemContextMenu}" />
                                                <Setter Property="Margin" Value="0 0 0 0"/>
                                                <Setter Property="Padding" Value="0 1 0 1"/>
                                                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                                                            <Border Name="Border" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="{TemplateBinding ClipToBounds}" CornerRadius="0" SnapsToDevicePixels="true">
                                                                <Border.InputBindings>
                                                                    <MouseBinding Command="{Binding Path=DataContext.LocalfileListviewLeftDoubleClickCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" Gesture="LeftDoubleClick" />
                                                                </Border.InputBindings>
                                                                <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </ListView.ItemContainerStyle>
                                    </ListView>

                                </Grid>
                            </TabItem>

                        </TabControl>
                    </Grid>

                    <!-- GridSplitter -->
                    <GridSplitter Grid.Row="0" Grid.Column="1" ResizeDirection="Columns"  Style="{StaticResource GridSplitterStyle}">
                    </GridSplitter>

                    <!-- Current Queue -->
                    <Grid Grid.Row="0" Grid.Column="2">

                        <ListView x:Name="SongListView" ItemsSource="{Binding Queue}" SelectionMode="Extended" SelectedItem="{Binding Path=SelectedSong, Mode=TwoWay}" AlternationCount="2" Background="{DynamicResource WindowBackgroundBaseColorBrush}" IsSynchronizedWithCurrentItem="True" BorderThickness="0" Padding="0" Margin="0" SelectionChanged="SongListView_SelectionChanged" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto">
                            <ListView.InputBindings>
                                <KeyBinding Key="Return" Command="{Binding Path=DataContext.SongListViewEnterKeyCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" />
                                <KeyBinding Gesture="Ctrl+U" Command="{Binding Path=DataContext.SongListviewMoveUpCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" />
                                <KeyBinding Gesture="Ctrl+D" Command="{Binding Path=DataContext.SongListviewMoveDownCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" />
                                <KeyBinding Gesture="Ctrl+Delete" Command="{Binding Path=DataContext.SongListviewDeleteCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" />
                            </ListView.InputBindings>
                            <ListView.ContextMenu>
                                <ContextMenu Visibility="Collapsed">
                                    <MenuItem Header="Add">
                                    </MenuItem>
                                </ContextMenu>
                            </ListView.ContextMenu>
                            <ListView.Resources>
                                <ContextMenu x:Key="SongListViewHeaderContextMenu">
                                    <MenuItem Header="{x:Static properties:Resources.SongListViewColumnHeader_Position}" IsChecked="{Binding Path=DataContext.QueueColumnHeaderPositionVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Command="{Binding QueueColumnHeaderPositionShowHideCommand}">
                                    </MenuItem>
                                    <MenuItem Header="Now Playing" IsChecked="{Binding Path=DataContext.QueueColumnHeaderNowPlayingVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Command="{Binding QueueColumnHeaderNowPlayingShowHideCommand}">
                                    </MenuItem>
                                    <MenuItem Header="{x:Static properties:Resources.SongListViewColumnHeader_Song}" IsChecked="True" IsEnabled="False">
                                    </MenuItem>
                                    <MenuItem Header="{x:Static properties:Resources.SongListViewColumnHeader_Time}" IsChecked="{Binding Path=DataContext.QueueColumnHeaderTimeVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Command="{Binding QueueColumnHeaderTimeShowHideCommand}">
                                    </MenuItem>
                                    <MenuItem Header="{x:Static properties:Resources.SongListViewColumnHeader_Artist}" IsChecked="{Binding Path=DataContext.QueueColumnHeaderArtistVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Command="{Binding QueueColumnHeaderArtistShowHideCommand}">
                                    </MenuItem>
                                    <MenuItem Header="{x:Static properties:Resources.SongListViewColumnHeader_Album}" IsChecked="{Binding Path=DataContext.QueueColumnHeaderAlbumVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Command="{Binding QueueColumnHeaderAlbumShowHideCommand}">
                                    </MenuItem>
                                    <MenuItem Header="{x:Static properties:Resources.SongListViewColumnHeader_Genre}" IsChecked="{Binding Path=DataContext.QueueColumnHeaderGenreVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Command="{Binding QueueColumnHeaderGenreShowHideCommand}">
                                    </MenuItem>
                                    <MenuItem Header="{x:Static properties:Resources.SongListViewColumnHeader_LastModified}" IsChecked="{Binding Path=DataContext.QueueColumnHeaderLastModifiedVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Command="{Binding QueueColumnHeaderLastModifiedShowHideCommand}">
                                    </MenuItem>
                                </ContextMenu>
                                <ContextMenu x:Key="SongItemContextMenu">

                                    <MenuItem Header="{x:Static properties:Resources.SongItemContextMenu_SelectedItems}">
                                        <MenuItem.Resources>
                                            <ControlTemplate x:Key="CheckUnderlineIcon">
                                                <Canvas Background="Transparent" >
                                                    <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M21,5L9,17L3.5,11.5L4.91,10.09L9,14.17L19.59,3.59L21,5M3,21V19H21V21H3Z" />
                                                </Canvas>
                                            </ControlTemplate>
                                        </MenuItem.Resources>
                                            <MenuItem.Icon>
                                                <ContentControl Template="{StaticResource CheckUnderlineIcon}" />
                                            </MenuItem.Icon>
                                        <MenuItem Header="{x:Static properties:Resources.SongItemContextMenu_Move}">
                                            <MenuItem.Resources>
                                                <ControlTemplate x:Key="SwapVerticalIcon">
                                                    <Canvas Background="Transparent" >
                                                        <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M9,3L5,7H8V14H10V7H13M16,17V10H14V17H11L15,21L19,17H16Z" />
                                                    </Canvas>
                                                </ControlTemplate>
                                            </MenuItem.Resources>
                                            <MenuItem.Icon>
                                                <ContentControl Template="{StaticResource SwapVerticalIcon}" />
                                            </MenuItem.Icon>
                                            <MenuItem Header="{x:Static properties:Resources.SongItemContextMenu_MoveUp}" Command="{Binding Path=DataContext.SongListviewMoveUpCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                                <MenuItem.Resources>
                                                    <ControlTemplate x:Key="ArrowUpIcon">
                                                        <Canvas Background="Transparent" >
                                                            <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M13,20H11V8L5.5,13.5L4.08,12.08L12,4.16L19.92,12.08L18.5,13.5L13,8V20Z" />
                                                        </Canvas>
                                                    </ControlTemplate>
                                                </MenuItem.Resources>
                                                <MenuItem.Icon>
                                                    <ContentControl Template="{StaticResource ArrowUpIcon}" />
                                                </MenuItem.Icon>
                                            </MenuItem>
                                            <MenuItem Header="{x:Static properties:Resources.SongItemContextMenu_MoveDown}" Command="{Binding Path=DataContext.SongListviewMoveDownCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                                <MenuItem.Resources>
                                                    <ControlTemplate x:Key="ArrowDownIcon">
                                                        <Canvas Background="Transparent" >
                                                            <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M11,4H13V16L18.5,10.5L19.92,11.92L12,19.84L4.08,11.92L5.5,10.5L11,16V4Z" />
                                                        </Canvas>
                                                    </ControlTemplate>
                                                </MenuItem.Resources>
                                                <MenuItem.Icon>
                                                    <ContentControl Template="{StaticResource ArrowDownIcon}" />
                                                </MenuItem.Icon>
                                            </MenuItem>
                                        </MenuItem>
                                        <Separator />
                                        <MenuItem Header="{x:Static properties:Resources.SongItemContextMenu_Remove}" Command="{Binding Path=DataContext.SongListviewDeleteCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                            <MenuItem.Resources>
                                                <ControlTemplate x:Key="MinusIcon">
                                                    <Canvas Background="Transparent" >
                                                        <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M19,13H5V11H19V13Z" />
                                                    </Canvas>
                                                </ControlTemplate>
                                            </MenuItem.Resources>
                                            <MenuItem.Icon>
                                                <ContentControl Template="{StaticResource MinusIcon}" />
                                            </MenuItem.Icon>
                                        </MenuItem>
                                    </MenuItem>
                                    <Separator />
                                    <MenuItem Header="{x:Static properties:Resources.SongItemContextMenu_Queue}">
                                        <MenuItem.Resources>
                                            <ControlTemplate x:Key="PlaylistPlay">
                                                <Canvas Background="Transparent" >
                                                    <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M19,9H2V11H19V9M19,5H2V7H19V5M2,15H15V13H2V15M17,13V19L22,16L17,13Z" />
                                                </Canvas>
                                            </ControlTemplate>
                                        </MenuItem.Resources>
                                        <MenuItem.Icon>
                                            <ContentControl Template="{StaticResource PlaylistPlay}" />
                                        </MenuItem.Icon>
                                        <MenuItem Header="{x:Static properties:Resources.SongItemContextMenu_QueueSaveAsPlaylist}" Command="{Binding Path=DataContext.SongListviewSaveCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                            <MenuItem.Resources>
                                                <ControlTemplate x:Key="PlaylistPlusIcon">
                                                    <Canvas Background="Transparent" >
                                                        <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M2,16H10V14H2M18,14V10H16V14H12V16H16V20H18V16H22V14M14,6H2V8H14M14,10H2V12H14V10Z" />
                                                    </Canvas>
                                                </ControlTemplate>
                                            </MenuItem.Resources>
                                            <MenuItem.Icon>
                                                <ContentControl Template="{StaticResource PlaylistPlusIcon}" />
                                            </MenuItem.Icon>
                                        </MenuItem>
                                        <Separator/>
                                        <MenuItem Header="{x:Static properties:Resources.SongItemContextMenu_QueueClear}" Command="{Binding Path=DataContext.SongListviewClearCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                            <MenuItem.Resources>
                                                <ControlTemplate x:Key="DeleteEmptyOutline">
                                                    <Canvas Background="Transparent" >
                                                        <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M20.37,8.91L19.37,10.64L7.24,3.64L8.24,1.91L11.28,3.66L12.64,3.29L16.97,5.79L17.34,7.16L20.37,8.91M6,19V7H11.07L18,11V19A2,2 0 0,1 16,21H8A2,2 0 0,1 6,19M8,19H16V12.2L10.46,9H8V19Z" />
                                                    </Canvas>
                                                </ControlTemplate>
                                            </MenuItem.Resources>
                                            <MenuItem.Icon>
                                                <ContentControl Template="{StaticResource DeleteEmptyOutline}" />
                                            </MenuItem.Icon>
                                        </MenuItem>
                                    </MenuItem>

                                </ContextMenu>
                                <Style TargetType="{x:Type ScrollBar}">
                                    <Setter Property="Margin" Value="0,0,0,0" />
                                    <Setter Property="BorderThickness" Value="0" />
                                    <Style.Triggers>
                                        <Trigger Property="Orientation" Value="Vertical">
                                            <Setter Property="Width" Value="18"/>
                                            <Setter Property="Height" Value="Auto" />
                                            <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </ListView.Resources>
                            <ListView.View>
                                <GridView>
                                    <GridView.ColumnHeaderContainerStyle>
                                        <Style TargetType="GridViewColumnHeader" BasedOn="{StaticResource GridViewColumnHeaderStyle}">
                                            <Setter Property="Visibility" Value="Visible" />
                                            <Setter Property="ContextMenu" Value="{StaticResource SongListViewHeaderContextMenu}" />
                                        </Style>
                                    </GridView.ColumnHeaderContainerStyle>

                                    <GridViewColumn Width="{Binding Path=DataContext.QueueColumnHeaderPositionWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Mode=TwoWay}">
                                        <GridViewColumnHeader Content="{x:Static properties:Resources.SongListViewColumnHeader_Position}" Tag="53" MinWidth="32" Visibility="{Binding Path=DataContext.QueueColumnHeaderPositionVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Converter={StaticResource BoolToVisibilityCollapsedConverter}}" helpers:GridViewBehaviours.CollapseableColumn="True"/>
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <StackPanel>
                                                    <TextBlock Text="{Binding Path=Pos}" Padding="3" />
                                                </StackPanel>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>

                                    <GridViewColumn Width="{Binding Path=DataContext.QueueColumnHeaderNowPlayingWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Mode=TwoWay}">
                                        <GridViewColumnHeader Tag="32" MinWidth="32" Visibility="{Binding QueueColumnHeaderNowPlayingVisibility, Converter={StaticResource BooleanToVisibilityConverter}}" helpers:GridViewBehaviours.CollapseableColumn="True">
                                            <Viewbox Width="16" Height="16" Margin="-2 0 0 -2">
                                                <Canvas Width="24" Height="24">
                                                    <Path Fill="{DynamicResource ControlForegroundColorBrush}" Data="M8.5,8.64L13.77,12L8.5,15.36V8.64M6.5,5V19L17.5,12"/>
                                                </Canvas>
                                            </Viewbox>
                                        </GridViewColumnHeader>
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <Viewbox Width="16" Height="16">
                                                    <Canvas Width="24" Height="24">
                                                        <Path x:Name="IsPlayingIcon" Fill="{DynamicResource PriceDownColorBrush}" Data="M8,5.14V19.14L19,12.14L8,5.14Z" Visibility="{Binding IsPlaying, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                                    </Canvas>
                                                </Viewbox>
                                                <DataTemplate.Triggers>
                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                        <Setter TargetName="IsPlayingIcon" Property="Fill" Value="#111111" />
                                                    </DataTrigger>
                                                </DataTemplate.Triggers>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>

                                    <GridViewColumn Width="{Binding Path=DataContext.QueueColumnHeaderTitleWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Mode=TwoWay}">
                                        <GridViewColumnHeader Content="{x:Static properties:Resources.SongListViewColumnHeader_Song}" Tag="180" MinWidth="120" />
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <StackPanel>
                                                    <TextBlock x:Name="SongTitleListItemTextBlock" Text="{Binding Path=Title}" Padding="3" />
                                                </StackPanel>
                                                <DataTemplate.Triggers>
                                                    <DataTrigger Binding="{Binding IsPlaying}" Value="True">
                                                        <Setter TargetName="SongTitleListItemTextBlock" Property="TextBlock.Foreground" Value="White" />
                                                        <Setter TargetName="SongTitleListItemTextBlock" Property="TextBlock.FontWeight" Value="ExtraBold" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                        <Setter TargetName="SongTitleListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                    </DataTrigger>
                                                </DataTemplate.Triggers>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>

                                    <GridViewColumn Width="{Binding Path=DataContext.QueueColumnHeaderTimeWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Mode=TwoWay}">
                                        <GridViewColumnHeader Content="{x:Static properties:Resources.SongListViewColumnHeader_Time}" Tag="62" MinWidth="62" Visibility="{Binding QueueColumnHeaderTimeVisibility, Converter={StaticResource BooleanToVisibilityConverter}}" helpers:GridViewBehaviours.CollapseableColumn="True"/>
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <StackPanel>
                                                    <TextBlock x:Name="TimeListItemTextBlock" Text="{Binding Path=TimeFormated}" Padding="3" />
                                                </StackPanel>
                                                <DataTemplate.Triggers>
                                                    <DataTrigger Binding="{Binding IsPlaying}" Value="True">
                                                        <Setter TargetName="TimeListItemTextBlock" Property="TextBlock.Foreground" Value="White" />
                                                        <Setter TargetName="TimeListItemTextBlock" Property="TextBlock.FontWeight" Value="ExtraBold" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                        <Setter TargetName="TimeListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                    </DataTrigger>
                                                </DataTemplate.Triggers>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>

                                    <GridViewColumn Width="{Binding Path=DataContext.QueueColumnHeaderArtistWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Mode=TwoWay}">
                                        <GridViewColumnHeader Content="{x:Static properties:Resources.SongListViewColumnHeader_Artist}" Tag="120" MinWidth="62" Visibility="{Binding QueueColumnHeaderArtistVisibility, Converter={StaticResource BooleanToVisibilityConverter}}" helpers:GridViewBehaviours.CollapseableColumn="True"/>
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <StackPanel>
                                                    <TextBlock x:Name="ArtistListItemTextBlock" Text="{Binding Path=Artist}" Padding="3" />
                                                </StackPanel>
                                                <DataTemplate.Triggers>
                                                    <DataTrigger Binding="{Binding IsPlaying}" Value="True">
                                                        <Setter TargetName="ArtistListItemTextBlock" Property="TextBlock.Foreground" Value="White" />
                                                        <Setter TargetName="ArtistListItemTextBlock" Property="TextBlock.FontWeight" Value="ExtraBold" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                        <Setter TargetName="ArtistListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                    </DataTrigger>
                                                </DataTemplate.Triggers>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>

                                    <GridViewColumn Width="{Binding Path=DataContext.QueueColumnHeaderAlbumWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Mode=TwoWay}">
                                        <GridViewColumnHeader Content="{x:Static properties:Resources.SongListViewColumnHeader_Album}" Tag="120" MinWidth="62" Visibility="{Binding QueueColumnHeaderAlbumVisibility, Converter={StaticResource BooleanToVisibilityConverter}}" helpers:GridViewBehaviours.CollapseableColumn="True"/>
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <StackPanel>
                                                    <TextBlock x:Name="AlbumListItemTextBlock" Text="{Binding Path=Album}" Padding="3" />
                                                </StackPanel>
                                                <DataTemplate.Triggers>
                                                    <DataTrigger Binding="{Binding IsPlaying}" Value="True">
                                                        <Setter TargetName="AlbumListItemTextBlock" Property="TextBlock.Foreground" Value="White" />
                                                        <Setter TargetName="AlbumListItemTextBlock" Property="TextBlock.FontWeight" Value="ExtraBold" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                        <Setter TargetName="AlbumListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                    </DataTrigger>
                                                </DataTemplate.Triggers>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>

                                    <GridViewColumn Width="{Binding Path=DataContext.QueueColumnHeaderGenreWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Mode=TwoWay}">
                                        <GridViewColumnHeader Content="{x:Static properties:Resources.SongListViewColumnHeader_Genre}" Tag="100" MinWidth="62" Visibility="{Binding QueueColumnHeaderGenreVisibility, Converter={StaticResource BooleanToVisibilityConverter}}" helpers:GridViewBehaviours.CollapseableColumn="True"/>
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <StackPanel>
                                                    <TextBlock x:Name="GenreListItemTextBlock" Text="{Binding Path=Genre}" Padding="3" />
                                                </StackPanel>
                                                <DataTemplate.Triggers>
                                                    <DataTrigger Binding="{Binding IsPlaying}" Value="True">
                                                        <Setter TargetName="GenreListItemTextBlock" Property="TextBlock.Foreground" Value="White" />
                                                        <Setter TargetName="GenreListItemTextBlock" Property="TextBlock.FontWeight" Value="ExtraBold" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                        <Setter TargetName="GenreListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                    </DataTrigger>
                                                </DataTemplate.Triggers>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>

                                    <GridViewColumn Width="{Binding Path=DataContext.QueueColumnHeaderLastModifiedWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Mode=TwoWay}">
                                        <GridViewColumnHeader Content="{x:Static properties:Resources.SongListViewColumnHeader_LastModified}" Tag="180" MinWidth="62" Visibility="{Binding QueueColumnHeaderLastModifiedVisibility, Converter={StaticResource BooleanToVisibilityConverter}}" helpers:GridViewBehaviours.CollapseableColumn="True"/>
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <StackPanel>
                                                    <TextBlock x:Name="LastModifiedListItemTextBlock" Text="{Binding Path=LastModifiedFormated}" Padding="3" />
                                                </StackPanel>
                                                <DataTemplate.Triggers>
                                                    <DataTrigger Binding="{Binding IsPlaying}" Value="True">
                                                        <Setter TargetName="LastModifiedListItemTextBlock" Property="TextBlock.Foreground" Value="White" />
                                                        <Setter TargetName="LastModifiedListItemTextBlock" Property="TextBlock.FontWeight" Value="ExtraBold" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                        <Setter TargetName="LastModifiedListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                    </DataTrigger>
                                                </DataTemplate.Triggers>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                </GridView>
                            </ListView.View>
                            <ListView.ItemContainerStyle>
                                <Style TargetType="ListViewItem" BasedOn="{StaticResource ListViewItemStyle}">
                                    <Setter Property="ContextMenu" Value="{StaticResource SongItemContextMenu}" />
                                    <Setter Property="Margin" Value="0 0 0 0"/>
                                    <Setter Property="Padding" Value="0 1 0 1"/>
                                    <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ListViewItem}">
                                                <Border Name="Border" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="{TemplateBinding ClipToBounds}" CornerRadius="0" SnapsToDevicePixels="true">
                                                    <Border.InputBindings>
                                                        <MouseBinding Command="{Binding Path=DataContext.SongListViewLeftDoubleClickCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" Gesture="LeftDoubleClick" />
                                                    </Border.InputBindings>
                                                    <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                </Border>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ListView.ItemContainerStyle>
                        </ListView>

                    </Grid>

                    <Grid Grid.Column="3"></Grid>

                </Grid>

                <!-- StatusBar -->
                <StatusBar Grid.Row="5" Background="Transparent" VerticalAlignment="Center">
                    <Viewbox Width="16" Height="16">
                        <Canvas Width="24" Height="24">
                            <Path Fill="{DynamicResource ControlForegroundColorBrush}" Data="{Binding StatusButton}" />
                        </Canvas>
                    </Viewbox>
                    <Label Content="{Binding StatusMessage}" Style="{DynamicResource DefaultLabelStyle}" VerticalAlignment="Center" Margin="0" Padding="0"></Label>
                </StatusBar>

            </Grid>

            <!-- 接続中画面の背景（起動時に、設定されているホストに接続を試行している時に一瞬表示される。） -->
            <Grid Grid.Row="1">
                <Viewbox Grid.Row="0" Grid.Column="0" Margin="0 0 6 0" Width="32" Height="32" VerticalAlignment="Center" HorizontalAlignment="Center">
                    <Canvas Width="24" Height="24">
                        <Path Fill="{DynamicResource ControlForegroundColorBrush}" Data="{Binding StatusButton, NotifyOnTargetUpdated=True}" >
                            <Path.Triggers>
                                <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0.0" To="1.0" Duration="0:0:2" AutoReverse="True" RepeatBehavior="Forever">
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </Path.Triggers>
                        </Path>
                    </Canvas>
                </Viewbox>
            </Grid>


            <!-- 初期設定兼再接続画面 -->
            <Grid Grid.Row="1" Background="{DynamicResource BoardBackgroundColorBrush}" Visibility="{Binding IsConnectionSettingShow, Converter={StaticResource BoolToVisibilityCollapsedConverter}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="0"/>
                    <RowDefinition Height="35*"/>
                    <RowDefinition Height="65*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Grid Grid.Row="1" Margin="48 0 48 32" VerticalAlignment="Bottom" HorizontalAlignment="Center">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <Viewbox Grid.Row="0" Grid.Column="0" Margin="0 0 6 36" Width="24" Height="24" VerticalAlignment="Center" HorizontalAlignment="Center">
                        <Canvas Width="24" Height="24">
                            <Path Fill="{DynamicResource ControlForegroundColorBrush}" Data="{Binding StatusButton, NotifyOnTargetUpdated=True}" >
                                <Path.Triggers>
                                    <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0.0" To="1.0" Duration="0:0:5" AutoReverse="True" RepeatBehavior="Forever">
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger>
                                </Path.Triggers>
                            </Path>
                        </Canvas>
                    </Viewbox>

                    <TextBlock Grid.Row="1" Grid.Column="0" Text="{Binding StatusMessage, NotifyOnTargetUpdated=True}" TextElement.Foreground="WhiteSmoke" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" TextElement.FontWeight="Bold" TextWrapping="WrapWithOverflow">
                        <TextBlock.Triggers>
                            <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </TextBlock.Triggers>
                    </TextBlock>

                </Grid>

                <StackPanel Grid.Row="2" HorizontalAlignment="Center" VerticalAlignment="top">

                    <ComboBox Style="{StaticResource ComboBoxFlatStyle}" ItemsSource="{Binding Profiles}" SelectedItem="{Binding CurrentProfile}" HorizontalAlignment="Center" Tag="New Profile"  Visibility="{Binding IsCurrentProfileSet, Converter={StaticResource BoolToVisibilityCollapsedConverter}}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <Viewbox Width="10" Height="10" Margin="0 0 6 0">
                                        <Canvas Width="18" Height="18">
                                            <Path Data="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" Fill="DimGray" Visibility="{Binding Path=IsDefault, Converter={StaticResource BoolToVisibilityCollapsedConverter}}"/>
                                        </Canvas>
                                    </Viewbox>
                                    <TextBlock Text="{Binding Path=Name}"></TextBlock>
                                </StackPanel>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>


                    <TextBlock Text="{x:Static properties:Resources.Host}" Style="{DynamicResource DefaultTextBlockStyle}"></TextBlock>
                    <TextBox x:Name="NewHost_TextBox" Text="{Binding Host, ValidatesOnDataErrors=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="240" IsVisibleChanged="TextBox_IsVisibleChanged">
                        <TextBox.Style>
                            <Style TargetType="TextBox">
                                <Style.Triggers>
                                    <Trigger Property="Validation.HasError" Value="true">
                                        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors)/ErrorContent}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>

                    <TextBlock Text="{x:Static properties:Resources.Port}" Style="{DynamicResource DefaultTextBlockStyle}" Margin="0 12 0 0"></TextBlock>
                    <TextBox Text="{Binding Port, ValidatesOnDataErrors=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="240">
                        <TextBox.Style>
                            <Style TargetType="TextBox">
                                <Style.Triggers>
                                    <Trigger Property="Validation.HasError" Value="true">
                                        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors)/ErrorContent}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>


                    <TextBlock Text="{x:Static properties:Resources.Password}" Style="{DynamicResource DefaultTextBlockStyle}" Margin="0 12 0 0"></TextBlock>
                    <PasswordBox x:Name="PasswordBoxNew" PasswordChar="*" Style="{DynamicResource DefaultPasswordBoxStyle}" Width="240">
                    </PasswordBox>

                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0 24 0 0">
                        <Button Content="{x:Static properties:Resources.Connect}" IsDefault="True" IsEnabled="{Binding Path=IsNotConnectingNorConnected}" Command="{Binding ConnectCommand}" CommandParameter="{Binding ElementName=PasswordBoxNew}" Padding="4" Width="100"></Button>
                    </StackPanel>

                </StackPanel>

            </Grid>

            <!-- 設定画面 -->
            <Grid Grid.Row="1" Visibility="{Binding IsSettingsShow, Converter={StaticResource BoolToVisibilityCollapsedConverter}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="0"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <TabControl Grid.Row="1" TabStripPlacement="Left" Background="{DynamicResource WindowBackgroundColorBrush}" BorderThickness="0" Margin="0" Style="{DynamicResource SettingsTabControlStyle}">

                    <!-- 設定 -->
                    <TabItem Width="100" Height="48" Style="{DynamicResource SettingsTabItemStyle}" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <TabItem.Header>
                            <Label Content="{x:Static properties:Resources.Settings}" Foreground="{Binding RelativeSource={RelativeSource AncestorType=TabItem}, Path=Foreground}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"></Label>
                        </TabItem.Header>

                        <TabControl Margin="12">
                            <TabControl.Resources>
                                <Style x:Key="LicenseTabFocusVisualStyle">
                                    <Setter Property="Control.Template">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <Rectangle Margin="1" StrokeThickness="1" StrokeDashArray="1 2" Stroke="{DynamicResource ControlMediumColorBrush}"/>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>

                                <Style TargetType="{x:Type TabControl}">
                                    <Setter Property="OverridesDefaultStyle" Value="False" />
                                    <Setter Property="Foreground" Value="{DynamicResource NormalTextColorBrush}" />
                                    <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}"/>
                                    <Setter Property="BorderThickness" Value="0"/>
                                </Style>
                                <Style x:Key="LicenseTabItemStyle" TargetType="{x:Type TabItem}">
                                    <Setter Property="OverridesDefaultStyle" Value="False" />
                                    <Setter Property="FocusVisualStyle" Value="{StaticResource LicenseTabFocusVisualStyle}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource ControlDarkColorBrush}" />
                                    <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}"/>
                                    <Setter Property="BorderThickness" Value="0 0 0 2"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type TabItem}">

                                                <Border Name="HeaderBorder" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Center" CornerRadius="0">
                                                    <ContentPresenter x:Name="ContentSite" HorizontalAlignment="Center" VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" />
                                                </Border>

                                                <ControlTemplate.Triggers>

                                                    <Trigger Property="IsSelected" Value="True">
                                                        <Setter Property="Foreground" Value="{DynamicResource TitleTextColorBrush}" />
                                                        <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="{DynamicResource ControlLightColorBrush}" />
                                                        <Setter TargetName="HeaderBorder" Property="BorderThickness" Value="0 0 0 2"/>
                                                    </Trigger>

                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter Property="Foreground" Value="{DynamicResource TitleTextColorBrush}" />
                                                        <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="{DynamicResource ControlDarkColorBrush}" />
                                                        <Setter TargetName="HeaderBorder" Property="BorderThickness" Value="0 0 0 2"/>
                                                    </Trigger>

                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Background" Value="gray" />
                                                        <Setter Property="BorderBrush" Value="#FFC9C7BA" />
                                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </TabControl.Resources>

                            <TabItem Style="{DynamicResource LicenseTabItemStyle}">
                                <TabItem.Header>
                                    <Label Content="{x:Static properties:Resources.Connection}" Style="{DynamicResource SectionTitle}" Padding="6" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"></Label>
                                </TabItem.Header>

                                <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" VerticalAlignment="Top" Padding="6" Style="{DynamicResource CustomScrollViewerStyle}">
                                    <Grid Margin="10">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                        </Grid.RowDefinitions>

                                        <Border Grid.Row="0" HorizontalAlignment="Stretch" BorderBrush="{DynamicResource ControlLightColorBrush}" BorderThickness="0 0 0 1">
                                            <Label Style="{DynamicResource SectionTitle}" Content="{x:Static properties:Resources.Profiles}" HorizontalAlignment="Left"/>
                                        </Border>

                                        <!-- Profiles -->
                                        <Grid Grid.Row="1" HorizontalAlignment="Left" Margin="0 0 0 0">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>

                                            <StackPanel Grid.Row="0" Grid.Column="0" HorizontalAlignment="Left">

                                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="0 12 0 0">
                                                    <TextBlock Style="{DynamicResource DefaultTextBlockStyle}" Text="{Binding SettingProfileEditMessage, NotifyOnTargetUpdated=True}">
                                                        <TextBlock.Triggers>
                                                            <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                                                <BeginStoryboard>
                                                                    <Storyboard>
                                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                                                                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                            <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="1"/>
                                                                        </DoubleAnimationUsingKeyFrames>
                                                                    </Storyboard>
                                                                </BeginStoryboard>
                                                            </EventTrigger>
                                                        </TextBlock.Triggers>
                                                    </TextBlock>
                                                </StackPanel>

                                                <StackPanel Orientation="Horizontal" Margin="0 12 0 0">
                                                    <ComboBox Style="{StaticResource ComboBoxFlatStyle}" HorizontalAlignment="Left" ItemsSource="{Binding Profiles}" SelectedItem="{Binding SelectedProfile}" Tag="New Profile" Width="170">
                                                        <ComboBox.ItemTemplate>
                                                            <DataTemplate>
                                                                <StackPanel Orientation="Horizontal">
                                                                    <Viewbox Width="10" Height="10" Margin="0 0 6 0">
                                                                        <Canvas Width="18" Height="18">
                                                                            <Path Data="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" Fill="{DynamicResource NormalTextColorBrush}" Visibility="{Binding Path=IsDefault, Converter={StaticResource BoolToVisibilityCollapsedConverter}}"/>
                                                                        </Canvas>
                                                                    </Viewbox>
                                                                    <TextBlock Text="{Binding Path=Name}"></TextBlock>
                                                                </StackPanel>
                                                            </DataTemplate>
                                                        </ComboBox.ItemTemplate>
                                                    </ComboBox>

                                                    <Button Margin="12 0 0 0" Width="30" Height="30" Style="{DynamicResource PathButton}" Content="M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M13,7H11V11H7V13H11V17H13V13H17V11H13V7Z" ToolTip="{x:Static properties:Resources.New}" Command="{Binding NewProfileCommand}"></Button>
                                                    <Button Margin="6 0 0 0" Width="30" Height="30" Style="{DynamicResource PathButton}" Content="M17,13H7V11H17M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z" ToolTip="{x:Static properties:Resources.Delete}" Command="{Binding DeleteProfileCommand}"></Button>

                                                </StackPanel>

                                                <TextBlock Text="{x:Static properties:Resources.Host}" Style="{DynamicResource DefaultTextBlockStyle}" Margin="0 12 0 0"></TextBlock>
                                                <TextBox Text="{Binding Host, ValidatesOnDataErrors=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="240">
                                                    <TextBox.Style>
                                                        <Style TargetType="TextBox" BasedOn="{StaticResource DefaultTextBoxStyle}">
                                                            <Style.Triggers>
                                                                <Trigger Property="Validation.HasError" Value="true">
                                                                    <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors)/ErrorContent}" />
                                                                </Trigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </TextBox.Style>
                                                </TextBox>

                                                <TextBlock Text="{x:Static properties:Resources.Port}" Style="{DynamicResource DefaultTextBlockStyle}" Margin="0 12 0 0"></TextBlock>
                                                <TextBox Text="{Binding Port, ValidatesOnDataErrors=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="240">
                                                    <TextBox.Style>
                                                        <Style TargetType="TextBox" BasedOn="{StaticResource DefaultTextBoxStyle}">
                                                            <Style.Triggers>
                                                                <Trigger Property="Validation.HasError" Value="true">
                                                                    <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors)/ErrorContent}" />
                                                                </Trigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </TextBox.Style>
                                                </TextBox>

                                                <TextBlock Text="{x:Static properties:Resources.Password}" Style="{DynamicResource DefaultTextBlockStyle}" Margin="0 12 0 0"></TextBlock>
                                                
                                                <StackPanel Visibility="{Binding IsNotPasswordSet, Converter={StaticResource BoolToVisibilityCollapsedConverter}}">
                                                    <PasswordBox x:Name="PasswordBox" Style="{StaticResource DefaultPasswordBoxStyle}" PasswordChar="*" Width="240"></PasswordBox>
                                                </StackPanel>
                                                <StackPanel Visibility="{Binding IsPasswordSet, Converter={StaticResource BoolToVisibilityCollapsedConverter}}" Orientation="Horizontal">
                                                    <TextBlock Text="{Binding Password}" Width="198" HorizontalAlignment="Left" VerticalAlignment="Top"></TextBlock>
                                                    <Button Margin="12 -14 0 0" Width="30" Height="30" Style="{DynamicResource PathButton}" Command="{Binding ShowChangePasswordDialogCommand}" CommandParameter="{Binding ElementName=PasswordBox}" ToolTip="{x:Static properties:Resources.Settings_UnlockAndChangePassword}" Content="M12,17C10.89,17 10,16.1 10,15C10,13.89 10.89,13 12,13A2,2 0 0,1 14,15A2,2 0 0,1 12,17M18,20V10H6V20H18M18,8A2,2 0 0,1 20,10V20A2,2 0 0,1 18,22H6C4.89,22 4,21.1 4,20V10C4,8.89 4.89,8 6,8H7V6A5,5 0 0,1 12,1A5,5 0 0,1 17,6V8H18M12,3A3,3 0 0,0 9,6V8H15V6A3,3 0 0,0 12,3Z"></Button>
                                                </StackPanel>
                                                
                                                <CheckBox Content="{x:Static properties:Resources.Default}" Style="{DynamicResource DefaultCheckBoxStyle}" IsChecked="{Binding SetIsDefault}" Margin="0 12 0 0"></CheckBox>

                                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="0 12 0 0">
                                                    <Button Content="{x:Static properties:Resources.Update}" Command="{Binding UpdateProfileCommand}" CommandParameter="{Binding ElementName=PasswordBox}" Padding="4" Margin="0 0 0 0" Width="100" IsDefault="False"></Button>
                                                    <Button Content="{x:Static properties:Resources.Save}" Command="{Binding SaveProfileCommand}" CommandParameter="{Binding ElementName=PasswordBox}" Padding="4" Margin="12 0 0 0" Width="100" IsDefault="False"></Button>
                                                </StackPanel>

                                                <StackPanel Orientation="Horizontal" Margin="0 12 0 0" HorizontalAlignment="Left">
                                                    <TextBlock Width="240" Text="{Binding StatusMessage, NotifyOnTargetUpdated=True}" TextElement.Foreground="WhiteSmoke" TextAlignment="Center" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" TextElement.FontWeight="Bold" TextWrapping="WrapWithOverflow">
                                                        <TextBlock.Triggers>
                                                            <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                                                <BeginStoryboard>
                                                                    <Storyboard>
                                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                                                                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                            <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="1"/>
                                                                        </DoubleAnimationUsingKeyFrames>
                                                                    </Storyboard>
                                                                </BeginStoryboard>
                                                            </EventTrigger>
                                                        </TextBlock.Triggers>
                                                    </TextBlock>
                                                </StackPanel>

                                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="0 12 0 0">

                                                    <Button Content="{x:Static properties:Resources.Connect}" IsEnabled="{Binding Path=IsNotConnecting}" Command="{Binding ChangeConnectionProfileCommand}" CommandParameter="{Binding ElementName=PasswordBox}" Padding="4" Width="100" IsDefault="False"></Button>

                                                </StackPanel>

                                            </StackPanel>


                                        </Grid>

                                    </Grid>
                                </ScrollViewer>

                            </TabItem>
                            
                            <!-- Options -->
                            <TabItem Style="{DynamicResource LicenseTabItemStyle}">
                                <TabItem.Header>
                                    <Label Content="{x:Static properties:Resources.Options}" Style="{DynamicResource SectionTitle}" Padding="6" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"></Label>
                                </TabItem.Header>

                                <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" VerticalAlignment="Top" Padding="6" Style="{DynamicResource CustomScrollViewerStyle}">
                                    <Grid Margin="10">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                        </Grid.RowDefinitions>

                                        <!-- MPD Server -->
                                        <Border Grid.Row="0" HorizontalAlignment="Stretch" BorderBrush="{DynamicResource ControlLightColorBrush}" BorderThickness="0 0 0 1">
                                            <Label Style="{DynamicResource SectionTitle}" Content="MPD Server" HorizontalAlignment="Left"/>
                                        </Border>

                                        <Grid Grid.Row="1" HorizontalAlignment="Left" Width="500" Margin="0 12 0 0">
                                            <CheckBox Content="{x:Static properties:Resources.Settings_Opts_UpdateDatabaseOnStartup}" Style="{DynamicResource DefaultCheckBoxStyle}" IsChecked="{Binding IsUpdateOnStartup}" Margin="0 12 0 0"></CheckBox>
                                        </Grid>

                                        <!-- Developer Mode -->
                                        <Border Grid.Row="2" Margin="0 32 0 0" HorizontalAlignment="Stretch" BorderBrush="{DynamicResource ControlLightColorBrush}" BorderThickness="0 0 0 1">
                                            <Label Style="{DynamicResource SectionTitle}" Content="{x:Static properties:Resources.DeveloperMode}" HorizontalAlignment="Left"/>
                                        </Border>
                                        <Grid Grid.Row="3" HorizontalAlignment="Left" Width="500" Margin="0 12 0 0">
                                            <CheckBox Content="{x:Static properties:Resources.Settings_Opts_ShowDebugWidow}" Style="{DynamicResource DefaultCheckBoxStyle}" IsChecked="{Binding IsShowDebugWindow}" Margin="0 12 0 0"></CheckBox>
                                        </Grid>
                                        
                                    </Grid>
                                </ScrollViewer>

                            </TabItem>

                        </TabControl>

                    </TabItem>

                    <!-- About -->
                    <TabItem Width="100" Height="48" Style="{DynamicResource SettingsTabItemStyle}" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <TabItem.Header>
                            <Label Content="{x:Static properties:Resources.About}" Foreground="{Binding RelativeSource={RelativeSource AncestorType=TabItem}, Path=Foreground}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"></Label>
                        </TabItem.Header>

                        <TabControl Margin="12">
                            <TabControl.Resources>
                                <Style x:Key="LicenseTabFocusVisualStyle">
                                    <Setter Property="Control.Template">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <Rectangle Margin="1" StrokeThickness="1" StrokeDashArray="1 2" Stroke="{DynamicResource ControlMediumColorBrush}"/>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>

                                <Style TargetType="{x:Type TabControl}">
                                    <Setter Property="OverridesDefaultStyle" Value="False" />
                                    <Setter Property="Foreground" Value="{DynamicResource NormalTextColorBrush}" />
                                    <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}"/>
                                    <Setter Property="BorderThickness" Value="0"/>
                                </Style>
                                <Style x:Key="LicenseTabItemStyle" TargetType="{x:Type TabItem}">
                                    <Setter Property="OverridesDefaultStyle" Value="False" />
                                    <Setter Property="FocusVisualStyle" Value="{StaticResource LicenseTabFocusVisualStyle}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource ControlDarkColorBrush}" />
                                    <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}"/>
                                    <Setter Property="BorderThickness" Value="0 0 0 2"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type TabItem}">

                                                <Border Name="HeaderBorder" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Center" CornerRadius="0">
                                                    <ContentPresenter x:Name="ContentSite" HorizontalAlignment="Center" VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" />
                                                </Border>

                                                <ControlTemplate.Triggers>

                                                    <Trigger Property="IsSelected" Value="True">
                                                        <Setter Property="Foreground" Value="{DynamicResource TitleTextColorBrush}" />
                                                        <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="{DynamicResource ControlLightColorBrush}" />
                                                        <Setter TargetName="HeaderBorder" Property="BorderThickness" Value="0 0 0 2"/>
                                                    </Trigger>

                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter Property="Foreground" Value="{DynamicResource TitleTextColorBrush}" />
                                                        <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="{DynamicResource ControlDarkColorBrush}" />
                                                        <Setter TargetName="HeaderBorder" Property="BorderThickness" Value="0 0 0 2"/>
                                                    </Trigger>

                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Background" Value="gray" />
                                                        <Setter Property="BorderBrush" Value="#FFC9C7BA" />
                                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </TabControl.Resources>
                            
                            <!-- Application -->
                            <TabItem Style="{DynamicResource LicenseTabItemStyle}">
                                <TabItem.Header>
                                    <Label Content="{x:Static properties:Resources.Application}" Style="{DynamicResource SectionTitle}" Padding="6" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"></Label>
                                </TabItem.Header>

                                <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" VerticalAlignment="Top" Padding="6" Style="{DynamicResource CustomScrollViewerStyle}">

                                    <Grid Margin="10">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                        </Grid.RowDefinitions>

                                        <!--  -->
                                        <Border Grid.Row="0" HorizontalAlignment="Stretch" BorderBrush="{DynamicResource ControlLightColorBrush}" BorderThickness="0 0 0 1">
                                            <Label Style="{DynamicResource SectionTitle}" Content="{x:Static properties:Resources.Version}" HorizontalAlignment="Left"/>
                                        </Border>

                                        <Grid Grid.Row="1" HorizontalAlignment="Left" Margin="12">
                                            <TextBlock Style="{DynamicResource DefaultTextBlockStyle}" Text="{Binding AppTitleVer}"></TextBlock>
                                        </Grid>

                                        <!--  -->
                                        <Border Grid.Row="2" HorizontalAlignment="Stretch" BorderBrush="{DynamicResource ControlLightColorBrush}" BorderThickness="0 0 0 1">
                                            <Label Style="{DynamicResource SectionTitle}" Content="{x:Static properties:Resources.Website}" HorizontalAlignment="Left"/>
                                        </Border>

                                        <Grid Grid.Row="3" HorizontalAlignment="Left" Margin="12">
                                            <TextBlock Style="{DynamicResource DefaultTextBlockStyle}">
                                                <Hyperlink NavigateUri="https://torum.github.io/MPDCtrl" RequestNavigate="Hyperlink_RequestNavigate">https://torum.github.io/MPDCtrl</Hyperlink>
                                            </TextBlock>
                                        </Grid>

                                        <!--  -->
                                        <Border Grid.Row="4" HorizontalAlignment="Stretch" BorderBrush="{DynamicResource ControlLightColorBrush}" BorderThickness="0 0 0 1">
                                            <Label Style="{DynamicResource SectionTitle}" Content="{x:Static properties:Resources.PrivacyPolicy}" HorizontalAlignment="Left"/>
                                        </Border>

                                        <Grid Grid.Row="5" HorizontalAlignment="Left" Margin="12">
                                            <TextBlock Style="{DynamicResource DefaultTextBlockStyle}" TextWrapping="Wrap" Text="{x:Static properties:Resources.PrivacyPolicyText}"></TextBlock>
                                        </Grid>

                                    </Grid>

                                </ScrollViewer>

                            </TabItem>
                            
                            <!-- License -->
                            <TabItem Style="{DynamicResource LicenseTabItemStyle}">
                                
                                <TabItem.Header>
                                    <Label Content="{x:Static properties:Resources.License}" Style="{DynamicResource SectionTitle}" Padding="6" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"></Label>
                                </TabItem.Header>

                                <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" VerticalAlignment="Top" Padding="6" Style="{DynamicResource CustomScrollViewerStyle}">

                                    <Grid Margin="10">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                        </Grid.RowDefinitions>

                                        <!-- License -->
                                        <Border Grid.Row="0" HorizontalAlignment="Stretch" BorderBrush="{DynamicResource ControlLightColorBrush}" BorderThickness="0 0 0 1">
                                            <Label Style="{DynamicResource SectionTitle}" Content="{x:Static properties:Resources.LicenseTitle}" HorizontalAlignment="Left"/>
                                        </Border>

                                        <Grid Grid.Row="1" HorizontalAlignment="Left" Margin="12">
                                            <StackPanel >
                                                <TextBlock Text="{x:Static properties:Resources.LicenseText}" TextWrapping="Wrap" Padding="6 0 6 6" Style="{DynamicResource DefaultTextBlockStyle}"></TextBlock>
                                            </StackPanel>
                                        </Grid>
                                    </Grid>
                                    
                                </ScrollViewer>

                            </TabItem>
                            
                        </TabControl>

                    </TabItem>

                </TabControl>

                <Border Grid.Row="2" Height="62" Margin="-1 -1 -1 0" Background="{DynamicResource BoardBackgroundColorBrush}">
                    <Border  BorderThickness="0 0.5 0 0" BorderBrush="{DynamicResource ControlMediumColorBrush}">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0 12 0 0">
                            <Button Width="80" Content="{x:Static properties:Resources.Close}" Margin="0 0 32 0" Padding="3" IsDefault="False" Command="{Binding SettingsOKCommand}"></Button>
                        </StackPanel>
                    </Border>
                </Border>

            </Grid>

            <!-- Comfirmation screen -->
            <Grid Grid.Row="0" Grid.RowSpan="2" Visibility="{Binding IsComfirmationDialogShow, Converter={StaticResource BoolToVisibilityCollapsedConverter}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{DynamicResource WindowBackgroundBaseColorBrush}" Opacity="0.8"></Rectangle>
                
                <Border Background="{DynamicResource BoardBackgroundColorBrush}" Style="{DynamicResource BoardStyle}" HorizontalAlignment="Center" VerticalAlignment="Center">

                    <Grid Width="300" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <Border Grid.Row="0" HorizontalAlignment="Stretch" BorderBrush="{DynamicResource ControlLightColorBrush}" BorderThickness="0 0 0 1">
                            <Label Style="{DynamicResource SectionTitle}" Content="{Binding DialogTitle}" HorizontalAlignment="Left"/>
                        </Border>
                        <StackPanel Grid.Row="1" Margin="12">
                            <TextBlock Text="{Binding DialogMessage}" TextWrapping="Wrap" Style="{DynamicResource DefaultTextBlockStyle}"></TextBlock>
                        </StackPanel>
                        <StackPanel Grid.Row="2" Margin="12">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0 12 0 0">
                                <Button IsVisibleChanged="DialogButton_IsVisibleChanged" Width="80" Content="{x:Static properties:Resources.OK}" Margin="15 0 15 0" Padding="3" IsDefault="True" Command="{Binding ComfirmationDialogOKCommand}"></Button>
                                <Button Width="80" Content="{x:Static properties:Resources.Cancel}" Margin="15 0 15 0" Padding="3" IsDefault="False" Command="{Binding ComfirmationDialogCancelCommand}"></Button>
                            </StackPanel>
                        </StackPanel>
                        
                    </Grid>
                    
                </Border>
            </Grid>

            <!-- Information screen -->
            <Grid Grid.Row="0" Grid.RowSpan="2" Visibility="{Binding IsInformationDialogShow, Converter={StaticResource BoolToVisibilityCollapsedConverter}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{DynamicResource WindowBackgroundBaseColorBrush}" Opacity="0.8"></Rectangle>

                <Border Background="{DynamicResource BoardBackgroundColorBrush}" Style="{DynamicResource BoardStyle}" HorizontalAlignment="Center" VerticalAlignment="Center">

                    <Grid Width="300" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <Border Grid.Row="0" HorizontalAlignment="Stretch" BorderBrush="{DynamicResource ControlLightColorBrush}" BorderThickness="0 0 0 1">
                            <Label Style="{DynamicResource SectionTitle}" Content="{Binding DialogTitle}" HorizontalAlignment="Left"/>
                        </Border>
                        <StackPanel Grid.Row="1" Margin="12">
                            <TextBlock Text="{Binding DialogMessage}" TextWrapping="Wrap" Style="{DynamicResource DefaultTextBlockStyle}"></TextBlock>
                        </StackPanel>
                        <StackPanel Grid.Row="2" Margin="12">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0 12 0 0">
                                <Button IsVisibleChanged="DialogButton_IsVisibleChanged" Width="80" Content="{x:Static properties:Resources.OK}" Margin="15 0 15 0" Padding="3" IsDefault="True" Command="{Binding InformationDialogOKCommand}"></Button>
                            </StackPanel>
                        </StackPanel>

                    </Grid>

                </Border>
            </Grid>

            <!-- Input screen -->
            <Grid Grid.Row="0" Grid.RowSpan="2" Visibility="{Binding IsInputDialogShow, Converter={StaticResource BoolToVisibilityCollapsedConverter}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{DynamicResource WindowBackgroundBaseColorBrush}" Opacity="0.8"></Rectangle>

                <Border Background="{DynamicResource BoardBackgroundColorBrush}" Style="{DynamicResource BoardStyle}" HorizontalAlignment="Center" VerticalAlignment="Center">

                    <Grid Width="300" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <Border Grid.Row="0" HorizontalAlignment="Stretch" BorderBrush="{DynamicResource ControlLightColorBrush}" BorderThickness="0 0 0 1">
                            <Label Style="{DynamicResource SectionTitle}" Content="{Binding DialogTitle}" HorizontalAlignment="Left"/>
                        </Border>
                        <StackPanel Grid.Row="1" Margin="12">
                            <TextBlock Text="{Binding DialogMessage}" TextWrapping="Wrap" Style="{DynamicResource DefaultTextBlockStyle}" Margin="25 0 0 0"></TextBlock>

                            <TextBox x:Name="DialogInputTextBox" IsVisibleChanged="DialogInputTextBox_IsVisibleChanged" Style="{DynamicResource DefaultTextBoxStyle}" Text="{Binding DialogInputText,UpdateSourceTrigger=PropertyChanged}" Width="150" Margin="25 12 12 0"></TextBox>
                            
                        </StackPanel>
                        <StackPanel Grid.Row="2" Margin="12">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0 12 0 0">
                                <Button Width="80" Content="{x:Static properties:Resources.OK}" Margin="15 0 15 0" Padding="3" IsDefault="True" Command="{Binding InputDialogOKCommand}"></Button>
                                <Button Width="80" Content="{x:Static properties:Resources.Cancel}" Margin="15 0 15 0" Padding="3" IsDefault="False" Command="{Binding InputDialogCancelCommand}"></Button>
                            </StackPanel>
                        </StackPanel>

                    </Grid>

                </Border>
            </Grid>

            <!-- Change Password screen -->
            <Grid Grid.Row="0" Grid.RowSpan="2" Visibility="{Binding IsChangePasswordDialogShow, Converter={StaticResource BoolToVisibilityCollapsedConverter}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{DynamicResource WindowBackgroundBaseColorBrush}" Opacity="0.8"></Rectangle>

                <Border Background="{DynamicResource BoardBackgroundColorBrush}" Style="{DynamicResource BoardStyle}" HorizontalAlignment="Center" VerticalAlignment="Center">

                    <Grid Width="300" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <Border Grid.Row="0" HorizontalAlignment="Stretch" BorderBrush="{DynamicResource ControlLightColorBrush}" BorderThickness="0 0 0 1">
                            <Label Style="{DynamicResource SectionTitle}" Content="{x:Static properties:Resources.ChangePasswordDialog_ChangePassword}" HorizontalAlignment="Left"/>
                        </Border>
                        <StackPanel Grid.Row="1" Margin="12">
                            <TextBlock Text="{Binding DialogMessage, NotifyOnTargetUpdated=True}" TextWrapping="Wrap" Style="{DynamicResource DefaultTextBlockStyle}" Margin="25 0 0 0">
                                <TextBlock.Triggers>
                                    <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="1"/>
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger>
                                </TextBlock.Triggers>
                            </TextBlock>

                            <TextBlock Text="{x:Static properties:Resources.ChangePasswordDialog_CurrentPassword}" Style="{DynamicResource DefaultTextBlockStyle}" Margin="25 12 0 0"></TextBlock>
                            <PasswordBox x:Name="ChangeOldPasswordBox" Width="200" IsVisibleChanged="PasswordBox_IsVisibleChanged"></PasswordBox>

                            <TextBlock Text="{x:Static properties:Resources.ChangePasswordDialog_NewPassword}" Style="{DynamicResource DefaultTextBlockStyle}" Margin="25 12 0 0"></TextBlock>
                            <PasswordBox x:Name="ChangeNewPasswordBox" Width="200"></PasswordBox>

                        </StackPanel>
                        <StackPanel Grid.Row="2" Margin="12">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0 12 0 0">
                                <Button Width="80" Content="{x:Static properties:Resources.OK}" Margin="15 0 15 0" Padding="3" IsDefault="True" Command="{Binding ChangePasswordDialogOKCommand}">
                                    <Button.CommandParameter>
                                        <MultiBinding Converter="{StaticResource MultipleCommandParameterConverter}">
                                            <Binding ElementName="ChangeOldPasswordBox" />
                                            <Binding ElementName="ChangeNewPasswordBox" />
                                        </MultiBinding>
                                    </Button.CommandParameter>
                                </Button>
                                <Button Width="80" Content="{x:Static properties:Resources.Cancel}" Margin="15 0 15 0" Padding="3" IsDefault="False" Command="{Binding ChangePasswordDialogCancelCommand}"></Button>
                            </StackPanel>
                        </StackPanel>

                    </Grid>

                </Border>
            </Grid>

        </Grid>
    </Border>
</Window>
