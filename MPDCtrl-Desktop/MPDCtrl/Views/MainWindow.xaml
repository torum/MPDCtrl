<Window x:Class="MPDCtrl.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:properties="clr-namespace:MPDCtrl.Properties"
        xmlns:helpers="clr-namespace:MPDCtrl.Helpers"
        xmlns:vms="clr-namespace:MPDCtrl.ViewModels"
        xmlns:models="clr-namespace:MPDCtrl.Models"
        xmlns:local="clr-namespace:MPDCtrl" 
        d:DataContext="{d:DesignInstance Type=vms:MainViewModel}"
        mc:Ignorable="d"
        Background="#C0191919"
        ResizeMode="CanResize"
        StateChanged="Window_StateChanged"
        Activated="Window_Activated"
        Deactivated="Window_Deactivated"
        Closing="Window_Closing"
        Title="{Binding AppTitle}"
        WindowStyle="None"
        Width="780" Height="480"
        MinWidth="768" MinHeight="162">
    <!--  
        WindowStyle="None"
        AllowsTransparency="True"
    -->
    <!--  Background="#C0333333" -->
    <!-- DataContext="{StaticResource MainViewModel}" -->
    <Window.Style>
        <Style TargetType="Window">
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsBusy}" Value="True">
                    <Setter Property="Cursor" Value="Wait" />
                </DataTrigger>
                <DataTrigger Binding="{Binding IsWorking}" Value="True">
                    <Setter Property="Cursor" Value="AppStarting" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </Window.Style>
    <WindowChrome.WindowChrome>
        <WindowChrome CaptionHeight="32" ResizeBorderThickness="{x:Static SystemParameters.WindowResizeBorderThickness}"/>
    </WindowChrome.WindowChrome>
    <Window.InputBindings>
        <!-- Not good for listview's key bind to select row.
        <KeyBinding Command="{Binding PlayCommand}" Modifiers="Ctrl" Key="Space" /> -->
        <KeyBinding Command="{Binding PlayCommand}" Key="Play" />
        <KeyBinding Command="{Binding PlayCommand}" Key="Space" />
        <KeyBinding Command="{Binding PlayCommand}" Modifiers="Ctrl" Key="P"/>
        <KeyBinding Command="{Binding PlayCommand}" Key="MediaPlayPause" />
        <KeyBinding Command="{Binding PlayCommand}" Key="MediaStop" />
        <KeyBinding Command="{Binding PlayNextCommand}" Key="MediaNextTrack" />
        <KeyBinding Command="{Binding PlayNextCommand}" Modifiers="Ctrl" Key="N" />
        <KeyBinding Command="{Binding PlayNextCommand}" Modifiers="Ctrl" Key="Right" />
        <KeyBinding Command="{Binding PlayPrevCommand}" Key="MediaPreviousTrack" />
        <KeyBinding Command="{Binding PlayPrevCommand}" Modifiers="Ctrl" Key="B" />
        <KeyBinding Command="{Binding PlayPrevCommand}" Modifiers="Ctrl" Key="Left" />
        <KeyBinding Command="{Binding VolumeMuteCommand}" Key="VolumeMute" />
        <KeyBinding Command="{Binding VolumeDownCommand}" Key="VolumeDown" />
        <KeyBinding Command="{Binding VolumeDownCommand}" Modifiers="Ctrl" Key="OemMinus" />
        <KeyBinding Command="{Binding VolumeDownCommand}" Modifiers="Ctrl" Key="Subtract" />
        <KeyBinding Command="{Binding VolumeUpCommand}" Key="VolumeUp" />
        <KeyBinding Command="{Binding VolumeUpCommand}" Modifiers="Ctrl" Key="OemPlus" />
        <KeyBinding Command="{Binding VolumeUpCommand}" Modifiers="Ctrl" Key="Add" />
        <KeyBinding Command="{Binding EscapeCommand}" Key="Esc" />
        <KeyBinding Command="{Binding ShowSettingsCommand}" Modifiers="Ctrl" Key="S"/>
        <KeyBinding Command="{Binding ShowFindCommand}" Modifiers="Ctrl" Key="F"/>
    </Window.InputBindings>
    <Window.TaskbarItemInfo>
        <TaskbarItemInfo>
            <TaskbarItemInfo.ThumbButtonInfos>
                <ThumbButtonInfo ImageSource="/Icons/angle-double-small-left.ico" Description="Prev" Command="{Binding PlayPrevCommand}" />
                <ThumbButtonInfo ImageSource="/Icons/play-pause.ico" Description="Play/Pause" Command="{Binding PlayCommand}" />
                <ThumbButtonInfo ImageSource="/Icons/angle-double-small-right.ico" Description="Next" Command="{Binding PlayNextCommand}" />
            </TaskbarItemInfo.ThumbButtonInfos>
        </TaskbarItemInfo>
    </Window.TaskbarItemInfo>
    
    <Border Style="{StaticResource WindowMainPanelStyle}" Background="{DynamicResource BoardBackgroundColorBrush}" UseLayoutRounding="True">
        <Grid x:Name="LayoutGrid">
            <Grid.RowDefinitions>
                <RowDefinition Height="32"/>
                <RowDefinition Height="102"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="0"/>
                <RowDefinition Height="0"/>
                <RowDefinition Height="28"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="8"/>
                <ColumnDefinition Width="4*"/>
            </Grid.ColumnDefinitions>

            <!-- App title bar-->
            <Border x:Name="AppTitleBar" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3" Background="{DynamicResource BoardBackgroundColorBrush}" CornerRadius="8,8,0,0">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="32"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="auto"/>
                    </Grid.ColumnDefinitions>

                    <!-- App icon -->
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                        <Button ToolTip="{Binding AppTitleVer}" IsHitTestVisible="True" WindowChrome.IsHitTestVisibleInChrome="True">
                            <Button.Style>
                                <Style TargetType="{x:Type Button}">
                                    <Setter Property="OverridesDefaultStyle" Value="true" />
                                    <Setter Property="Background" Value="Transparent" />
                                    <Setter Property="Foreground" Value="{DynamicResource ControlForegroundColorBrush}"/>
                                    <!--
                                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                                -->
                                    <Setter Property="Focusable" Value="False" />
                                    <Setter Property="BorderThickness" Value="0" />
                                    <Setter Property="Margin" Value="3,0,0,0" />
                                    <Setter Property="Padding" Value="0" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="Button">
                                                <Border x:Name="Border" CornerRadius="8" BorderThickness="0" Background="{TemplateBinding Background}">
                                                    <Viewbox Width="16" Height="16" Margin="6 0 6 0">
                                                        <Canvas Width="101.52757" Height="101.52314">
                                                            <Canvas.RenderTransform>
                                                                <TranslateTransform X="0" Y="0"/>
                                                            </Canvas.RenderTransform>
                                                            <Canvas Name="layer1">
                                                                <Canvas.RenderTransform>
                                                                    <TranslateTransform X="-2.8648005" Y="-194.52514"/>
                                                                </Canvas.RenderTransform>
                                                                <Path Fill="{DynamicResource ControlForegroundColorBrush}" Data="M 53.823864 196.04415 C 21.886528 194.83142 -3.7832653 229.72314 6.7745021 259.84651 15.060196 290.6957 55.964235 304.96229 81.631867 285.93948 108.66537 268.90685 110.19826 225.61676 84.437146 206.71473 75.820617 199.84108 64.844621 196.0167 53.823864 196.04415 Z m 0 9.84942 c 18.184368 -0.34132 35.234253 13.61727 38.596795 31.47035 3.761965 16.86267 -5.208339 35.37926 -20.678288 43.01021 -15.289342 8.1535 -35.646071 4.41591 -47.068046 -8.60652 -12.118898 -12.84888 -13.65815 -34.02695 -3.509928 -48.48554 7.159606 -10.73064 19.738995 -17.49358 32.659467 -17.3885 z m -9.850044 17.2371 c 0 14.77475 0 29.5495 0 44.32425 9.849834 -7.38748 19.699667 -14.77496 29.549501 -22.16244 -9.849834 -7.38727 -19.699667 -14.77454 -29.549501 -22.16181 z"/>
                                                            </Canvas>
                                                        </Canvas>
                                                    </Viewbox>
                                                </Border>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Button.Style>
                        </Button>
                    </StackPanel>

                    <!-- Now Playing -->
                    <StackPanel Grid.Column="0" Grid.ColumnSpan="3" Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="12 0 0 0" Visibility="{Binding IsConnected, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
                        <TextBlock Style="{StaticResource DefaultTextBlockStyle}">
                            <TextBlock.Triggers>
                                <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1.0" Duration="0:0:2">
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </TextBlock.Triggers>
                        <Run x:Name="CurrentSongTitle" Foreground="{DynamicResource ControlForegroundColorBrush}" FontWeight="DemiBold" Text="{Binding CurrentSongTitle, NotifyOnTargetUpdated=True, Mode=OneWay}" Style="{DynamicResource DefaultRunStyle}"/>
                        </TextBlock>
                        <TextBlock Foreground="{DynamicResource ControlDarkColorBrush}">
                            <TextBlock.Triggers>
                                <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0.1" To="1.0" Duration="0:0:2">
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </TextBlock.Triggers>
                            <TextBlock.Style>
                                <Style TargetType="TextBlock" BasedOn="{StaticResource DefaultTextBlockStyle}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=CurrentSongArtist, Path=Text}" Value="">
                                            <Setter Property="Control.Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        <Run Text="  by "/>
                        <Run x:Name="CurrentSongArtist" Foreground="{DynamicResource ControlLightColorBrush}" Text="{Binding CurrentSongArtist, NotifyOnTargetUpdated=True, Mode=OneWay}" Style="{DynamicResource DefaultRunStyle}" />
                        </TextBlock>
                        <TextBlock  Foreground="{DynamicResource ControlDarkColorBrush}">
                            <TextBlock.Triggers>
                                <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0.1" To="1.0" Duration="0:0:2">
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </TextBlock.Triggers>
                            <TextBlock.Style>
                                <Style TargetType="TextBlock" BasedOn="{StaticResource DefaultTextBlockStyle}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=CurrentSongAlbum, Path=Text}" Value="">
                                            <Setter Property="Control.Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        <Run Text="  from "/>
                        <Run x:Name="CurrentSongAlbum" Foreground="{DynamicResource ControlMediumColorBrush}" Text="{Binding CurrentSongAlbum, NotifyOnTargetUpdated=True, Mode=OneWay}" Style="{DynamicResource DefaultRunStyle}" />
                        </TextBlock>
                    </StackPanel>

                    <!-- System icons -->
                    <StackPanel Orientation="Horizontal" Grid.Column="2" HorizontalAlignment="Right" Margin="0">

                        <Button x:Name="SettingsButton" Style="{DynamicResource PathSysButton}" Command="{Binding ShowSettingsCommand}" ToolTip="{x:Static properties:Resources.Settings_ToolTip}" WindowChrome.IsHitTestVisibleInChrome="True"
                                Content="M12,15.5A3.5,3.5 0 0,1 8.5,12A3.5,3.5 0 0,1 12,
8.5A3.5,3.5 0 0,1 15.5,12A3.5,3.5 0 0,1 12,15.5M19.43,12.97C19.47,12.65 19.5,12.33 19.5,12C19.5,
11.67 19.47,11.34 19.43,11L21.54,9.37C21.73,9.22 21.78,8.95 21.66,8.73L19.66,5.27C19.54,5.05 19.27,
4.96 19.05,5.05L16.56,6.05C16.04,5.66 15.5,5.32 14.87,5.07L14.5,2.42C14.46,2.18 14.25,2 14,2H10C9.75,
2 9.54,2.18 9.5,2.42L9.13,5.07C8.5,5.32 7.96,5.66 7.44,6.05L4.95,5.05C4.73,4.96 4.46,5.05 4.34,
5.27L2.34,8.73C2.21,8.95 2.27,9.22 2.46,9.37L4.57,11C4.53,11.34 4.5,11.67 4.5,12C4.5,12.33 4.53,
12.65 4.57,12.97L2.46,14.63C2.27,14.78 2.21,15.05 2.34,15.27L4.34,18.73C4.46,18.95 4.73,19.03 4.95,
18.95L7.44,17.94C7.96,18.34 8.5,18.68 9.13,18.93L9.5,21.58C9.54,21.82 9.75,22 10,22H14C14.25,22 14.46,
21.82 14.5,21.58L14.87,18.93C15.5,18.67 16.04,18.34 16.56,17.94L19.05,18.95C19.27,19.03 19.54,
18.95 19.66,18.73L21.66,15.27C21.78,15.05 21.73,14.78 21.54,14.63L19.43,12.97Z">
                        </Button>

                        <Button x:Name="MinimizeButton" Style="{StaticResource PathSysButton}" Click="MinimizeButton_Click" WindowChrome.IsHitTestVisibleInChrome="True">
                            M20,14H4V10H20
                        </Button>

                        <Button x:Name="RestoreButton" Style="{StaticResource PathSysButton}" Click="RestoreButton_Click" WindowChrome.IsHitTestVisibleInChrome="True">
                            M4,8H8V4H20V16H16V20H4V8M16,8V14H18V6H10V8H16M6,12V18H14V12H6Z
                        </Button>

                        <Button x:Name="MaxButton" Style="{StaticResource PathSysButton}" Click="MaxButton_Click" WindowChrome.IsHitTestVisibleInChrome="True">
                            M4,4H20V20H4V4M6,8V18H18V8H6Z
                        </Button>

                        <Button x:Name="CloseButton" Style="{StaticResource PathSysButtonClose}" Click="CloseButton_Click" WindowChrome.IsHitTestVisibleInChrome="True">
                            M13.46,12L19,17.54V19H17.54L12,13.46L6.46,19H5V17.54L10.54,12L5,6.46V5H6.46L12,10.54L17.54,5H19V6.46L13.46,12Z
                        </Button>

                    </StackPanel>

                </Grid>
            </Border>

            <!-- Header -->
            <Border x:Name="AppHeader" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3" Background="{DynamicResource BoardBackgroundColorBrush}" Margin="0 0 0 0" BorderBrush="#121212" BorderThickness="0,0,0,0">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="4"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="12"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <!-- Album cover -->
                    <Grid Grid.Row="1" Grid.Column="0">
                        <Grid Width="86" Height="86" Margin="36 0 6 0" HorizontalAlignment="Left" VerticalAlignment="Top">
                            <!--  Add rounded corners here  -->
                            <Border Name="PicPrevMask" Margin="-5" Background="{DynamicResource BoardBackgroundColorBrush}" CornerRadius="4" BorderThickness="2" />
                            <Grid>
                                <Grid.OpacityMask>
                                    <VisualBrush Visual="{Binding ElementName=PicPrevMask}" />
                                </Grid.OpacityMask>
                                <Image Source="{Binding AlbumArt, NotifyOnTargetUpdated=True}" VerticalAlignment="Top" HorizontalAlignment="Left" Width="86" Height="86" Visibility="{Binding IsAlbumArtVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
                                    <Image.Triggers>
                                        <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1.0" Duration="0:0:1">
                                                    </DoubleAnimation>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </EventTrigger>
                                    </Image.Triggers>
                                </Image>
                            </Grid>

                        </Grid>
                    </Grid>

                    <!-- Playback Controls -->
                    <Grid Grid.Row="1" Grid.Column="1">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <!-- Playback Buttons -->
                        <Grid Grid.Row="0" Grid.Column="1" Width="280">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <!-- "Play" should be top so that it gets the first keyboard focus -->
                            <Button x:Name="PlayButton" ToolTip="{x:Static properties:Resources.Playback_PlayPauseButton}" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Height="62" Width="62" Background="Transparent" Foreground="White" Style="{StaticResource PathButton}" Command="{Binding PlayCommand}" Content="{Binding PlayButton}" Focusable="False"></Button>

                            <Button x:Name="BackButton" ToolTip="{x:Static properties:Resources.Playback_BackButton}" Grid.Column="0" HorizontalAlignment="Center" Height="42" Width="42" Background="Transparent" Foreground="White" Content="M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M8,8H10V16H8M16,8V16L11,12" Style="{StaticResource PathButton}" Command="{Binding PlayPrevCommand}" Focusable="False"></Button>

                            <Button x:Name="NextButton" ToolTip="{x:Static properties:Resources.Playback_NextButton}" Grid.Column="2" HorizontalAlignment="Center" Height="42" Width="42" Background="Transparent" Foreground="White" Content="M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M8,8L13,12L8,16M14,8H16V16H14" Style="{StaticResource PathButton}" Command="{Binding PlayNextCommand}" Focusable="False"></Button>

                        </Grid>

                        <!-- Slider Seek -->
                        <Grid Grid.Row="1" Grid.ColumnSpan="3" Width="450">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="24"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="24"/>
                            </Grid.ColumnDefinitions>

                            <Slider x:Name="SliderSeek" ToolTip="{x:Static properties:Resources.Playback_SliderSeek}" Style="{DynamicResource SliderHorizontalStyle}" Grid.Column="1" VerticalAlignment="Center" Margin="6 6 6 0" IsMoveToPointEnabled="True" Minimum="0" Maximum="{Binding Mode=TwoWay,Path=Time}" Value="{Binding Mode=TwoWay,Path=Elapsed}"></Slider>

                        </Grid>

                    </Grid>

                    <!-- Playback Options and Volume -->
                    <Grid Grid.Row="1" Grid.Column="2">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <StackPanel Grid.Column="0" Orientation="Horizontal" VerticalAlignment="Bottom" Margin="0 0 0 0">
                            <ToggleButton x:Name="RepeatButton" ToolTip="{x:Static properties:Resources.PlaybackOptions_Repeat}" IsChecked="{Binding Mode=TwoWay,Path=Repeat}" Style="{DynamicResource PathToggleButton}"  Width="18" Height="18" Padding="0" Margin="4" VerticalAlignment="Center" HorizontalAlignment="Center"
                                  Content="M17,17H7V14L3,18L7,22V19H19V13H17M7,7H17V10L21,6L17,2V5H5V11H7V7Z">
                            </ToggleButton>
                            <ToggleButton x:Name="SingleButton" ToolTip="{x:Static properties:Resources.PlaybackOptions_Single}" IsChecked="{Binding Mode=TwoWay,Path=Single}" Style="{DynamicResource PathToggleButton}" Width="18" Height="18" Padding="0" Margin="4" VerticalAlignment="Center" HorizontalAlignment="Center"
                                  Content="M13,15V9H12L10,10V11H11.5V15M17,17H7V14L3,18L7,22V19H19V13H17M7,7H17V10L21,6L17,2V5H5V11H7V7Z">
                            </ToggleButton>
                            <ToggleButton x:Name="ShuffleButton" ToolTip="{x:Static properties:Resources.PlaybackOptions_Shuffle}" IsChecked="{Binding Mode=TwoWay,Path=Random}" Style="{DynamicResource PathToggleButton}" Width="18" Height="18" Padding="0" Margin="4" VerticalAlignment="Center" HorizontalAlignment="Center"
                                  Content="M17,3L22.25,7.5L17,12L22.25,16.5L17,21V18H14.26L11.44,15.18L13.56,13.06L15.5,15H17V12L17,9H15.5L6.5,18H2V15H5.26L14.26,6H17V3M2,6H6.5L9.32,8.82L7.2,10.94L5.26,9H2V6Z">
                            </ToggleButton>
                            <ToggleButton x:Name="ConsumeButton" ToolTip="{x:Static properties:Resources.PlaybackOptions_Consume}" IsChecked="{Binding Mode=TwoWay,Path=Consume}" Style="{DynamicResource PathToggleButton}" Width="18" Height="18" Padding="0" Margin="4" VerticalAlignment="Center" HorizontalAlignment="Center"
                                  Content="M2,16H10V14H2M12,14V16H22V14M14,6H2V8H14M14,10H2V12H14V10Z">
                            </ToggleButton>
                        </StackPanel>

                        <Grid Grid.Column="1" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="0 0 7 0" Visibility="{Binding IsQueueVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
                            <Button Style="{DynamicResource PathButton}" Width="30" Height="30" Margin="0" Command="{Binding ShowFindCommand}" ToolTip="{x:Static properties:Resources.Search_ToolTip}"
                                Content="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z">
                            </Button>
                        </Grid>

                        <Grid Grid.Column="2" HorizontalAlignment="Right" VerticalAlignment="Stretch" Margin="0 3 16 0" Width="30" Height="Auto">
                            <Slider x:Name="SliderVol" ToolTip="{x:Static properties:Resources.Playback_SliderVolume}" Style="{DynamicResource CustomSliderStyle}" Orientation="Vertical" HorizontalAlignment="Right" VerticalAlignment="Stretch" IsMoveToPointEnabled="True" Maximum="100" Value="{Binding Volume}">
                            </Slider>
                        </Grid>
                    </Grid>

                </Grid>

            </Border>

            <!-- Left pane -->
            <!-- {DynamicResource WindowBackgroundBaseColorBrush} -->
            <Grid Grid.Row="2" Grid.Column="0" Background="{DynamicResource WindowBackgroundBaseColorBrush}" helpers:SizeChange.IsEnabled="True" helpers:SizeChange.ActualWidth="{Binding MainLeftPainActualWidth, Mode=OneWayToSource}">
                <TreeView Margin="0 0 0 0" Style="{DynamicResource TreeViewMenuStyle}" ItemsSource="{Binding MainMenuItems}" helpers:TreeViewHelper.SelectedItem="{Binding SelectedNodeMenu, Mode=TwoWay}" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto">
                    <TreeView.Resources>
                        <Style TargetType="{x:Type TreeViewItem}">
                            <Setter Property="HorizontalContentAlignment" Value="Left" />
                            <Setter Property="VerticalContentAlignment" Value="Center" />
                        </Style>
                        <ContextMenu x:Key="TreeviewMenuItemContextMenu">

                            <MenuItem Header="{x:Static properties:Resources.TreeviewMenuItemContextMenu_Load}" Command="{Binding Path=DataContext.TreeviewMenuItemLoadPlaylistCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeView}}" Visibility="{Binding DataContext.IsPlaylistItemVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeView}}">
                                <MenuItem.Resources>
                                    <ControlTemplate x:Key="PlusIcon">
                                        <Canvas Background="Transparent" >
                                            <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z" />
                                        </Canvas>
                                    </ControlTemplate>
                                </MenuItem.Resources>
                                <MenuItem.Icon>
                                    <ContentControl Template="{StaticResource PlusIcon}" />
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="{x:Static properties:Resources.PlaylistItemContextMenu_ClearAndLoad}" Command="{Binding Path=DataContext.TreeviewMenuItemClearLoadPlaylistCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeView}}" Visibility="{Binding DataContext.IsPlaylistItemVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeView}}">
                                <MenuItem.Resources>
                                    <ControlTemplate x:Key="PlusThickIcon">
                                        <Canvas Background="Transparent" >
                                            <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M20 14H14V20H10V14H4V10H10V4H14V10H20V14Z" />
                                        </Canvas>
                                    </ControlTemplate>
                                </MenuItem.Resources>
                                <MenuItem.Icon>
                                    <ContentControl Template="{StaticResource PlusThickIcon}" />
                                </MenuItem.Icon>
                            </MenuItem>
                            <!--
                            <Separator/>
                                    <MenuItem Header="{x:Static properties:Resources.PlaylistItemContextMenu_Rename}" Command="{Binding Path=DataContext.TreeviewMenuItemRenamePlaylistCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeView}}">
                                        <MenuItem.Resources>
                                            <ControlTemplate x:Key="PlaylistEditIcon">
                                                <Canvas Background="Transparent" >
                                                    <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M2,6V8H14V6H2M2,10V12H14V10H2M20.04,10.13C19.9,10.13 19.76,10.19 19.65,10.3L18.65,11.3L20.7,13.35L21.7,12.35C21.92,12.14 21.92,11.79 21.7,11.58L20.42,10.3C20.31,10.19 20.18,10.13 20.04,10.13M18.07,11.88L12,17.94V20H14.06L20.12,13.93L18.07,11.88M2,14V16H10V14H2Z" />
                                                </Canvas>
                                            </ControlTemplate>
                                        </MenuItem.Resources>
                                        <MenuItem.Icon>
                                            <ContentControl Template="{StaticResource PlaylistEditIcon}" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    
                            <MenuItem Header="{x:Static properties:Resources.PlaylistItemContextMenu_Remove}" Command="{Binding Path=DataContext.TreeviewMenuItemRemovePlaylistCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeView}}" Visibility="{Binding DataContext.IsPlaylistItemVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeView}}">
                                <MenuItem.Resources>
                                    <ControlTemplate x:Key="PlaylistRemoveIcon">
                                        <Canvas Background="Transparent" >
                                            <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M2,6V8H14V6H2M2,10V12H11V10H2M14.17,10.76L12.76,12.17L15.59,15L12.76,17.83L14.17,19.24L17,16.41L19.83,19.24L21.24,17.83L18.41,15L21.24,12.17L19.83,10.76L17,13.59L14.17,10.76M2,14V16H11V14H2Z" />
                                        </Canvas>
                                    </ControlTemplate>
                                </MenuItem.Resources>
                                <MenuItem.Icon>
                                    <ContentControl Template="{StaticResource PlaylistRemoveIcon}" />
                                </MenuItem.Icon>
                            </MenuItem>
                            -->
                        </ContextMenu>

                        <Style TargetType="{x:Type ScrollBar}">
                            <Setter Property="SnapsToDevicePixels" Value="True" />
                            <Setter Property="OverridesDefaultStyle" Value="true" />
                            <Setter Property="Margin" Value="0,0,0,0" />
                            <Setter Property="IsTabStop" Value="False" />
                            <Setter Property="BorderThickness" Value="0" />
                            <Setter Property="Background" Value="Transparent" />
                            <Style.Triggers>
                                <Trigger Property="Orientation" Value="Vertical">
                                    <Setter Property="Width" Value="14"/>
                                    <Setter Property="Height" Value="Auto" />
                                    <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                                </Trigger>
                                <Trigger Property="Orientation" Value="Horizontal">
                                    <Setter Property="Width" Value="Auto"/>
                                    <Setter Property="Height" Value="14" />
                                    <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </TreeView.Resources>
                    <TreeView.ItemTemplate>
                        <HierarchicalDataTemplate DataType="local:NodeDirectory" ItemsSource="{Binding Path=Children}">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Center">
                                <Viewbox Width="12" Height="12" Margin="0 0 4 2">
                                    <Canvas Width="18" Height="18">
                                        <Path Data="{Binding PathIcon}" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" />
                                    </Canvas>
                                </Viewbox>
                                <TextBlock Text="{Binding Path=Name}" Padding="4"/>
                            </StackPanel>
                        </HierarchicalDataTemplate>
                    </TreeView.ItemTemplate>
                    <TreeView.ItemContainerStyle>
                        <Style TargetType="TreeViewItem" BasedOn="{StaticResource TreeViewMenuItemStyle}">
                            <Setter Property="OverridesDefaultStyle" Value="False" />
                            <Setter Property="IsExpanded" Value="{Binding Expanded, Mode=TwoWay}"/>
                            <Setter Property="IsSelected" Value="{Binding Selected, Mode=OneWay}"/>
                            <Setter Property="ContextMenu" Value="{StaticResource TreeviewMenuItemContextMenu}"/>
                            <Setter Property="HorizontalContentAlignment" Value="Left" />
                            <Setter Property="VerticalContentAlignment" Value="Center" />
                        </Style>
                    </TreeView.ItemContainerStyle>
                </TreeView>
            </Grid>

            <!-- GridSplitter -->
            <GridSplitter Grid.Row="2" Grid.Column="1" ResizeDirection="Columns" Style="{StaticResource GridSplitterStyle}" Background="{DynamicResource BoardBackgroundColorBrush}"></GridSplitter>

            <!-- Right pane -->
            <Grid Grid.Row="2" Grid.Column="2">

                <!-- Queue -->
                <Grid Visibility="{Binding IsQueueVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <ListView x:Name="QueueListview" Grid.Row="0" ItemsSource="{Binding Queue}" SelectionMode="Extended" SelectedItem="{Binding Path=SelectedQueueSong, Mode=TwoWay}" Background="{DynamicResource WindowBackgroundBaseColorBrush}" IsSynchronizedWithCurrentItem="True" VirtualizingPanel.VirtualizationMode="Standard" VirtualizingPanel.IsVirtualizingWhenGrouping="True" VirtualizingPanel.IsVirtualizing="True" VirtualizingStackPanel.ScrollUnit="Pixel" SelectionChanged="QueueListview_SelectionChanged">
                        <ListView.InputBindings>
                            <KeyBinding Key="Return" Command="{Binding Path=DataContext.QueueListviewEnterKeyCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" />
                            <KeyBinding Gesture="Ctrl+U" Command="{Binding Path=DataContext.QueueListviewMoveUpCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" />
                            <KeyBinding Gesture="Ctrl+D" Command="{Binding Path=DataContext.QueueListviewMoveDownCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" />
                            <KeyBinding Gesture="Ctrl+Delete" Command="{Binding Path=DataContext.QueueListviewDeleteCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" />
                            <KeyBinding Gesture="Ctrl+J" Command="{Binding Path=DataContext.ScrollIntoNowPlayingCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}"/>
                            <KeyBinding Gesture="Ctrl+F" Command="{Binding Path=DataContext.QueueFindShowHideCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}"/>
                        </ListView.InputBindings>
                        <!--
                            <ListView.ContextMenu>
                                <ContextMenu >
                                    <MenuItem Header="{x:Static properties:Resources.Search_ToolTip}" Command="{Binding ShowFindCommand}">
                                    </MenuItem>
                                    <Separator/>
                                    <MenuItem Header="{x:Static properties:Resources.QueueItemContextMenu_QueueClear}" Command="{Binding Path=QueueListviewClearCommand}">
                                        <MenuItem.Resources>
                                            <ControlTemplate x:Key="DeleteEmptyOutline">
                                                <Canvas Background="Transparent" >
                                                    <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M20.37,8.91L19.37,10.64L7.24,3.64L8.24,1.91L11.28,3.66L12.64,3.29L16.97,5.79L17.34,7.16L20.37,8.91M6,19V7H11.07L18,11V19A2,2 0 0,1 16,21H8A2,2 0 0,1 6,19M8,19H16V12.2L10.46,9H8V19Z" />
                                                </Canvas>
                                            </ControlTemplate>
                                        </MenuItem.Resources>
                                        <MenuItem.Icon>
                                            <ContentControl Template="{StaticResource DeleteEmptyOutline}" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                </ContextMenu>
                            </ListView.ContextMenu>
                            -->
                        <ListView.Resources>
                            <ContextMenu x:Key="QueueListviewHeaderContextMenu">
                                <MenuItem Header="{x:Static properties:Resources.QueueListviewColumnHeader_Position}" IsChecked="{Binding Path=DataContext.QueueColumnHeaderPositionVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Command="{Binding QueueColumnHeaderPositionShowHideCommand}">
                                </MenuItem>
                                <MenuItem Header="Now Playing" IsChecked="{Binding Path=DataContext.QueueColumnHeaderNowPlayingVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Command="{Binding QueueColumnHeaderNowPlayingShowHideCommand}">
                                </MenuItem>
                                <MenuItem Header="{x:Static properties:Resources.QueueListviewColumnHeader_Title}" IsChecked="True" IsEnabled="False">
                                </MenuItem>
                                <MenuItem Header="{x:Static properties:Resources.QueueListviewColumnHeader_Time}" IsChecked="{Binding Path=DataContext.QueueColumnHeaderTimeVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Command="{Binding QueueColumnHeaderTimeShowHideCommand}">
                                </MenuItem>
                                <MenuItem Header="{x:Static properties:Resources.QueueListviewColumnHeader_Artist}" IsChecked="{Binding Path=DataContext.QueueColumnHeaderArtistVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Command="{Binding QueueColumnHeaderArtistShowHideCommand}">
                                </MenuItem>
                                <MenuItem Header="{x:Static properties:Resources.QueueListviewColumnHeader_Album}" IsChecked="{Binding Path=DataContext.QueueColumnHeaderAlbumVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Command="{Binding QueueColumnHeaderAlbumShowHideCommand}">
                                </MenuItem>
                                <MenuItem Header="{x:Static properties:Resources.QueueListviewColumnHeader_Disc}" IsChecked="{Binding Path=DataContext.QueueColumnHeaderDiscVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Command="{Binding QueueColumnHeaderDiscShowHideCommand}">
                                </MenuItem>
                                <MenuItem Header="{x:Static properties:Resources.QueueListviewColumnHeader_Track}" IsChecked="{Binding Path=DataContext.QueueColumnHeaderTrackVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Command="{Binding QueueColumnHeaderTrackShowHideCommand}">
                                </MenuItem>
                                <MenuItem Header="{x:Static properties:Resources.QueueListviewColumnHeader_Genre}" IsChecked="{Binding Path=DataContext.QueueColumnHeaderGenreVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Command="{Binding QueueColumnHeaderGenreShowHideCommand}">
                                </MenuItem>
                                <MenuItem Header="{x:Static properties:Resources.QueueListviewColumnHeader_LastModified}" IsChecked="{Binding Path=DataContext.QueueColumnHeaderLastModifiedVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Command="{Binding QueueColumnHeaderLastModifiedShowHideCommand}">
                                </MenuItem>
                            </ContextMenu>
                            <ContextMenu x:Key="QueueItemContextMenu">
                                <MenuItem Header="{x:Static properties:Resources.QueueItemContextMenu_ScrollIntoNowPlaying}" Command="{Binding Path=DataContext.ScrollIntoNowPlayingCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                    <MenuItem.Resources>
                                        <ControlTemplate x:Key="NowPlayingIcon">
                                            <Canvas Background="Transparent" >
                                                <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M8.5,8.64L13.77,12L8.5,15.36V8.64M6.5,5V19L17.5,12" />
                                            </Canvas>
                                        </ControlTemplate>
                                    </MenuItem.Resources>
                                    <MenuItem.Icon>
                                        <ContentControl Template="{StaticResource NowPlayingIcon}" />
                                    </MenuItem.Icon>
                                </MenuItem>

                                <Separator/>
                                <MenuItem Header="{x:Static properties:Resources.QueueItemContextMenu_SelectedItems}">
                                    <MenuItem.Resources>
                                        <ControlTemplate x:Key="CheckUnderlineIcon">
                                            <Canvas Background="Transparent" >
                                                <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M21,5L9,17L3.5,11.5L4.91,10.09L9,14.17L19.59,3.59L21,5M3,21V19H21V21H3Z" />
                                            </Canvas>
                                        </ControlTemplate>
                                    </MenuItem.Resources>
                                    <MenuItem.Icon>
                                        <ContentControl Template="{StaticResource CheckUnderlineIcon}" />
                                    </MenuItem.Icon>

                                    <MenuItem Header="{x:Static properties:Resources.QueueItemContextMenu_SaveSelectedAs}" Command="{Binding Path=DataContext.QueueListviewSaveSelectedAsCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                        <MenuItem.Resources>
                                            <ControlTemplate x:Key="PlaylistPlusIcon">
                                                <Canvas Background="Transparent" >
                                                    <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M2,16H10V14H2M18,14V10H16V14H12V16H16V20H18V16H22V14M14,6H2V8H14M14,10H2V12H14V10Z" />
                                                </Canvas>
                                            </ControlTemplate>
                                        </MenuItem.Resources>
                                        <MenuItem.Icon>
                                            <ContentControl Template="{StaticResource PlaylistPlusIcon}" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <Separator />

                                    <MenuItem Header="{x:Static properties:Resources.QueueItemContextMenu_SaveSelectedTo}" Command="{Binding Path=DataContext.QueueListviewSaveSelectedToCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                        <MenuItem.Resources>
                                            <ControlTemplate x:Key="PlaylistCheckIcon">
                                                <Canvas Background="Transparent" >
                                                    <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M14,10H2V12H14V10M14,6H2V8H14V6M2,16H10V14H2V16M21.5,11.5L23,13L16,20L11.5,15.5L13,14L16,17L21.5,11.5Z" />
                                                </Canvas>
                                            </ControlTemplate>
                                        </MenuItem.Resources>
                                        <MenuItem.Icon>
                                            <ContentControl Template="{StaticResource PlaylistCheckIcon}" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <Separator />

                                    <MenuItem Header="{x:Static properties:Resources.QueueItemContextMenu_Move}">
                                        <MenuItem.Resources>
                                            <ControlTemplate x:Key="SwapVerticalIcon">
                                                <Canvas Background="Transparent" >
                                                    <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M9,3L5,7H8V14H10V7H13M16,17V10H14V17H11L15,21L19,17H16Z" />
                                                </Canvas>
                                            </ControlTemplate>
                                        </MenuItem.Resources>
                                        <MenuItem.Icon>
                                            <ContentControl Template="{StaticResource SwapVerticalIcon}" />
                                        </MenuItem.Icon>
                                        <MenuItem Header="{x:Static properties:Resources.QueueItemContextMenu_MoveUp}" Command="{Binding Path=DataContext.QueueListviewMoveUpCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                            <MenuItem.Resources>
                                                <ControlTemplate x:Key="ArrowUpIcon">
                                                    <Canvas Background="Transparent" >
                                                        <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M13,20H11V8L5.5,13.5L4.08,12.08L12,4.16L19.92,12.08L18.5,13.5L13,8V20Z" />
                                                    </Canvas>
                                                </ControlTemplate>
                                            </MenuItem.Resources>
                                            <MenuItem.Icon>
                                                <ContentControl Template="{StaticResource ArrowUpIcon}" />
                                            </MenuItem.Icon>
                                        </MenuItem>
                                        <MenuItem Header="{x:Static properties:Resources.QueueItemContextMenu_MoveDown}" Command="{Binding Path=DataContext.QueueListviewMoveDownCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                            <MenuItem.Resources>
                                                <ControlTemplate x:Key="ArrowDownIcon">
                                                    <Canvas Background="Transparent" >
                                                        <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M11,4H13V16L18.5,10.5L19.92,11.92L12,19.84L4.08,11.92L5.5,10.5L11,16V4Z" />
                                                    </Canvas>
                                                </ControlTemplate>
                                            </MenuItem.Resources>
                                            <MenuItem.Icon>
                                                <ContentControl Template="{StaticResource ArrowDownIcon}" />
                                            </MenuItem.Icon>
                                        </MenuItem>
                                    </MenuItem>
                                    <Separator />

                                    <MenuItem Header="{x:Static properties:Resources.QueueItemContextMenu_Remove}" Command="{Binding Path=DataContext.QueueListviewDeleteCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                        <MenuItem.Resources>
                                            <ControlTemplate x:Key="PlaylistMinusIcon">
                                                <Canvas Background="Transparent" >
                                                    <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M2,16H10V14H2M12,14V16H22V14M14,6H2V8H14M14,10H2V12H14V10Z" />
                                                </Canvas>
                                            </ControlTemplate>
                                        </MenuItem.Resources>
                                        <MenuItem.Icon>
                                            <ContentControl Template="{StaticResource PlaylistMinusIcon}" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                </MenuItem>

                                <Separator />
                                <MenuItem Header="{x:Static properties:Resources.QueueItemContextMenu_Queue}">
                                    <MenuItem.Resources>
                                        <ControlTemplate x:Key="PlaylistPlay">
                                            <Canvas Background="Transparent" >
                                                <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M19,9H2V11H19V9M19,5H2V7H19V5M2,15H15V13H2V15M17,13V19L22,16L17,13Z" />
                                            </Canvas>
                                        </ControlTemplate>
                                    </MenuItem.Resources>
                                    <MenuItem.Icon>
                                        <ContentControl Template="{StaticResource PlaylistPlay}" />
                                    </MenuItem.Icon>

                                    <MenuItem Header="{x:Static properties:Resources.QueueItemContextMenu_QueueSaveAsPlaylist}" Command="{Binding Path=DataContext.QueueListviewSaveAsCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                        <MenuItem.Resources>
                                            <ControlTemplate x:Key="PlaylistPlusIcon">
                                                <Canvas Background="Transparent" >
                                                    <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M2,16H10V14H2M18,14V10H16V14H12V16H16V20H18V16H22V14M14,6H2V8H14M14,10H2V12H14V10Z" />
                                                </Canvas>
                                            </ControlTemplate>
                                        </MenuItem.Resources>
                                        <MenuItem.Icon>
                                            <ContentControl Template="{StaticResource PlaylistPlusIcon}" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <Separator/>
                                    <MenuItem Header="{x:Static properties:Resources.QueueItemContextMenu_QueueClear}" Command="{Binding Path=DataContext.QueueListviewClearCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                        <MenuItem.Resources>
                                            <ControlTemplate x:Key="DeleteEmptyOutline">
                                                <Canvas Background="Transparent" >
                                                    <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M20.37,8.91L19.37,10.64L7.24,3.64L8.24,1.91L11.28,3.66L12.64,3.29L16.97,5.79L17.34,7.16L20.37,8.91M6,19V7H11.07L18,11V19A2,2 0 0,1 16,21H8A2,2 0 0,1 6,19M8,19H16V12.2L10.46,9H8V19Z" />
                                                </Canvas>
                                            </ControlTemplate>
                                        </MenuItem.Resources>
                                        <MenuItem.Icon>
                                            <ContentControl Template="{StaticResource DeleteEmptyOutline}" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                </MenuItem>

                            </ContextMenu>
                            <Style TargetType="{x:Type ScrollBar}">
                                <Setter Property="SnapsToDevicePixels" Value="True" />
                                <Setter Property="OverridesDefaultStyle" Value="true" />
                                <Setter Property="Margin" Value="0,0,0,0" />
                                <Setter Property="IsTabStop" Value="False" />
                                <Setter Property="BorderThickness" Value="0" />
                                <Setter Property="Background" Value="Transparent" />
                                <Style.Triggers>
                                    <Trigger Property="Orientation" Value="Vertical">
                                        <Setter Property="Width" Value="14"/>
                                        <Setter Property="Height" Value="Auto" />
                                        <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                                    </Trigger>
                                    <Trigger Property="Orientation" Value="Horizontal">
                                        <Setter Property="Width" Value="Auto"/>
                                        <Setter Property="Height" Value="14" />
                                        <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                            <Style x:Key="ListViewScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition/>
                                                    <RowDefinition Height="Auto"/>
                                                </Grid.RowDefinitions>

                                                <!--
                                                    <ScrollContentPresenter Grid.Column="0"/>
                                                    -->
                                                <DockPanel Margin="{TemplateBinding Padding}">
                                                    <ScrollViewer DockPanel.Dock="Top" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Focusable="False">
                                                        <GridViewHeaderRowPresenter Margin="2,0,2,0"
                                                        Columns="{Binding Path=TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}"
                                                        ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                                        ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                                        ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                                        AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}"
                                                        ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                                        ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}"
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                    </ScrollViewer>

                                                    <ScrollContentPresenter Name="PART_ScrollContentPresenter" KeyboardNavigation.DirectionalNavigation="Local"
                                                                                CanContentScroll="True"
                                                                                CanHorizontallyScroll="False"
                                                                                CanVerticallyScroll="False"/>
                                                </DockPanel>


                                                <ScrollBar Name="PART_VerticalScrollBar" Grid.Row="0" Grid.Column="1" Value="{TemplateBinding VerticalOffset}" Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                                                <ScrollBar Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Row="1" Grid.Column="0" Value="{TemplateBinding HorizontalOffset}" Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                                                <Rectangle Grid.Row="1" Grid.Column="1" Fill="Transparent"/>
                                            </Grid>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ListView.Resources>
                        <ListView.Style>
                            <Style TargetType="ListView">
                                <Setter Property="SnapsToDevicePixels" Value="true" />
                                <Setter Property="OverridesDefaultStyle" Value="True" />
                                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
                                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
                                <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
                                <Setter Property="AlternationCount" Value="2"/>
                                <Setter Property="Margin" Value="0"/>
                                <Setter Property="Padding" Value="0"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="ListView">
                                            <Border Name="Border"  Background="{TemplateBinding Background}" BorderBrush="#121212" BorderThickness="0 0 0 0">
                                                <ScrollViewer Style="{DynamicResource ListViewScrollViewerStyle}">
                                                    <ItemsPresenter />
                                                </ScrollViewer>
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ListView.Style>
                        <ListView.ItemContainerStyle>
                            <Style TargetType="ListViewItem" BasedOn="{StaticResource ListViewItemStyle}">
                                <Setter Property="ContextMenu" Value="{StaticResource QueueItemContextMenu}" />
                                <Setter Property="SnapsToDevicePixels" Value="true" />
                                <Setter Property="Margin" Value="2 0 1 0"/>
                                <Setter Property="Padding" Value="0 1 0 1"/>
                                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                                            <Border Name="Border" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="{TemplateBinding ClipToBounds}" CornerRadius="4" SnapsToDevicePixels="true">
                                                <Border.InputBindings>
                                                    <MouseBinding Command="{Binding Path=DataContext.QueueListviewLeftDoubleClickCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" Gesture="LeftDoubleClick" />
                                                </Border.InputBindings>
                                                <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ListView.ItemContainerStyle>
                        <ListView.View>
                            <GridView>
                                <GridView.ColumnHeaderContainerStyle>
                                    <Style TargetType="GridViewColumnHeader" BasedOn="{StaticResource GridViewColumnHeaderStyle}">
                                        <Setter Property="Visibility" Value="Visible" />
                                        <Setter Property="ContextMenu" Value="{StaticResource QueueListviewHeaderContextMenu}" />
                                    </Style>
                                </GridView.ColumnHeaderContainerStyle>

                                <GridViewColumn Width="{Binding Path=DataContext.QueueColumnHeaderPositionWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Mode=TwoWay}">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.QueueListviewColumnHeader_Position}" Tag="{Binding QueueColumnHeaderPositionWidthRestore, Mode=TwoWay}" MinWidth="32"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock Text="{Binding Path=IndexPlusOne}" Padding="3" />
                                            </StackPanel>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <GridViewColumn Width="{Binding Path=DataContext.QueueColumnHeaderNowPlayingWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Mode=TwoWay}">
                                    <GridViewColumnHeader Tag="{Binding QueueColumnHeaderNowPlayingWidthRestore, Mode=TwoWay}" MinWidth="32">
                                        <Viewbox Width="16" Height="16" Margin="-2 0 0 -2">
                                            <Canvas Width="24" Height="24">
                                                <Path Fill="{DynamicResource ControlForegroundColorBrush}" Data="M8.5,8.64L13.77,12L8.5,15.36V8.64M6.5,5V19L17.5,12"/>
                                            </Canvas>
                                        </Viewbox>
                                    </GridViewColumnHeader>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <Viewbox Width="16" Height="16">
                                                <Canvas Width="24" Height="24">
                                                    <Path x:Name="IsPlayingIcon" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Data="M8,5.14V19.14L19,12.14L8,5.14Z" Visibility="{Binding IsPlaying, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                                </Canvas>
                                            </Viewbox>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="IsPlayingIcon" Property="Fill" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <GridViewColumn Width="{Binding Path=DataContext.QueueColumnHeaderTitleWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Mode=TwoWay}">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.QueueListviewColumnHeader_Title}" Tag="{Binding QueueColumnHeaderTitleWidthRestore, Mode=TwoWay}" MinWidth="120"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock x:Name="SongTitleListItemTextBlock" Text="{Binding Path=Title}" Padding="3" />
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding IsPlaying}" Value="True">
                                                    <Setter TargetName="SongTitleListItemTextBlock" Property="TextBlock.Foreground" Value="{DynamicResource TextStrongColorBrush}" />
                                                    <Setter TargetName="SongTitleListItemTextBlock" Property="TextBlock.FontWeight" Value="ExtraBold" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="SongTitleListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <GridViewColumn Width="{Binding Path=DataContext.QueueColumnHeaderTimeWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Mode=TwoWay}">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.QueueListviewColumnHeader_Time}" Tag="{Binding QueueColumnHeaderTimeWidthRestore, Mode=TwoWay}" MinWidth="62"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock x:Name="TimeListItemTextBlock" Text="{Binding Path=TimeFormated}" Padding="3" />
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding IsPlaying}" Value="True">
                                                    <Setter TargetName="TimeListItemTextBlock" Property="TextBlock.Foreground" Value="{DynamicResource TextStrongColorBrush}" />
                                                    <Setter TargetName="TimeListItemTextBlock" Property="TextBlock.FontWeight" Value="ExtraBold" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="TimeListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <GridViewColumn Width="{Binding Path=DataContext.QueueColumnHeaderArtistWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Mode=TwoWay}">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.QueueListviewColumnHeader_Artist}" Tag="{Binding QueueColumnHeaderArtistWidthRestore, Mode=TwoWay}" MinWidth="62"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock x:Name="ArtistListItemTextBlock" Text="{Binding Path=Artist}" Padding="3" />
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding IsPlaying}" Value="True">
                                                    <Setter TargetName="ArtistListItemTextBlock" Property="TextBlock.Foreground" Value="{DynamicResource TextStrongColorBrush}" />
                                                    <Setter TargetName="ArtistListItemTextBlock" Property="TextBlock.FontWeight" Value="ExtraBold" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="ArtistListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <GridViewColumn Width="{Binding Path=DataContext.QueueColumnHeaderAlbumWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Mode=TwoWay}">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.QueueListviewColumnHeader_Album}" Tag="{Binding QueueColumnHeaderAlbumWidthRestore, Mode=TwoWay}" MinWidth="62"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock x:Name="AlbumListItemTextBlock" Text="{Binding Path=Album}" Padding="3" />
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding IsPlaying}" Value="True">
                                                    <Setter TargetName="AlbumListItemTextBlock" Property="TextBlock.Foreground" Value="{DynamicResource TextStrongColorBrush}" />
                                                    <Setter TargetName="AlbumListItemTextBlock" Property="TextBlock.FontWeight" Value="ExtraBold" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="AlbumListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <!-- Disc -->
                                <GridViewColumn Width="{Binding Path=DataContext.QueueColumnHeaderDiscWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Mode=TwoWay}">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.QueueListviewColumnHeader_Disc}" MinWidth="42"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock x:Name="DiscListItemTextBlock" Text="{Binding Path=Disc}" Padding="3" />
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding IsPlaying}" Value="True">
                                                    <Setter TargetName="DiscListItemTextBlock" Property="TextBlock.Foreground" Value="{DynamicResource TextStrongColorBrush}" />
                                                    <Setter TargetName="DiscListItemTextBlock" Property="TextBlock.FontWeight" Value="ExtraBold" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="DiscListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <!-- Track -->
                                <GridViewColumn Width="{Binding Path=DataContext.QueueColumnHeaderTrackWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Mode=TwoWay}">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.QueueListviewColumnHeader_Track}" MinWidth="42"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock x:Name="TrackListItemTextBlock" Text="{Binding Path=Track}" Padding="3" />
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding IsPlaying}" Value="True">
                                                    <Setter TargetName="TrackListItemTextBlock" Property="TextBlock.Foreground" Value="{DynamicResource TextStrongColorBrush}" />
                                                    <Setter TargetName="TrackListItemTextBlock" Property="TextBlock.FontWeight" Value="ExtraBold" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="TrackListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <GridViewColumn Width="{Binding Path=DataContext.QueueColumnHeaderGenreWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Mode=TwoWay}">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.QueueListviewColumnHeader_Genre}" Tag="{Binding QueueColumnHeaderGenreWidthRestore, Mode=TwoWay}" MinWidth="62"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock x:Name="GenreListItemTextBlock" Text="{Binding Path=Genre}" Padding="3" />
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding IsPlaying}" Value="True">
                                                    <Setter TargetName="GenreListItemTextBlock" Property="TextBlock.Foreground" Value="{DynamicResource TextStrongColorBrush}" />
                                                    <Setter TargetName="GenreListItemTextBlock" Property="TextBlock.FontWeight" Value="ExtraBold" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="GenreListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <GridViewColumn Width="{Binding Path=DataContext.QueueColumnHeaderLastModifiedWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Mode=TwoWay}">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.QueueListviewColumnHeader_LastModified}" Tag="{Binding QueueColumnHeaderLastModifiedWidthRestore, Mode=TwoWay}" MinWidth="62"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock x:Name="LastModifiedListItemTextBlock" Text="{Binding Path=LastModifiedFormated}" Padding="3" />
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding IsPlaying}" Value="True">
                                                    <Setter TargetName="LastModifiedListItemTextBlock" Property="TextBlock.Foreground" Value="{DynamicResource TextStrongColorBrush}" />
                                                    <Setter TargetName="LastModifiedListItemTextBlock" Property="TextBlock.FontWeight" Value="ExtraBold" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="LastModifiedListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>
                            </GridView>
                        </ListView.View>
                        <ListView.ItemsPanel>
                            <ItemsPanelTemplate>
                                <VirtualizingStackPanel Orientation="Vertical"
                                    CanVerticallyScroll="True"/>
                            </ItemsPanelTemplate>
                        </ListView.ItemsPanel>
                    </ListView>

                    <!-- Filter box -->
                    <Border Grid.Row="0" Margin="0 32 23 0" Padding="2" HorizontalAlignment="Right" VerticalAlignment="Top" Width="580" Background="WhiteSmoke" CornerRadius="3" Visibility="{Binding IsQueueFindVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
                        <StackPanel>
                            <TextBox Text="{Binding FilterQueueQuery, UpdateSourceTrigger=PropertyChanged}" KeyboardNavigation.TabNavigation="Local" Margin="0" Padding="3" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" IsVisibleChanged="TextBox_IsVisibleChanged">
                                <TextBox.Style>
                                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBoxStyle}">
                                        <Setter Property="Padding" Value="3" />
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type TextBox}">
                                                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True" CornerRadius="3">
                                                        <Grid>
                                                            <Grid.RowDefinitions>
                                                                <RowDefinition Height="*"/>
                                                            </Grid.RowDefinitions>
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition Width="*"/>
                                                                <ColumnDefinition Width="Auto"/>
                                                            </Grid.ColumnDefinitions>
                                                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>

                                                            <StackPanel Grid.Column="1" Orientation="Horizontal" Margin="0" VerticalAlignment="Bottom">
                                                                <RadioButton GroupName="FilterQueryTags" Margin="2 0 0 0" Content="{x:Static properties:Resources.QueueListviewColumnHeader_Title}" Height="22" Width="80" IsChecked="{Binding Path=SelectedQueueFilterTags, ConverterParameter={x:Static vms:SearchTags.Title}, Converter={StaticResource EnumBooleanConverter}}" Style="{DynamicResource SelectionRadioButtonStyle}"/>
                                                                <RadioButton GroupName="FilterQueryTags" Margin="2 0 0 0" Content="{x:Static properties:Resources.QueueListviewColumnHeader_Artist}" Height="22" Width="80" IsChecked="{Binding Path=SelectedQueueFilterTags, ConverterParameter={x:Static vms:SearchTags.Artist}, Converter={StaticResource EnumBooleanConverter}}" Style="{DynamicResource SelectionRadioButtonStyle}"/>
                                                                <RadioButton GroupName="FilterQueryTags" Margin="2 0 0 0" Content="{x:Static properties:Resources.QueueListviewColumnHeader_Album}" Height="22" Width="80" IsChecked="{Binding Path=SelectedQueueFilterTags, ConverterParameter={x:Static vms:SearchTags.Album}, Converter={StaticResource EnumBooleanConverter}}" Style="{DynamicResource SelectionRadioButtonStyle}"/>
                                                                <RadioButton GroupName="FilterQueryTags" Margin="2 0 0 0" Content="{x:Static properties:Resources.QueueListviewColumnHeader_Genre}" Height="22" Width="80" IsChecked="{Binding Path=SelectedQueueFilterTags, ConverterParameter={x:Static vms:SearchTags.Genre}, Converter={StaticResource EnumBooleanConverter}}" Style="{DynamicResource SelectionRadioButtonStyle}"/>
                                                            </StackPanel>

                                                        </Grid>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsEnabled" Value="false">
                                                            <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                                                        </Trigger>
                                                        <Trigger Property="IsMouseOver" Value="true">
                                                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ControlMouseOverColorBrush}"/>
                                                        </Trigger>
                                                        <Trigger Property="IsKeyboardFocused" Value="true">
                                                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ControlPressedColorBrush}"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Style.Triggers>
                                            <MultiTrigger>
                                                <MultiTrigger.Conditions>
                                                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                                                    <Condition Property="IsSelectionActive" Value="false"/>
                                                </MultiTrigger.Conditions>
                                                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                                            </MultiTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>
                            </TextBox>
                            <ListBox ItemsSource="{Binding QueueForFilter}" SelectedItem="{Binding SelectedQueueFilterSong}" MaxHeight="240" BorderThickness="0">
                                <ListBox.InputBindings>
                                    <KeyBinding Key="Return" Command="{Binding Path=DataContext.QueueFilterSelectCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBox}}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBox}}" />
                                </ListBox.InputBindings>
                                <ListBox.ItemTemplate>
                                    <DataTemplate>
                                        <Grid Background="WhiteSmoke" Width="548">
                                            <Grid.InputBindings>
                                                <MouseBinding Gesture="LeftDoubleClick" Command="{Binding Path=DataContext.QueueFilterSelectCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBox}}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBox}}"/>
                                            </Grid.InputBindings>
                                            <StackPanel>
                                                <StackPanel Orientation="Horizontal">
                                                    <TextBlock x:Name="filterListBoxTitle" Text="{Binding Path=Title, Mode=OneWay}" TextWrapping="Wrap" FontWeight="Bold" Margin="0" Padding="3 0 3 0" />
                                                    <TextBlock x:Name="fitterListBoxAlbum" Text="{Binding Path=Album, Mode=OneWay}" TextWrapping="Wrap" FontStyle="Italic" Margin="0" Padding="3 0 3 0"/>
                                                </StackPanel>
                                                <StackPanel Orientation="Horizontal">
                                                    <TextBlock x:Name="filterListBoxArtist" Text="{Binding Path=Artist, Mode=OneWay}" TextWrapping="Wrap" Margin="0" Padding="3 0 3 0"/>
                                                    <TextBlock x:Name="fitterListBoxGenre" Text="{Binding Path=Genre, Mode=OneWay}" TextWrapping="Wrap" FontStyle="Italic" Margin="0" Padding="3 0 3 0"/>
                                                </StackPanel>
                                                <TextBlock x:Name="fitterListBoxNewsTimeStamp" Text="{Binding Path=LastModifiedFormated, Mode=OneWay}" Margin="0" Padding="3 0 3 0" HorizontalAlignment="Right"/>
                                            </StackPanel>
                                        </Grid>
                                        <DataTemplate.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}}, Path=IsSelected}" Value="True">
                                                <Setter TargetName="filterListBoxTitle" Property="TextElement.FontWeight" Value="Bold"/>
                                            </DataTrigger>
                                        </DataTemplate.Triggers>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>
                        </StackPanel>
                    </Border>

                    <Popup IsOpen="{Binding IsSaveAsPlaylistPopupVisible}" x:Name="QueueListviewPopupSaveAs" Opened="QueueListviewPopupSaveAs_Opened" StaysOpen="False" PlacementTarget="{Binding ElementName=QueueListview}" Placement="Center" AllowsTransparency="True" PopupAnimation="Fade">
                        <Border Background="WhiteSmoke" CornerRadius="4" Padding="6" Width="250" BorderThickness="1" BorderBrush="{DynamicResource PopupBorderColorBrush}">
                            <StackPanel>

                                <Label Content="{x:Static properties:Resources.Popup_SaveQueueAs}" TextElement.FontWeight="Bold" />

                                <Grid Grid.Row="0" Grid.Column="0" Margin="3 12 3 3">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="6"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>

                                    <Label Grid.Row="0" Grid.Column="1" Padding="3" VerticalAlignment="Bottom" Content="{x:Static properties:Resources.Popup_InputNewPlaylistName}"></Label>
                                    <StackPanel Grid.Row="1" Grid.Column="1" Orientation="Horizontal" Margin="0 3 0 3">
                                        <TextBox x:Name="QueueListviewPopupNewPlaylistNameAtSaveAsTextbox" Width="200" VerticalAlignment="Bottom" HorizontalAlignment="Stretch" Padding="3" IsVisibleChanged="TextBox_IsVisibleChanged"/>
                                    </StackPanel>

                                </Grid>

                                <Button Content="{x:Static properties:Resources.Popup_OK}" Command="{Binding QueueListviewSaveAsPopupCommand}" CommandParameter="{Binding ElementName=QueueListviewPopupNewPlaylistNameAtSaveAsTextbox, Path=Text}" IsDefault="True" Width="60" Margin="12" HorizontalAlignment="Right">
                                </Button>

                            </StackPanel>
                        </Border>
                    </Popup>

                    <Popup IsOpen="{Binding IsConfirmClearQueuePopupVisible}" x:Name="QueueListviewPopupConfirmClearQueue" Opened="QueueListviewPopupConfirmClearQueue_Opened" StaysOpen="False" PlacementTarget="{Binding ElementName=QueueListview}" Placement="Center" AllowsTransparency="True" PopupAnimation="Fade">
                        <Border Background="WhiteSmoke" CornerRadius="4" Padding="6" Width="250" BorderThickness="1" BorderBrush="{DynamicResource PopupBorderColorBrush}">
                            <StackPanel>

                                <Label Content="{x:Static properties:Resources.Popup_ConfirmClearQueue}" TextElement.FontWeight="Bold" />

                                <Grid Grid.Row="0" Grid.Column="0" Margin="3 12 3 3">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="6"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>

                                    <Label Grid.Row="0" Grid.Column="1" Padding="3" VerticalAlignment="Bottom" Content="{x:Static properties:Resources.Popup_ConfirmClearQueueQuestion}"></Label>

                                </Grid>

                                <Button Content="{x:Static properties:Resources.Popup_OK}" x:Name="QueueListviewPopupConfirmClearQueueDefaultButton" Command="{Binding QueueListviewConfirmClearPopupCommand}" IsDefault="True" Width="60" Margin="12" HorizontalAlignment="Right">
                                </Button>

                            </StackPanel>
                        </Border>
                    </Popup>

                    <Popup IsOpen="{Binding IsSelectedSaveToPopupVisible}" x:Name="QueueListviewPopupPlaylistSelect" Opened="QueueListviewPopupPlaylistSelect_Opened" StaysOpen="False" PlacementTarget="{Binding ElementName=QueueListview}" Placement="Center" AllowsTransparency="True" PopupAnimation="Fade">
                        <Border Background="WhiteSmoke" CornerRadius="4" Padding="6" Width="250" BorderThickness="1" BorderBrush="{DynamicResource PopupBorderColorBrush}">
                            <StackPanel>

                                <Label Content="{x:Static properties:Resources.Popup_SaveSelectedTo}" TextElement.FontWeight="Bold" />

                                <Grid Grid.Row="0" Grid.Column="0" Margin="3 12 3 3">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="6"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>

                                    <Label Grid.Row="0" Grid.Column="1" Padding="3" VerticalAlignment="Bottom" Content="{x:Static properties:Resources.Popup_SelectPlaylist}"></Label>
                                    <ListView Grid.Row="1" Grid.Column="1" x:Name="QueueListviewPopupPlaylistSelectListview" ItemsSource="{Binding Playlists}" DisplayMemberPath="Name">

                                    </ListView>
                                </Grid>

                                <Button Content="{x:Static properties:Resources.Popup_OK}" Command="{Binding QueueListviewSaveSelectedToPopupCommand}" CommandParameter="{Binding ElementName=QueueListviewPopupPlaylistSelectListview, Path=SelectedItem}" IsDefault="True" Width="60" Margin="12" HorizontalAlignment="Right">
                                </Button>

                            </StackPanel>
                        </Border>
                    </Popup>

                    <Popup IsOpen="{Binding IsSelectedSaveAsPopupVisible}" x:Name="QueueListviewPopupSelectedSaveAs" Opened="QueueListviewPopupSelectedSaveAs_Opened" StaysOpen="False" PlacementTarget="{Binding ElementName=QueueListview}" Placement="Center" AllowsTransparency="True" PopupAnimation="Fade">
                        <Border Background="WhiteSmoke" CornerRadius="4" Padding="6" Width="250" BorderThickness="1" BorderBrush="{DynamicResource PopupBorderColorBrush}">
                            <StackPanel>

                                <Label Content="{x:Static properties:Resources.Popup_SaveSelectedAs}" TextElement.FontWeight="Bold" />

                                <Grid Grid.Row="0" Grid.Column="0" Margin="3 12 3 3">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="6"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>

                                    <Label Grid.Row="0" Grid.Column="1" Padding="3" VerticalAlignment="Bottom" Content="{x:Static properties:Resources.Popup_InputNewPlaylistName}"></Label>
                                    <StackPanel Grid.Row="1" Grid.Column="1" Orientation="Horizontal" Margin="0 3 0 3">
                                        <TextBox x:Name="QueueListviewPopupNewPlaylistNameAtSelectedSaveAsTextbox" Width="200" VerticalAlignment="Bottom" HorizontalAlignment="Stretch" Padding="3" IsVisibleChanged="TextBox_IsVisibleChanged"/>
                                    </StackPanel>

                                </Grid>

                                <Button Content="{x:Static properties:Resources.Popup_OK}" Command="{Binding QueueListviewSaveSelectedAsPopupCommand}" CommandParameter="{Binding ElementName=QueueListviewPopupNewPlaylistNameAtSelectedSaveAsTextbox, Path=Text}" IsDefault="True" Width="60" Margin="12" HorizontalAlignment="Right">
                                </Button>

                            </StackPanel>
                        </Border>
                    </Popup>

                    <Popup IsOpen="{Binding IsConfirmDeleteQueuePopupVisible}" x:Name="QueueListviewPopupConfirmDeleteSelected" Opened="QueueListviewPopupConfirmDeleteSelected_Opened" StaysOpen="False" PlacementTarget="{Binding ElementName=QueueListview}" Placement="Center" AllowsTransparency="True" PopupAnimation="Fade">
                        <Border Background="WhiteSmoke" CornerRadius="4" Padding="6" Width="250" BorderThickness="1" BorderBrush="{DynamicResource PopupBorderColorBrush}">
                            <StackPanel>

                                <Label Content="{x:Static properties:Resources.Popup_ConfirmRemoveSelected}" TextElement.FontWeight="Bold" />

                                <Grid Grid.Row="0" Grid.Column="0" Margin="3 12 3 3">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="6"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>

                                    <Label Grid.Row="0" Grid.Column="1" Padding="3" VerticalAlignment="Bottom" Content="{x:Static properties:Resources.Popup_ConfirmRemoveSelectedQuestion}"></Label>

                                </Grid>

                                <Button Content="{x:Static properties:Resources.Popup_OK}" Command="{Binding QueueListviewConfirmDeletePopupCommand}" x:Name="QueueListviewPopupConfirmDeleteSelectedDefaultButton" IsDefault="True" Width="60" Margin="12" HorizontalAlignment="Right">
                                </Button>

                            </StackPanel>
                        </Border>
                    </Popup>

                </Grid>

                <!-- Search -->
                <Grid Visibility="{Binding IsSearchVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <!-- Search box -->
                    <Grid Grid.Row="0" Margin="0" HorizontalAlignment="Stretch" VerticalAlignment="Top">

                        <TextBox x:Name="SearchTextBox" Text="{Binding SearchQuery, UpdateSourceTrigger=PropertyChanged}" KeyboardNavigation.TabNavigation="Local" Margin="0.5 0.5 1 0.5" HorizontalAlignment="Stretch" VerticalAlignment="Bottom">
                            <TextBox.Style>
                                <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBoxStyle}">
                                    <Setter Property="Padding" Value="3" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type TextBox}">
                                                <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True" CornerRadius="3">
                                                    <Grid>
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition Height="*"/>
                                                        </Grid.RowDefinitions>
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition Width="*"/>
                                                            <ColumnDefinition Width="Auto"/>
                                                            <ColumnDefinition Width="28"/>
                                                        </Grid.ColumnDefinitions>
                                                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>

                                                        <StackPanel Grid.Column="1" Orientation="Horizontal" Margin="0" VerticalAlignment="Bottom">
                                                            <RadioButton x:Name="SearchTitleRadioButton" GroupName="SearchTags" Margin="2 0 0 0" Content="{x:Static properties:Resources.QueueListviewColumnHeader_Title}" Height="22" Width="80" IsChecked="{Binding Path=SelectedSearchTags, ConverterParameter={x:Static vms:SearchTags.Title}, Converter={StaticResource EnumBooleanConverter}}" Style="{DynamicResource SelectionRadioButtonStyle}"/>
                                                            <RadioButton x:Name="SearchArtistRadioButton" GroupName="SearchTags" Margin="2 0 0 0" Content="{x:Static properties:Resources.QueueListviewColumnHeader_Artist}" Height="22" Width="80" IsChecked="{Binding Path=SelectedSearchTags, ConverterParameter={x:Static vms:SearchTags.Artist}, Converter={StaticResource EnumBooleanConverter}}" Style="{DynamicResource SelectionRadioButtonStyle}"/>
                                                            <RadioButton x:Name="SearchAlbumRadioButton" GroupName="SearchTags" Margin="2 0 0 0" Content="{x:Static properties:Resources.QueueListviewColumnHeader_Album}" Height="22" Width="80" IsChecked="{Binding Path=SelectedSearchTags, ConverterParameter={x:Static vms:SearchTags.Album}, Converter={StaticResource EnumBooleanConverter}}" Style="{DynamicResource SelectionRadioButtonStyle}"/>
                                                            <RadioButton x:Name="SearchGenreRadioButton" GroupName="SearchTags" Margin="2 0 0 0" Content="{x:Static properties:Resources.QueueListviewColumnHeader_Genre}" Height="22" Width="80" IsChecked="{Binding Path=SelectedSearchTags, ConverterParameter={x:Static vms:SearchTags.Genre}, Converter={StaticResource EnumBooleanConverter}}" Style="{DynamicResource SelectionRadioButtonStyle}"/>
                                                        </StackPanel>

                                                        <Button Grid.Column="2" Height="22" Width="22" Margin="0" HorizontalAlignment="Right" ToolTip="{x:Static properties:Resources.Search}" Command="{Binding SearchExecCommand}" IsDefault="True" Content="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z">
                                                            <Button.Resources>
                                                                <Style x:Key="ButtonIntextboxFocusVisual">
                                                                    <Setter Property="Control.Template">
                                                                        <Setter.Value>
                                                                            <ControlTemplate>
                                                                                <Border>
                                                                                    <Rectangle Margin="2" StrokeThickness="1" Stroke="{DynamicResource ControlMediumColorBrush}" StrokeDashArray="1 2" />
                                                                                </Border>
                                                                            </ControlTemplate>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </Style>
                                                            </Button.Resources>
                                                            <Button.Style>
                                                                <Style TargetType="Button">
                                                                    <Setter Property="SnapsToDevicePixels" Value="true" />
                                                                    <Setter Property="OverridesDefaultStyle" Value="True" />
                                                                    <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonIntextboxFocusVisual}" />
                                                                    <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}" />
                                                                    <Setter Property="Foreground" Value="{DynamicResource ControlForegroundColorBrush}"/>
                                                                    <Setter Property="Margin" Value="0" />
                                                                    <Setter Property="Padding" Value="0" />
                                                                    <Setter Property="Template">
                                                                        <Setter.Value>
                                                                            <ControlTemplate TargetType="Button">
                                                                                <Border x:Name="Border" BorderThickness="1" Background="{TemplateBinding Background}" BorderBrush="{DynamicResource BorderDarkColorBrush}" CornerRadius="2">
                                                                                    <Path x:Name="PathIcon" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Stretch="Uniform" Stroke="Transparent" StrokeThickness="0" Margin="4" RenderTransformOrigin="0.5,0.5">
                                                                                        <Path.RenderTransform>
                                                                                            <TransformGroup>
                                                                                                <TransformGroup.Children>
                                                                                                    <RotateTransform Angle="0" />
                                                                                                    <ScaleTransform ScaleX="1" ScaleY="1" />
                                                                                                </TransformGroup.Children>
                                                                                            </TransformGroup>
                                                                                        </Path.RenderTransform>
                                                                                        <Path.Fill>
                                                                                            <SolidColorBrush x:Name="PathIconColor" Color="{DynamicResource ControlForegroundColor}"/>
                                                                                        </Path.Fill>
                                                                                    </Path>
                                                                                </Border>
                                                                                <ControlTemplate.Triggers>

                                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                                        <Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource DisabledForegroundColorBrush}"/>
                                                                                    </Trigger>

                                                                                    <Trigger Property="IsMouseOver" Value="true">
                                                                                        <Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource ControlMouseOverColorBrush}"/>
                                                                                    </Trigger>

                                                                                </ControlTemplate.Triggers>

                                                                            </ControlTemplate>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </Style>
                                                            </Button.Style>

                                                        </Button>

                                                    </Grid>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsEnabled" Value="false">
                                                        <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                                                    </Trigger>
                                                    <Trigger Property="IsMouseOver" Value="true">
                                                        <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ControlMouseOverColorBrush}"/>
                                                    </Trigger>
                                                    <Trigger Property="IsKeyboardFocused" Value="true">
                                                        <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ControlPressedColorBrush}"/>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    <Style.Triggers>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                                                <Condition Property="IsSelectionActive" Value="false"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                                        </MultiTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                        </TextBox>

                    </Grid>

                    <Grid x:Name="SearchResultListviewDummy" Visibility="Hidden" Margin="0 0 20 0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="32" />
                            <ColumnDefinition Width="5*" />
                            <ColumnDefinition Width="62" />
                            <ColumnDefinition Width="2*" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="1*" />
                            <ColumnDefinition Width="2*" />
                        </Grid.ColumnDefinitions>

                        <!--  This is the hidden helper Field which is used to bind to, using the "Fill" column of the helper grid  -->
                        <Grid x:Name="SearchResultListviewDummy1" Grid.Column="0" />
                        <Grid x:Name="SearchResultListviewDummy2" Grid.Column="1" />
                        <Grid x:Name="SearchResultListviewDummy3" Grid.Column="2" />
                        <Grid x:Name="SearchResultListviewDummy4" Grid.Column="3" />
                        <Grid x:Name="SearchResultListviewDummy5" Grid.Column="4" />
                        <Grid x:Name="SearchResultListviewDummy6" Grid.Column="5" />
                        <Grid x:Name="SearchResultListviewDummy7" Grid.Column="6" />
                    </Grid>

                    <ListView x:Name="SearchResultListview" Grid.Row="1" ItemsSource="{Binding SearchResult}" SelectionMode="Extended" AlternationCount="2" Background="{DynamicResource WindowBackgroundBaseColorBrush}" BorderThickness="0 0 0 0" VirtualizingPanel.VirtualizationMode="Recycling" VirtualizingPanel.IsVirtualizingWhenGrouping="True" VirtualizingPanel.IsVirtualizing="True" VirtualizingStackPanel.ScrollUnit="Pixel" helpers:GridViewSort.AutoSort="True" helpers:GridViewSort.ShowSortGlyph="True" IsSynchronizedWithCurrentItem="True" Padding="0" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto">
                        <ListView.Resources>
                            <ContextMenu x:Key="SearchResultListviewItemContextMenu">
                                <MenuItem Header="{x:Static properties:Resources.SongsItemContextMenu_Add}" Command="{Binding Path=DataContext.SongsListviewAddCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                    <MenuItem.Resources>
                                        <ControlTemplate x:Key="PlusIcon">
                                            <Canvas Background="Transparent" >
                                                <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z" />
                                            </Canvas>
                                        </ControlTemplate>
                                    </MenuItem.Resources>
                                    <MenuItem.Icon>
                                        <ContentControl Template="{StaticResource PlusIcon}" />
                                    </MenuItem.Icon>
                                </MenuItem>
                                <Separator />

                                <MenuItem Header="{x:Static properties:Resources.QueueItemContextMenu_SaveSelectedAs}" Command="{Binding Path=DataContext.SearchResultListviewSaveSelectedAsCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                    <MenuItem.Resources>
                                        <ControlTemplate x:Key="PlaylistPlusIcon">
                                            <Canvas Background="Transparent" >
                                                <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M2,16H10V14H2M18,14V10H16V14H12V16H16V20H18V16H22V14M14,6H2V8H14M14,10H2V12H14V10Z" />
                                            </Canvas>
                                        </ControlTemplate>
                                    </MenuItem.Resources>
                                    <MenuItem.Icon>
                                        <ContentControl Template="{StaticResource PlaylistPlusIcon}" />
                                    </MenuItem.Icon>
                                </MenuItem>
                                <Separator />

                                <MenuItem Header="{x:Static properties:Resources.QueueItemContextMenu_SaveSelectedTo}" Command="{Binding Path=DataContext.SearchResultListviewSaveSelectedToCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                    <MenuItem.Resources>
                                        <ControlTemplate x:Key="PlaylistCheckIcon">
                                            <Canvas Background="Transparent" >
                                                <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M14,10H2V12H14V10M14,6H2V8H14V6M2,16H10V14H2V16M21.5,11.5L23,13L16,20L11.5,15.5L13,14L16,17L21.5,11.5Z" />
                                            </Canvas>
                                        </ControlTemplate>
                                    </MenuItem.Resources>
                                    <MenuItem.Icon>
                                        <ContentControl Template="{StaticResource PlaylistCheckIcon}" />
                                    </MenuItem.Icon>
                                </MenuItem>
                            </ContextMenu>
                            <Style TargetType="{x:Type ScrollBar}">
                                <Setter Property="SnapsToDevicePixels" Value="True" />
                                <Setter Property="OverridesDefaultStyle" Value="true" />
                                <Setter Property="Margin" Value="0,0,0,0" />
                                <Setter Property="IsTabStop" Value="False" />
                                <Setter Property="BorderThickness" Value="0" />
                                <Setter Property="Background" Value="Transparent" />
                                <Style.Triggers>
                                    <Trigger Property="Orientation" Value="Vertical">
                                        <Setter Property="Width" Value="14"/>
                                        <Setter Property="Height" Value="Auto" />
                                        <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                                    </Trigger>
                                    <Trigger Property="Orientation" Value="Horizontal">
                                        <Setter Property="Width" Value="Auto"/>
                                        <Setter Property="Height" Value="14" />
                                        <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </ListView.Resources>
                        <ListView.View>
                            <GridView>
                                <GridView.ColumnHeaderContainerStyle>
                                    <Style TargetType="GridViewColumnHeader" BasedOn="{StaticResource GridViewColumnHeaderClickStyle}">
                                        <Setter Property="Visibility" Value="Visible" />
                                    </Style>
                                </GridView.ColumnHeaderContainerStyle>

                                <GridViewColumn Width="{Binding ElementName=SearchResultListviewDummy1, Path=ActualWidth}">
                                    <GridViewColumnHeader Content="">
                                    </GridViewColumnHeader>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <Viewbox Width="16" Height="16" VerticalAlignment="Center" HorizontalAlignment="Center">
                                                <Canvas Width="24" Height="24">
                                                    <Path x:Name="MusicFileIcon" Fill="{DynamicResource ControlMediumColorBrush}" Canvas.Top="0" Stretch="Uniform" Data="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M13,13H11V18A2,2 0 0,1 9,20A2,2 0 0,1 7,18A2,2 0 0,1 9,16C9.4,16 9.7,16.1 10,16.3V11H13V13M13,9V3.5L18.5,9H13Z" />
                                                </Canvas>
                                            </Viewbox>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="MusicFileIcon" Property="Fill" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>
                                <GridViewColumn Width="{Binding ElementName=SearchResultListviewDummy2, Path=ActualWidth}" helpers:GridViewSort.PropertyName="Title">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.QueueListviewColumnHeader_Title}"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock x:Name="SearchResultListviewSongTitleListItemTextBlock" Text="{Binding Path=Title}" Padding="3" />
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="SearchResultListviewSongTitleListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <GridViewColumn Width="{Binding ElementName=SearchResultListviewDummy3, Path=ActualWidth}" helpers:GridViewSort.PropertyName="TimeSort">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.QueueListviewColumnHeader_Time}"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock x:Name="SearchResultListviewTimeListItemTextBlock" Text="{Binding Path=TimeFormated}" Padding="3" />
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="SearchResultListviewTimeListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <GridViewColumn Width="{Binding ElementName=SearchResultListviewDummy4, Path=ActualWidth}" helpers:GridViewSort.PropertyName="Artist">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.QueueListviewColumnHeader_Artist}"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock x:Name="SearchResultListviewArtistListItemTextBlock" Text="{Binding Path=Artist}" Padding="3" />
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="SearchResultListviewArtistListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <GridViewColumn Width="{Binding ElementName=SearchResultListviewDummy5, Path=ActualWidth}" helpers:GridViewSort.PropertyName="Album">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.QueueListviewColumnHeader_Album}"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock x:Name="SearchResultListviewAlbumListItemTextBlock" Text="{Binding Path=Album}" Padding="3" />
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="SearchResultListviewAlbumListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <GridViewColumn Width="{Binding ElementName=SearchResultListviewDummy6, Path=ActualWidth}" helpers:GridViewSort.PropertyName="Genre">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.QueueListviewColumnHeader_Genre}"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock x:Name="SearchResultListviewGenreListItemTextBlock" Text="{Binding Path=Genre}" Padding="3" />
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="SearchResultListviewGenreListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <GridViewColumn Width="{Binding ElementName=SearchResultListviewDummy7, Path=ActualWidth}" helpers:GridViewSort.PropertyName="LastModified">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.QueueListviewColumnHeader_LastModified}"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock x:Name="SearchResultListviewLastModifiedListItemTextBlock" Text="{Binding Path=LastModifiedFormated}" Padding="3" />
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="SearchResultListviewLastModifiedListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>
                            </GridView>
                        </ListView.View>
                        <ListView.ItemContainerStyle>
                            <Style TargetType="ListViewItem" BasedOn="{StaticResource ListViewItemStyle}">
                                <Setter Property="ContextMenu" Value="{StaticResource SearchResultListviewItemContextMenu}" />
                                <Setter Property="Margin" Value="2 0 1 0"/>
                                <Setter Property="Padding" Value="0 1 0 1"/>
                                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                                            <Border Name="Border" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="{TemplateBinding ClipToBounds}" CornerRadius="4" SnapsToDevicePixels="true">
                                                <Border.InputBindings>

                                                </Border.InputBindings>
                                                <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ListView.ItemContainerStyle>
                    </ListView>

                    <Popup IsOpen="{Binding IsSearchResultSelectedSaveAsPopupVisible}" StaysOpen="False" PlacementTarget="{Binding ElementName=SearchResultListview}" Placement="Center" AllowsTransparency="True" PopupAnimation="Fade">
                        <Border Background="WhiteSmoke" CornerRadius="4" Padding="6" Width="250" BorderThickness="1" BorderBrush="{DynamicResource PopupBorderColorBrush}">
                            <StackPanel>

                                <Label Content="{x:Static properties:Resources.Popup_SaveSelectedAs}" TextElement.FontWeight="Bold" />

                                <Grid Grid.Row="0" Grid.Column="0" Margin="3 12 3 3">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="6"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>

                                    <Label Grid.Row="0" Grid.Column="1" Padding="3" VerticalAlignment="Bottom" Content="{x:Static properties:Resources.Popup_InputNewPlaylistName}"></Label>
                                    <StackPanel Grid.Row="1" Grid.Column="1" Orientation="Horizontal" Margin="0 3 0 3">
                                        <TextBox x:Name="NewPlaylistNameAtSelectedSaveAsAtSearchResult" Width="200" VerticalAlignment="Bottom" HorizontalAlignment="Stretch" Padding="3" IsVisibleChanged="TextBox_IsVisibleChanged"/>
                                    </StackPanel>

                                </Grid>

                                <Button Content="{x:Static properties:Resources.Popup_OK}" Command="{Binding SearchResultListviewSaveSelectedAsPopupCommand}" CommandParameter="{Binding ElementName=NewPlaylistNameAtSelectedSaveAsAtSearchResult, Path=Text}" IsDefault="True" Width="60" Margin="12" HorizontalAlignment="Right">
                                </Button>

                            </StackPanel>
                        </Border>
                    </Popup>

                    <Popup IsOpen="{Binding IsSearchResultSelectedSaveToPopupVisible}" x:Name="SearchResultListviewPopupPlaylistSelect" Opened="SearchResultListviewPopupPlaylistSelect_Opened" StaysOpen="False" PlacementTarget="{Binding ElementName=SearchResultListview}" Placement="Center" AllowsTransparency="True" PopupAnimation="Fade">
                        <Border Background="WhiteSmoke" CornerRadius="4" Padding="6" Width="250" BorderThickness="1" BorderBrush="{DynamicResource PopupBorderColorBrush}">
                            <StackPanel>

                                <Label Content="{x:Static properties:Resources.Popup_SaveSelectedTo}" TextElement.FontWeight="Bold" />

                                <Grid Grid.Row="0" Grid.Column="0" Margin="3 12 3 3">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="6"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>

                                    <Label Grid.Row="0" Grid.Column="1" Padding="3" VerticalAlignment="Bottom" Content="{x:Static properties:Resources.Popup_SelectPlaylist}"></Label>
                                    <ListView Grid.Row="1" Grid.Column="1" x:Name="PopupPlaylistSelectListviewAtSearchResult" ItemsSource="{Binding Playlists}" DisplayMemberPath="Name">

                                    </ListView>
                                </Grid>

                                <Button Content="{x:Static properties:Resources.Popup_OK}" Command="{Binding SearchResultListviewSaveSelectedToPopupCommand}" CommandParameter="{Binding ElementName=PopupPlaylistSelectListviewAtSearchResult, Path=SelectedItem}" IsDefault="True" Width="60" Margin="12" HorizontalAlignment="Right">
                                </Button>

                            </StackPanel>
                        </Border>
                    </Popup>

                </Grid>

                <!-- Library -->
                <Grid Visibility="{Binding IsLibraryVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="1*"/>
                        <ColumnDefinition Width="8"/>
                        <ColumnDefinition Width="3*"/>
                    </Grid.ColumnDefinitions>

                    <TreeView Grid.Row="0" Grid.Column="0" Background="{DynamicResource WindowBackgroundBaseColorBrush}" BorderThickness="0 0 0 0" VirtualizingPanel.VirtualizationMode="Recycling" VirtualizingPanel.IsVirtualizingWhenGrouping="True" VirtualizingPanel.IsVirtualizing="True" VirtualizingStackPanel.ScrollUnit="Pixel" ItemsSource="{Binding MusicDirectories}" helpers:TreeViewHelper.SelectedItem="{Binding SelectedNodeDirectory, Mode=TwoWay}" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto">
                        <TreeView.Resources>
                            <Style TargetType="{x:Type TreeViewItem}">
                                <Setter Property="HorizontalContentAlignment" Value="Left" />
                                <Setter Property="VerticalContentAlignment" Value="Center" />
                            </Style>
                            <Style TargetType="{x:Type ScrollBar}">
                                <Setter Property="SnapsToDevicePixels" Value="True" />
                                <Setter Property="OverridesDefaultStyle" Value="true" />
                                <Setter Property="Margin" Value="0,0,0,0" />
                                <Setter Property="IsTabStop" Value="False" />
                                <Setter Property="BorderThickness" Value="0" />
                                <Setter Property="Background" Value="Transparent" />
                                <Style.Triggers>
                                    <Trigger Property="Orientation" Value="Vertical">
                                        <Setter Property="Width" Value="14"/>
                                        <Setter Property="Height" Value="Auto" />
                                        <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                                    </Trigger>
                                    <Trigger Property="Orientation" Value="Horizontal">
                                        <Setter Property="Width" Value="Auto"/>
                                        <Setter Property="Height" Value="14" />
                                        <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </TreeView.Resources>
                        <TreeView.ItemTemplate>
                            <HierarchicalDataTemplate DataType="local:NodeTree" ItemsSource="{Binding Path=Children}">
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Center">
                                    <Viewbox Width="12" Height="12" Margin="0 0 4 2">
                                        <Canvas Width="18" Height="18">
                                            <Path Data="{Binding PathIcon}" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" />
                                        </Canvas>
                                    </Viewbox>
                                    <TextBlock Text="{Binding Path=Name}" Padding="4"/>
                                </StackPanel>
                            </HierarchicalDataTemplate>
                        </TreeView.ItemTemplate>
                        <TreeView.ItemContainerStyle>
                            <Style TargetType="TreeViewItem" BasedOn="{StaticResource TreeviewItemStyle}">
                                <Setter Property="OverridesDefaultStyle" Value="False" />
                                <Setter Property="IsExpanded" Value="{Binding Expanded, Mode=TwoWay}"/>
                                <Setter Property="IsSelected" Value="{Binding Selected, Mode=TwoWay}"/>
                                <Setter Property="HorizontalContentAlignment" Value="Left" />
                                <Setter Property="VerticalContentAlignment" Value="Center" />
                            </Style>
                        </TreeView.ItemContainerStyle>
                    </TreeView>

                    <GridSplitter Grid.Row="0" Grid.Column="1" ResizeDirection="Columns" Style="{StaticResource GridSplitterStyle}"></GridSplitter>

                    <!-- Song list of selected directory -->
                    <Grid Grid.Row="0" Grid.Column="2">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <!-- Filter box -->
                        <Grid Grid.Row="0" Margin="0" HorizontalAlignment="Stretch" VerticalAlignment="Top">

                            <TextBox x:Name="FilterTextBox" Text="{Binding FilterMusicEntriesQuery, UpdateSourceTrigger=PropertyChanged}" KeyboardNavigation.TabNavigation="Local" Padding="3" Margin="0.5 0.5 1 0.5" HorizontalAlignment="Stretch" VerticalAlignment="Bottom">
                                <TextBox.Style>
                                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBoxStyle}">
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type TextBox}">
                                                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True" CornerRadius="3">
                                                        <Grid>
                                                            <Grid.RowDefinitions>
                                                                <RowDefinition Height="*"/>
                                                            </Grid.RowDefinitions>
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition Width="*"/>
                                                                <ColumnDefinition Width="28"/>
                                                            </Grid.ColumnDefinitions>
                                                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>

                                                            <Button Grid.Column="1" Height="22" Width="22" Margin="0" HorizontalAlignment="Right" ToolTip="{x:Static properties:Resources.FilterClear}" Command="{Binding FilterMusicEntriesClearCommand}" IsDefault="False" Content="M14.76,20.83L17.6,18L14.76,15.17L16.17,13.76L19,16.57L21.83,13.76L23.24,15.17L20.43,18L23.24,20.83L21.83,22.24L19,19.4L16.17,22.24L14.76,20.83M12,12V19.88C12.04,20.18 11.94,20.5 11.71,20.71C11.32,21.1 10.69,21.1 10.3,20.71L8.29,18.7C8.06,18.47 7.96,18.16 8,17.87V12H7.97L2.21,4.62C1.87,4.19 1.95,3.56 2.38,3.22C2.57,3.08 2.78,3 3,3V3H17V3C17.22,3 17.43,3.08 17.62,3.22C18.05,3.56 18.13,4.19 17.79,4.62L12.03,12H12Z">
                                                                <Button.Resources>
                                                                    <Style x:Key="ButtonIntextboxFocusVisual">
                                                                        <Setter Property="Control.Template">
                                                                            <Setter.Value>
                                                                                <ControlTemplate>
                                                                                    <Border>
                                                                                        <Rectangle Margin="2" StrokeThickness="1" Stroke="{DynamicResource ControlMediumColorBrush}" StrokeDashArray="1 2" />
                                                                                    </Border>
                                                                                </ControlTemplate>
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                    </Style>
                                                                </Button.Resources>
                                                                <Button.Style>
                                                                    <Style TargetType="Button">
                                                                        <Setter Property="SnapsToDevicePixels" Value="true" />
                                                                        <Setter Property="OverridesDefaultStyle" Value="True" />
                                                                        <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonIntextboxFocusVisual}" />
                                                                        <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}" />
                                                                        <Setter Property="Foreground" Value="{DynamicResource ControlForegroundColorBrush}"/>
                                                                        <Setter Property="Margin" Value="0" />
                                                                        <Setter Property="Padding" Value="0" />
                                                                        <Setter Property="Template">
                                                                            <Setter.Value>
                                                                                <ControlTemplate TargetType="Button">
                                                                                    <Border x:Name="Border" BorderThickness="1" Background="{TemplateBinding Background}" BorderBrush="{DynamicResource BorderDarkColorBrush}" CornerRadius="2">
                                                                                        <Path x:Name="PathIcon" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Stretch="Uniform" Stroke="Transparent" StrokeThickness="0" Margin="4" RenderTransformOrigin="0.5,0.5">
                                                                                            <Path.RenderTransform>
                                                                                                <TransformGroup>
                                                                                                    <TransformGroup.Children>
                                                                                                        <RotateTransform Angle="0" />
                                                                                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                                                                                    </TransformGroup.Children>
                                                                                                </TransformGroup>
                                                                                            </Path.RenderTransform>
                                                                                            <Path.Fill>
                                                                                                <SolidColorBrush x:Name="PathIconColor" Color="{DynamicResource ControlForegroundColor}"/>
                                                                                            </Path.Fill>
                                                                                        </Path>
                                                                                    </Border>
                                                                                    <ControlTemplate.Triggers>

                                                                                        <Trigger Property="IsEnabled" Value="False">
                                                                                            <Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource DisabledForegroundColorBrush}"/>
                                                                                        </Trigger>

                                                                                        <Trigger Property="IsMouseOver" Value="true">
                                                                                            <Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource ControlMouseOverColorBrush}"/>
                                                                                        </Trigger>

                                                                                    </ControlTemplate.Triggers>

                                                                                </ControlTemplate>
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                    </Style>
                                                                </Button.Style>

                                                            </Button>

                                                        </Grid>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsEnabled" Value="false">
                                                            <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                                                        </Trigger>
                                                        <Trigger Property="IsMouseOver" Value="true">
                                                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ControlMouseOverColorBrush}"/>
                                                        </Trigger>
                                                        <Trigger Property="IsKeyboardFocused" Value="true">
                                                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ControlPressedColorBrush}"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Style.Triggers>
                                            <MultiTrigger>
                                                <MultiTrigger.Conditions>
                                                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                                                    <Condition Property="IsSelectionActive" Value="false"/>
                                                </MultiTrigger.Conditions>
                                                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                                            </MultiTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>
                            </TextBox>

                        </Grid>

                        <Grid x:Name="SongFilesListviewDummy" Grid.Row="1" Visibility="Hidden" Margin="0 0 20 0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="32" />
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <!--  This is the hidden helper Field which is used to bind to, using the "Fill" column of the helper grid  -->
                            <Grid x:Name="SongFilesListviewDummy1" Grid.Column="0" />
                            <Grid x:Name="SongFilesListviewDummy2" Grid.Column="1" />
                            <Grid x:Name="SongFilesListviewDummy3" Grid.Column="2" />
                        </Grid>

                        <ListView x:Name="SongFilesListview" Grid.Row="1" ItemsSource="{Binding MusicEntries}" SelectionMode="Extended" AlternationCount="2" Background="{DynamicResource WindowBackgroundBaseColorBrush}" VirtualizingPanel.VirtualizationMode="Recycling" VirtualizingPanel.IsVirtualizingWhenGrouping="True" VirtualizingPanel.IsVirtualizing="True" VirtualizingStackPanel.ScrollUnit="Pixel" helpers:GridViewSort.AutoSort="True" helpers:GridViewSort.ShowSortGlyph="True" IsSynchronizedWithCurrentItem="True" BorderBrush="#121212" BorderThickness="0 0 0 0" Padding="0" Margin="0" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.CanContentScroll="True">
                            <ListView.Resources>
                                <ContextMenu x:Key="SongFilesListviewItemContextMenu">
                                    <MenuItem Header="{x:Static properties:Resources.SongsItemContextMenu_Add}" Command="{Binding Path=DataContext.SongFilesListviewAddCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                        <MenuItem.Resources>
                                            <ControlTemplate x:Key="PlusIcon">
                                                <Canvas Background="Transparent" >
                                                    <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z" />
                                                </Canvas>
                                            </ControlTemplate>
                                        </MenuItem.Resources>
                                        <MenuItem.Icon>
                                            <ContentControl Template="{StaticResource PlusIcon}" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <Separator />

                                    <MenuItem Header="{x:Static properties:Resources.QueueItemContextMenu_SaveSelectedAs}" Command="{Binding Path=DataContext.SongFilesListviewSaveSelectedAsCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                        <MenuItem.Resources>
                                            <ControlTemplate x:Key="PlaylistPlusIcon">
                                                <Canvas Background="Transparent" >
                                                    <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M2,16H10V14H2M18,14V10H16V14H12V16H16V20H18V16H22V14M14,6H2V8H14M14,10H2V12H14V10Z" />
                                                </Canvas>
                                            </ControlTemplate>
                                        </MenuItem.Resources>
                                        <MenuItem.Icon>
                                            <ContentControl Template="{StaticResource PlaylistPlusIcon}" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <Separator />

                                    <MenuItem Header="{x:Static properties:Resources.QueueItemContextMenu_SaveSelectedTo}" Command="{Binding Path=DataContext.SongFilesListviewSaveSelectedToCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                        <MenuItem.Resources>
                                            <ControlTemplate x:Key="PlaylistCheckIcon">
                                                <Canvas Background="Transparent" >
                                                    <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M14,10H2V12H14V10M14,6H2V8H14V6M2,16H10V14H2V16M21.5,11.5L23,13L16,20L11.5,15.5L13,14L16,17L21.5,11.5Z" />
                                                </Canvas>
                                            </ControlTemplate>
                                        </MenuItem.Resources>
                                        <MenuItem.Icon>
                                            <ContentControl Template="{StaticResource PlaylistCheckIcon}" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                </ContextMenu>
                                <Style TargetType="{x:Type ScrollBar}">
                                    <Setter Property="SnapsToDevicePixels" Value="True" />
                                    <Setter Property="OverridesDefaultStyle" Value="true" />
                                    <Setter Property="Margin" Value="0,0,0,0" />
                                    <Setter Property="IsTabStop" Value="False" />
                                    <Setter Property="BorderThickness" Value="0" />
                                    <Setter Property="Background" Value="Transparent" />
                                    <Style.Triggers>
                                        <Trigger Property="Orientation" Value="Vertical">
                                            <Setter Property="Width" Value="14"/>
                                            <Setter Property="Height" Value="Auto" />
                                            <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                                        </Trigger>
                                        <Trigger Property="Orientation" Value="Horizontal">
                                            <Setter Property="Width" Value="Auto"/>
                                            <Setter Property="Height" Value="14" />
                                            <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </ListView.Resources>
                            <ListView.View>
                                <GridView>
                                    <GridView.ColumnHeaderContainerStyle>
                                        <Style TargetType="GridViewColumnHeader" BasedOn="{StaticResource GridViewColumnHeaderClickStyle}">
                                            <Setter Property="Visibility" Value="Visible" />
                                        </Style>
                                    </GridView.ColumnHeaderContainerStyle>

                                    <GridViewColumn Width="{Binding ElementName=SongFilesListviewDummy1, Path=ActualWidth}">
                                        <GridViewColumnHeader Content=""/>
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <Viewbox Width="16" Height="16" VerticalAlignment="Center" HorizontalAlignment="Center">
                                                    <Canvas Width="24" Height="24">
                                                        <Path x:Name="MusicFileIcon" Fill="{DynamicResource ControlMediumColorBrush}" Canvas.Top="0" Stretch="Uniform" Data="{Binding PathIcon}" />
                                                    </Canvas>
                                                </Viewbox>
                                                <DataTemplate.Triggers>
                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                        <Setter TargetName="MusicFileIcon" Property="Fill" Value="#111111" />
                                                    </DataTrigger>
                                                </DataTemplate.Triggers>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>

                                    <GridViewColumn Width="{Binding ElementName=SongFilesListviewDummy2, Path=ActualWidth}" helpers:GridViewSort.PropertyName="Name">
                                        <GridViewColumnHeader Content="{x:Static properties:Resources.SongFilesListviewColumnHeader_File}"/>
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <StackPanel>
                                                    <TextBlock x:Name="SongsListviewSongTitleListItemTextBlock" Text="{Binding Path=Name}" Padding="3" />
                                                </StackPanel>
                                                <DataTemplate.Triggers>
                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                        <Setter TargetName="SongsListviewSongTitleListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                    </DataTrigger>
                                                </DataTemplate.Triggers>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>

                                    <GridViewColumn Width="{Binding ElementName=SongFilesListviewDummy3, Path=ActualWidth}" helpers:GridViewSort.PropertyName="FilePath">
                                        <GridViewColumnHeader Content="{x:Static properties:Resources.SongFilesListviewColumnHeader_Path}"/>
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <StackPanel>
                                                    <TextBlock x:Name="SongsListviewSongPathListItemTextBlock" Text="{Binding Path=FilePath}" Padding="3" />
                                                </StackPanel>
                                                <DataTemplate.Triggers>
                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                        <Setter TargetName="SongsListviewSongPathListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                    </DataTrigger>
                                                </DataTemplate.Triggers>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>

                                </GridView>
                            </ListView.View>
                            <ListView.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <VirtualizingStackPanel Orientation="Vertical" CanVerticallyScroll="True"/>
                                </ItemsPanelTemplate>
                            </ListView.ItemsPanel>
                            <ListView.ItemContainerStyle>
                                <Style TargetType="ListViewItem" BasedOn="{StaticResource ListViewItemStyle}">
                                    <Setter Property="ContextMenu" Value="{StaticResource SongFilesListviewItemContextMenu}" />
                                    <Setter Property="Margin" Value="2 0 1 0"/>
                                    <Setter Property="Padding" Value="0 1 0 1"/>
                                    <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ListViewItem}">
                                                <Border Name="Border" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="{TemplateBinding ClipToBounds}" CornerRadius="4" SnapsToDevicePixels="true">
                                                    <Border.InputBindings>
                                                        <MouseBinding Command="{Binding Path=DataContext.SongFilesListviewLeftDoubleClickCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" Gesture="LeftDoubleClick" />
                                                    </Border.InputBindings>
                                                    <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                </Border>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ListView.ItemContainerStyle>
                        </ListView>

                        <Popup IsOpen="{Binding IsSongFilesSelectedSaveAsPopupVisible}" StaysOpen="False" PlacementTarget="{Binding ElementName=SongFilesListview}" Placement="Center" AllowsTransparency="True" PopupAnimation="Fade">
                            <Border Background="WhiteSmoke" CornerRadius="4" Padding="6" Width="250" BorderThickness="1" BorderBrush="{DynamicResource PopupBorderColorBrush}">
                                <StackPanel>

                                    <Label Content="{x:Static properties:Resources.Popup_SaveSelectedAs}" TextElement.FontWeight="Bold" />

                                    <Grid Grid.Row="0" Grid.Column="0" Margin="3 12 3 3">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="6"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>

                                        <Label Grid.Row="0" Grid.Column="1" Padding="3" VerticalAlignment="Bottom" Content="{x:Static properties:Resources.Popup_InputNewPlaylistName}"></Label>
                                        <StackPanel Grid.Row="1" Grid.Column="1" Orientation="Horizontal" Margin="0 3 0 3">
                                            <TextBox x:Name="NewPlaylistNameAtSelectedSaveAsAtSongFiles" Width="200" VerticalAlignment="Bottom" HorizontalAlignment="Stretch" Padding="3" IsVisibleChanged="TextBox_IsVisibleChanged"/>
                                        </StackPanel>

                                    </Grid>

                                    <Button Content="{x:Static properties:Resources.Popup_OK}" Command="{Binding SongFilesListviewSaveSelectedAsPopupCommand}" CommandParameter="{Binding ElementName=NewPlaylistNameAtSelectedSaveAsAtSongFiles, Path=Text}" IsDefault="True" Width="60" Margin="12" HorizontalAlignment="Right">
                                    </Button>

                                </StackPanel>
                            </Border>
                        </Popup>

                        <Popup IsOpen="{Binding IsSongFilesSelectedSaveToPopupVisible}" x:Name="LibraryListviewPopupPlaylistSelect" Opened="LibraryListviewPopupPlaylistSelect_Opened" StaysOpen="False" PlacementTarget="{Binding ElementName=SongFilesListview}" Placement="Center" AllowsTransparency="True" PopupAnimation="Fade">
                            <Border Background="WhiteSmoke" CornerRadius="4" Padding="6" Width="250" BorderThickness="1" BorderBrush="{DynamicResource PopupBorderColorBrush}">
                                <StackPanel>

                                    <Label Content="{x:Static properties:Resources.Popup_SaveSelectedTo}" TextElement.FontWeight="Bold" />

                                    <Grid Grid.Row="0" Grid.Column="0" Margin="3 12 3 3">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="6"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>

                                        <Label Grid.Row="0" Grid.Column="1" Padding="3" VerticalAlignment="Bottom" Content="{x:Static properties:Resources.Popup_SelectPlaylist}"></Label>
                                        <ListView Grid.Row="1" Grid.Column="1" x:Name="PopupPlaylistSelectListviewAtSongFiles" ItemsSource="{Binding Playlists}" DisplayMemberPath="Name">

                                        </ListView>
                                    </Grid>

                                    <Button Content="{x:Static properties:Resources.Popup_OK}" Command="{Binding SongFilesListviewSaveSelectedToPopupCommand}" CommandParameter="{Binding ElementName=PopupPlaylistSelectListviewAtSongFiles, Path=SelectedItem}" IsDefault="True" Width="60" Margin="12" HorizontalAlignment="Right">
                                    </Button>

                                </StackPanel>
                            </Border>
                        </Popup>

                    </Grid>

                </Grid>

                <!-- Playlists -->
                <Grid Visibility="{Binding IsPlaylistsVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
                    <Grid x:Name="PlaylistsListviewDummy" Grid.Row="1" Visibility="Hidden" Margin="0 0 20 0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="32" />
                            <ColumnDefinition Width="2*" />
                            <ColumnDefinition Width="1*" />
                        </Grid.ColumnDefinitions>

                        <!--  This is the hidden helper Field which is used to bind to, using the "Fill" column of the helper grid  -->
                        <Grid x:Name="PlaylistsListviewDummy1" Grid.Column="0" />
                        <Grid x:Name="PlaylistsListviewDummy2" Grid.Column="1" />
                        <Grid x:Name="PlaylistsListviewDummy3" Grid.Column="2" />
                    </Grid>

                    <ListView x:Name="PlaylistsListview" ItemsSource="{Binding Playlists}" SelectedItem="{Binding SelectedPlaylist}" SelectionMode="Single" AlternationCount="2" Background="{DynamicResource WindowBackgroundBaseColorBrush}" VirtualizingPanel.VirtualizationMode="Recycling" VirtualizingPanel.IsVirtualizingWhenGrouping="True" VirtualizingPanel.IsVirtualizing="True" VirtualizingStackPanel.ScrollUnit="Pixel" helpers:GridViewSort.AutoSort="True" helpers:GridViewSort.ShowSortGlyph="True"  IsSynchronizedWithCurrentItem="True" BorderThickness="0 0 0 0" Padding="0" Margin="0" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto">
                        <ListView.InputBindings>
                            <KeyBinding Key="Return" Command="{Binding Path=DataContext.PlaylistListviewEnterKeyCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" />
                        </ListView.InputBindings>
                        <ListView.Resources>
                            <ContextMenu x:Key="PlaylistsListviewItemContextMenu">
                                <MenuItem Header="{x:Static properties:Resources.PlaylistItemContextMenu_Load}" Command="{Binding Path=DataContext.PlaylistListviewLoadPlaylistCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                    <MenuItem.Resources>
                                        <ControlTemplate x:Key="PlusIcon">
                                            <Canvas Background="Transparent" >
                                                <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z" />
                                            </Canvas>
                                        </ControlTemplate>
                                    </MenuItem.Resources>
                                    <MenuItem.Icon>
                                        <ContentControl Template="{StaticResource PlusIcon}" />
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Header="{x:Static properties:Resources.PlaylistItemContextMenu_ClearAndLoad}" Command="{Binding Path=DataContext.PlaylistListviewClearLoadPlaylistCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                    <MenuItem.Resources>
                                        <ControlTemplate x:Key="PlusThickIcon">
                                            <Canvas Background="Transparent" >
                                                <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M20 14H14V20H10V14H4V10H10V4H14V10H20V14Z" />
                                            </Canvas>
                                        </ControlTemplate>
                                    </MenuItem.Resources>
                                    <MenuItem.Icon>
                                        <ContentControl Template="{StaticResource PlusThickIcon}" />
                                    </MenuItem.Icon>
                                </MenuItem>
                                <Separator/>
                                <!--
                                    <MenuItem Header="{x:Static properties:Resources.PlaylistItemContextMenu_Rename}" Command="{Binding Path=DataContext.PlaylistListviewRenamePlaylistCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                        <MenuItem.Resources>
                                            <ControlTemplate x:Key="PlaylistEditIcon">
                                                <Canvas Background="Transparent" >
                                                    <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M2,6V8H14V6H2M2,10V12H14V10H2M20.04,10.13C19.9,10.13 19.76,10.19 19.65,10.3L18.65,11.3L20.7,13.35L21.7,12.35C21.92,12.14 21.92,11.79 21.7,11.58L20.42,10.3C20.31,10.19 20.18,10.13 20.04,10.13M18.07,11.88L12,17.94V20H14.06L20.12,13.93L18.07,11.88M2,14V16H10V14H2Z" />
                                                </Canvas>
                                            </ControlTemplate>
                                        </MenuItem.Resources>
                                        <MenuItem.Icon>
                                            <ContentControl Template="{StaticResource PlaylistEditIcon}" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    -->
                                <MenuItem Header="{x:Static properties:Resources.PlaylistItemContextMenu_Remove}" Command="{Binding Path=DataContext.PlaylistListviewRemovePlaylistCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                    <MenuItem.Resources>
                                        <ControlTemplate x:Key="PlaylistRemoveIcon">
                                            <Canvas Background="Transparent" >
                                                <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M2,6V8H14V6H2M2,10V12H11V10H2M14.17,10.76L12.76,12.17L15.59,15L12.76,17.83L14.17,19.24L17,16.41L19.83,19.24L21.24,17.83L18.41,15L21.24,12.17L19.83,10.76L17,13.59L14.17,10.76M2,14V16H11V14H2Z" />
                                            </Canvas>
                                        </ControlTemplate>
                                    </MenuItem.Resources>
                                    <MenuItem.Icon>
                                        <ContentControl Template="{StaticResource PlaylistRemoveIcon}" />
                                    </MenuItem.Icon>
                                </MenuItem>
                            </ContextMenu>
                            <Style TargetType="{x:Type ScrollBar}">
                                <Setter Property="SnapsToDevicePixels" Value="True" />
                                <Setter Property="OverridesDefaultStyle" Value="true" />
                                <Setter Property="Margin" Value="0,0,0,0" />
                                <Setter Property="IsTabStop" Value="False" />
                                <Setter Property="BorderThickness" Value="0" />
                                <Setter Property="Background" Value="Transparent" />
                                <Style.Triggers>
                                    <Trigger Property="Orientation" Value="Vertical">
                                        <Setter Property="Width" Value="14"/>
                                        <Setter Property="Height" Value="Auto" />
                                        <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                                    </Trigger>
                                    <Trigger Property="Orientation" Value="Horizontal">
                                        <Setter Property="Width" Value="Auto"/>
                                        <Setter Property="Height" Value="14" />
                                        <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </ListView.Resources>
                        <ListView.View>
                            <GridView>
                                <GridView.ColumnHeaderContainerStyle>
                                    <Style TargetType="GridViewColumnHeader" BasedOn="{StaticResource GridViewColumnHeaderClickStyle}">
                                        <Setter Property="Visibility" Value="Visible" />
                                    </Style>
                                </GridView.ColumnHeaderContainerStyle>


                                <GridViewColumn Width="{Binding ElementName=PlaylistsListviewDummy1, Path=ActualWidth}">
                                    <GridViewColumnHeader Content=""/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <Viewbox Width="16" Height="16">
                                                <Canvas Width="24" Height="24">
                                                    <Path x:Name="PlaylistIcon" Fill="{DynamicResource ControlMediumColorBrush}" Canvas.Top="6.5" Stretch="Uniform" Data="M15,6H3V8H15V6M15,10H3V12H15V10M3,16H11V14H3V16M17,6V14.18C16.69,14.07 16.35,14 16,14A3,3 0 0,0 13,17A3,3 0 0,0 16,20A3,3 0 0,0 19,17V8H22V6H17Z" />
                                                </Canvas>
                                            </Viewbox>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="PlaylistIcon" Property="Fill" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <GridViewColumn Width="{Binding ElementName=PlaylistsListviewDummy2, Path=ActualWidth}" helpers:GridViewSort.PropertyName="Name">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.PlaylistsListviewColumnHeader_Playlists}"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock x:Name="PlaylistsListviewSongTitleListItemTextBlock" Text="{Binding Path=Name}" Padding="3" />
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="PlaylistsListviewSongTitleListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <GridViewColumn Width="{Binding ElementName=PlaylistsListviewDummy3, Path=ActualWidth}" helpers:GridViewSort.PropertyName="LastModified">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.QueueListviewColumnHeader_LastModified}"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock x:Name="PlaylistsListviewLastModifiedListItemTextBlock" Text="{Binding Path=LastModifiedFormated}" Padding="3" />
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="PlaylistsListviewLastModifiedListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                            </GridView>
                        </ListView.View>
                        <ListView.ItemContainerStyle>
                            <Style TargetType="ListViewItem" BasedOn="{StaticResource ListViewItemStyle}">
                                <Setter Property="ContextMenu" Value="{StaticResource PlaylistsListviewItemContextMenu}" />
                                <Setter Property="Margin" Value="2 0 1 0"/>
                                <Setter Property="Padding" Value="0 1 0 1"/>
                                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                                            <Border Name="Border" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="{TemplateBinding ClipToBounds}" CornerRadius="4" SnapsToDevicePixels="true">
                                                <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ListView.ItemContainerStyle>
                    </ListView>

                    <Popup IsOpen="{Binding IsConfirmDeletePlaylistPopupVisible}" x:Name="PlaylistsListviewPopupConfirmDeleteSelected" Opened="PlaylistsListviewPopupConfirmDeleteSelected_Opened" StaysOpen="False" PlacementTarget="{Binding ElementName=PlaylistsListview}" Placement="Center" AllowsTransparency="True" PopupAnimation="Fade">
                        <Border Background="WhiteSmoke" CornerRadius="4" Padding="6" Width="250" BorderThickness="1" BorderBrush="{DynamicResource PopupBorderColorBrush}">
                            <StackPanel>

                                <Label Content="{x:Static properties:Resources.Popup_ConfirmRemovePlaylist}" TextElement.FontWeight="Bold" />

                                <Grid Grid.Row="0" Grid.Column="0" Margin="3 12 3 3">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="6"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>

                                    <Label Grid.Row="0" Grid.Column="1" Padding="3" VerticalAlignment="Bottom" Content="{x:Static properties:Resources.Popup_ConfirmRemovePlaylistQuestion}"></Label>

                                </Grid>

                                <Button Content="OK" Command="{Binding PlaylistListviewConfirmRemovePlaylistPopupCommand}" x:Name="PlaylistsListviewPopupConfirmDeleteSelectedDefaultButton" IsDefault="True" Width="60" Margin="12" HorizontalAlignment="Right">
                                </Button>

                            </StackPanel>
                        </Border>
                    </Popup>

                </Grid>

                <!-- PlaylistItems -->
                <Grid Visibility="{Binding IsPlaylistItemVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
                    <Grid x:Name="PlaylistSongsListviewDummy" Visibility="Hidden" Margin="0 0 20 0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="1*" />
                            <ColumnDefinition Width="0" />
                            <ColumnDefinition Width="5*" />
                            <ColumnDefinition Width="62" />
                            <ColumnDefinition Width="2*" />
                            <ColumnDefinition Width="2*" />
                            <ColumnDefinition Width="1*" />
                            <ColumnDefinition Width="1*" />
                            <ColumnDefinition Width="1*" />
                            <ColumnDefinition Width="2*" />
                        </Grid.ColumnDefinitions>

                        <!--  This is the hidden helper Field which is used to bind to, using the "Fill" column of the helper grid  -->
                        <Grid x:Name="PlaylistSongsListviewDummy0" Grid.Column="0" />
                        <Grid x:Name="PlaylistSongsListviewDummy1" Grid.Column="1" />
                        <Grid x:Name="PlaylistSongsListviewDummy2" Grid.Column="2" />
                        <Grid x:Name="PlaylistSongsListviewDummy3" Grid.Column="3" />
                        <Grid x:Name="PlaylistSongsListviewDummy4" Grid.Column="4" />
                        <Grid x:Name="PlaylistSongsListviewDummy5" Grid.Column="5" />
                        <Grid x:Name="PlaylistSongsListviewDummy6" Grid.Column="6" />
                        <Grid x:Name="PlaylistSongsListviewDummy7" Grid.Column="7" />
                        <Grid x:Name="PlaylistSongsListviewDummy8" Grid.Column="8" />
                        <Grid x:Name="PlaylistSongsListviewDummy9" Grid.Column="9" />
                    </Grid>

                    <ListView x:Name="PlaylistSongsListview" Grid.Row="0" ItemsSource="{Binding PlaylistSongs, NotifyOnTargetUpdated=True}" TargetUpdated="PlaylistSongsListview_TargetUpdated" SelectedItem="{Binding SelectedPlaylistSong}" SelectionMode="Extended" AlternationCount="2" Background="{DynamicResource WindowBackgroundBaseColorBrush}" VirtualizingPanel.VirtualizationMode="Recycling" VirtualizingPanel.IsVirtualizingWhenGrouping="True" VirtualizingPanel.IsVirtualizing="True" VirtualizingStackPanel.ScrollUnit="Pixel" helpers:GridViewSort.AutoSort="True" helpers:GridViewSort.ShowSortGlyph="True" IsSynchronizedWithCurrentItem="True" BorderThickness="0 0 0 0" Padding="0" Margin="0" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.CanContentScroll="True">
                        <ListView.Resources>
                            <ContextMenu x:Key="PlaylistSongsListviewItemContextMenu">
                                <MenuItem Header="{x:Static properties:Resources.QueueItemContextMenu_SelectedItems}">
                                    <MenuItem.Resources>
                                        <ControlTemplate x:Key="CheckUnderlineIcon">
                                            <Canvas Background="Transparent" >
                                                <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M21,5L9,17L3.5,11.5L4.91,10.09L9,14.17L19.59,3.59L21,5M3,21V19H21V21H3Z" />
                                            </Canvas>
                                        </ControlTemplate>
                                    </MenuItem.Resources>
                                    <MenuItem.Icon>
                                        <ContentControl Template="{StaticResource CheckUnderlineIcon}" />
                                    </MenuItem.Icon>

                                    <MenuItem Header="{x:Static properties:Resources.SongsItemContextMenu_Add}" Command="{Binding Path=DataContext.SongsListviewAddCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                        <MenuItem.Resources>
                                            <ControlTemplate x:Key="PlusIcon">
                                                <Canvas Background="Transparent" >
                                                    <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z" />
                                                </Canvas>
                                            </ControlTemplate>
                                        </MenuItem.Resources>
                                        <MenuItem.Icon>
                                            <ContentControl Template="{StaticResource PlusIcon}" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem Header="{x:Static properties:Resources.PlaylistSongsContextMenu_Remove}" Command="{Binding Path=DataContext.PlaylistListviewDeletePosCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                        <MenuItem.Resources>
                                            <ControlTemplate x:Key="PlaylistMinusIcon">
                                                <Canvas Background="Transparent" >
                                                    <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M2,16H10V14H2M12,14V16H22V14M14,6H2V8H14M14,10H2V12H14V10Z" />
                                                </Canvas>
                                            </ControlTemplate>
                                        </MenuItem.Resources>
                                        <MenuItem.Icon>
                                            <ContentControl Template="{StaticResource PlaylistMinusIcon}" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                </MenuItem>

                                <Separator/>
                                <MenuItem Header="{x:Static properties:Resources.PlaylistSongsContextMenu_Playlist}">
                                    <MenuItem.Resources>
                                        <ControlTemplate x:Key="Playlist">
                                            <Canvas Background="Transparent" >
                                                <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M15,6H3V8H15V6M15,10H3V12H15V10M3,16H11V14H3V16M17,6V14.18C16.69,14.07 16.35,14 16,14A3,3 0 0,0 13,17A3,3 0 0,0 16,20A3,3 0 0,0 19,17V8H22V6H17Z" />
                                            </Canvas>
                                        </ControlTemplate>
                                    </MenuItem.Resources>
                                    <MenuItem.Icon>
                                        <ContentControl Template="{StaticResource Playlist}" />
                                    </MenuItem.Icon>

                                    <MenuItem Header="{x:Static properties:Resources.PlaylistSongsContextMenu_Clear}" Command="{Binding Path=DataContext.PlaylistListviewClearCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                        <MenuItem.Resources>
                                            <ControlTemplate x:Key="DeleteEmptyOutline">
                                                <Canvas Background="Transparent" >
                                                    <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M20.37,8.91L19.37,10.64L7.24,3.64L8.24,1.91L11.28,3.66L12.64,3.29L16.97,5.79L17.34,7.16L20.37,8.91M6,19V7H11.07L18,11V19A2,2 0 0,1 16,21H8A2,2 0 0,1 6,19M8,19H16V12.2L10.46,9H8V19Z" />
                                                </Canvas>
                                            </ControlTemplate>
                                        </MenuItem.Resources>
                                        <MenuItem.Icon>
                                            <ContentControl Template="{StaticResource DeleteEmptyOutline}" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                </MenuItem>
                            </ContextMenu>
                            <Style TargetType="{x:Type ScrollBar}">
                                <Setter Property="SnapsToDevicePixels" Value="True" />
                                <Setter Property="OverridesDefaultStyle" Value="true" />
                                <Setter Property="Margin" Value="0,0,0,0" />
                                <Setter Property="IsTabStop" Value="False" />
                                <Setter Property="BorderThickness" Value="0" />
                                <Setter Property="Background" Value="Transparent" />
                                <Style.Triggers>
                                    <Trigger Property="Orientation" Value="Vertical">
                                        <Setter Property="Width" Value="14"/>
                                        <Setter Property="Height" Value="Auto" />
                                        <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                                    </Trigger>
                                    <Trigger Property="Orientation" Value="Horizontal">
                                        <Setter Property="Width" Value="Auto"/>
                                        <Setter Property="Height" Value="14" />
                                        <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </ListView.Resources>
                        <ListView.View>
                            <GridView>
                                <GridView.ColumnHeaderContainerStyle>
                                    <Style TargetType="GridViewColumnHeader" BasedOn="{StaticResource GridViewColumnHeaderClickStyle}">
                                        <Setter Property="Visibility" Value="Visible" />
                                    </Style>
                                </GridView.ColumnHeaderContainerStyle>

                                <GridViewColumn Width="{Binding ElementName=PlaylistSongsListviewDummy0, Path=ActualWidth}" helpers:GridViewSort.PropertyName="Index">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.QueueListviewColumnHeader_Position}"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock Text="{Binding Path=IndexPlusOne}" Padding="3" />
                                            </StackPanel>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <GridViewColumn Width="{Binding ElementName=PlaylistSongsListviewDummy1, Path=ActualWidth}">
                                    <GridViewColumnHeader Content="">
                                    </GridViewColumnHeader>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <Viewbox Width="16" Height="16" VerticalAlignment="Center" HorizontalAlignment="Center">
                                                <Canvas Width="24" Height="24">
                                                    <Path x:Name="MusicFileIcon" Fill="{DynamicResource ControlMediumColorBrush}" Canvas.Top="0" Stretch="Uniform" Data="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M13,13H11V18A2,2 0 0,1 9,20A2,2 0 0,1 7,18A2,2 0 0,1 9,16C9.4,16 9.7,16.1 10,16.3V11H13V13M13,9V3.5L18.5,9H13Z" />
                                                </Canvas>
                                            </Viewbox>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="MusicFileIcon" Property="Fill" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <GridViewColumn Width="{Binding ElementName=PlaylistSongsListviewDummy2, Path=ActualWidth}" helpers:GridViewSort.PropertyName="Title">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.QueueListviewColumnHeader_Title}"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock x:Name="PlaylistSongsListviewSongTitleListItemTextBlock" Text="{Binding Path=Title}" Padding="3" />
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="PlaylistSongsListviewSongTitleListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <GridViewColumn Width="{Binding ElementName=PlaylistSongsListviewDummy3, Path=ActualWidth}" helpers:GridViewSort.PropertyName="TimeSort">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.QueueListviewColumnHeader_Time}"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock x:Name="PlaylistSongsListviewTimeListItemTextBlock" Text="{Binding Path=TimeFormated}" Padding="3" />
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="PlaylistSongsListviewTimeListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <GridViewColumn Width="{Binding ElementName=PlaylistSongsListviewDummy4, Path=ActualWidth}" helpers:GridViewSort.PropertyName="Artist">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.QueueListviewColumnHeader_Artist}"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock x:Name="PlaylistSongsListviewArtistListItemTextBlock" Text="{Binding Path=Artist}" Padding="3" />
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="PlaylistSongsListviewArtistListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <GridViewColumn Width="{Binding ElementName=PlaylistSongsListviewDummy5, Path=ActualWidth}" helpers:GridViewSort.PropertyName="Album">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.QueueListviewColumnHeader_Album}"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock x:Name="PlaylistSongsListviewAlbumListItemTextBlock" Text="{Binding Path=Album}" Padding="3" />
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="PlaylistSongsListviewAlbumListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <GridViewColumn Width="{Binding ElementName=PlaylistSongsListviewDummy6, Path=ActualWidth}" helpers:GridViewSort.PropertyName="Disc">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.QueueListviewColumnHeader_Disc}"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock x:Name="PlaylistSongsListviewDiscListItemTextBlock" Text="{Binding Path=Disc}" Padding="3" />
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="PlaylistSongsListviewDiscListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <GridViewColumn Width="{Binding ElementName=PlaylistSongsListviewDummy7, Path=ActualWidth}" helpers:GridViewSort.PropertyName="Track">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.QueueListviewColumnHeader_Track}"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock x:Name="PlaylistSongsListviewTrackListItemTextBlock" Text="{Binding Path=Track}" Padding="3" />
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="PlaylistSongsListviewTrackListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <GridViewColumn Width="{Binding ElementName=PlaylistSongsListviewDummy8, Path=ActualWidth}" helpers:GridViewSort.PropertyName="Genre">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.QueueListviewColumnHeader_Genre}"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock x:Name="PlaylistSongsListviewGenreListItemTextBlock" Text="{Binding Path=Genre}" Padding="3" />
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="PlaylistSongsListviewGenreListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <GridViewColumn Width="{Binding ElementName=PlaylistSongsListviewDummy9, Path=ActualWidth}" helpers:GridViewSort.PropertyName="LastModified">
                                    <GridViewColumnHeader Content="{x:Static properties:Resources.QueueListviewColumnHeader_LastModified}"/>
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <TextBlock x:Name="PlaylistSongsListviewLastModifiedListItemTextBlock" Text="{Binding Path=LastModifiedFormated}" Padding="3" />
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                    <Setter TargetName="PlaylistSongsListviewLastModifiedListItemTextBlock" Property="TextBlock.Foreground" Value="#111111" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                            </GridView>
                        </ListView.View>
                        <ListView.ItemContainerStyle>
                            <Style TargetType="ListViewItem" BasedOn="{StaticResource ListViewItemStyle}">
                                <Setter Property="ContextMenu" Value="{StaticResource PlaylistSongsListviewItemContextMenu}" />
                                <Setter Property="Margin" Value="2 0 1 0"/>
                                <Setter Property="Padding" Value="0 1 0 1"/>
                                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=OneWay}"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                                            <Border Name="Border" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="{TemplateBinding ClipToBounds}" CornerRadius="4" SnapsToDevicePixels="true">
                                                <Border.InputBindings>
                                                    <MouseBinding Command="{Binding Path=DataContext.PlaylistSongsListviewLeftDoubleClickCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" Gesture="LeftDoubleClick" />
                                                </Border.InputBindings>
                                                <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ListView.ItemContainerStyle>
                        <ListView.ItemsPanel>
                            <ItemsPanelTemplate>
                                <VirtualizingStackPanel Orientation="Vertical" CanVerticallyScroll="True"/>
                            </ItemsPanelTemplate>
                        </ListView.ItemsPanel>
                    </ListView>

                    <Popup IsOpen="{Binding IsConfirmUpdatePlaylistSongsPopupVisible}" x:Name="PlaylistItemsListviewPopupConfirmUpdatePlaylistSongs" Opened="PlaylistItemsListviewPopupConfirmUpdatePlaylistSongs_Opened" StaysOpen="False" PlacementTarget="{Binding ElementName=PlaylistSongsListview}" Placement="Center" AllowsTransparency="True" PopupAnimation="Fade">
                        <Border Background="WhiteSmoke" CornerRadius="4" Padding="6" Width="250" BorderThickness="1" BorderBrush="{DynamicResource PopupBorderColorBrush}">
                            <StackPanel>

                                <Label Content="{x:Static properties:Resources.Popup_PlaylistChangedNortification}" TextElement.FontWeight="Bold" />

                                <Grid Grid.Row="0" Grid.Column="0" Margin="3 12 3 3">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="6"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>

                                    <Label Grid.Row="0" Grid.Column="1" Padding="3" VerticalAlignment="Bottom" Content="{x:Static properties:Resources.Popup_ConfirmReloadPlaylistQuestion}"></Label>

                                </Grid>

                                <Button Content="{x:Static properties:Resources.Popup_OK}" Command="{Binding PlaylistListviewConfirmUpdatePopupCommand}" x:Name="PlaylistItemsListviewPopupConfirmUpdatePlaylistSongsDefaultButton" IsDefault="True" Width="60" Margin="12" HorizontalAlignment="Right">
                                </Button>

                            </StackPanel>
                        </Border>
                    </Popup>

                    <!-- Not Used? -->
                    <Popup IsOpen="{Binding IsConfirmMultipleDeletePlaylistSongsNotSupportedPopupVisible}" x:Name="PlaylistItemsListviewPopupConfirmMultipleDeletePlaylistSongsNotSupported" Opened="PlaylistItemsListviewPopupConfirmMultipleDeletePlaylistSongsNotSupported_Opened" StaysOpen="False" PlacementTarget="{Binding ElementName=PlaylistSongsListview}" Placement="Center" AllowsTransparency="True" PopupAnimation="Fade">
                        <Border Background="#FFF15B" CornerRadius="4" Padding="6" Width="250" BorderThickness="1" BorderBrush="{DynamicResource PopupBorderColorBrush}">
                            <StackPanel>

                                <Label Content="{x:Static properties:Resources.Popup_MultipleDeletionNotSupported}" TextElement.FontWeight="Bold" />

                                <Grid Grid.Row="0" Grid.Column="0" Margin="3 12 3 3">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="6"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>

                                    <Label Grid.Row="0" Grid.Column="1" Padding="3" VerticalAlignment="Bottom" Content="{x:Static properties:Resources.Popup_NotSuppotedByMPDProtocol}"></Label>

                                </Grid>

                                <Button Content="{x:Static properties:Resources.Popup_OK}" Command="{Binding PlaylistListviewConfirmDeletePosNotSupportedPopupCommand}" x:Name="PlaylistItemsListviewPopupConfirmMultipleDeletePlaylistSongsNotSupportedDefaultButton" IsDefault="True" Width="60" Margin="12" HorizontalAlignment="Right">
                                </Button>

                            </StackPanel>
                        </Border>
                    </Popup>

                    <Popup IsOpen="{Binding IsConfirmDeletePlaylistSongPopupVisible}" x:Name="PlaylistItemsListviewPopupConfirmDeletePlaylistSong" Opened="PlaylistItemsListviewPopupConfirmDeletePlaylistSong_Opened" StaysOpen="False" PlacementTarget="{Binding ElementName=PlaylistSongsListview}" Placement="Center" AllowsTransparency="True" PopupAnimation="Fade">
                        <Border Background="WhiteSmoke" CornerRadius="4" Padding="6" Width="250" BorderThickness="1" BorderBrush="{DynamicResource PopupBorderColorBrush}">
                            <StackPanel>

                                <Label Content="{x:Static properties:Resources.Popup_ConfirmRemoveSelected}" TextElement.FontWeight="Bold" />

                                <Grid Grid.Row="0" Grid.Column="0" Margin="3 12 3 3">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="6"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>

                                    <Label Grid.Row="0" Grid.Column="1" Padding="3" VerticalAlignment="Bottom" Content="{x:Static properties:Resources.Popup_ConfirmRemoveSelectedQuestion}"></Label>

                                </Grid>

                                <Button Content="{x:Static properties:Resources.Popup_OK}" Command="{Binding PlaylistListviewDeletePosPopupCommand}" x:Name="PlaylistItemsListviewPopupConfirmDeletePlaylistSongDefaultButton" IsDefault="True" Width="60" Margin="12" HorizontalAlignment="Right">
                                </Button>

                            </StackPanel>
                        </Border>
                    </Popup>

                    <Popup IsOpen="{Binding IsConfirmPlaylistClearPopupVisible}" x:Name="PlaylistItemsListviewPopupConfirmClearPlaylistSong" Opened="PlaylistItemsListviewPopupConfirmClearPlaylistSong_Opened" StaysOpen="False" PlacementTarget="{Binding ElementName=PlaylistSongsListview}" Placement="Center" AllowsTransparency="True" PopupAnimation="Fade">
                        <Border Background="WhiteSmoke" CornerRadius="4" Padding="6" Width="250" BorderThickness="1" BorderBrush="{DynamicResource PopupBorderColorBrush}">
                            <StackPanel>

                                <Label Content="{x:Static properties:Resources.Popup_ConfirmClearPlaylist}" TextElement.FontWeight="Bold" />

                                <Grid Grid.Row="0" Grid.Column="0" Margin="3 12 3 3">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="6"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>

                                    <Label Grid.Row="0" Grid.Column="1" Padding="3" VerticalAlignment="Bottom" Content="{x:Static properties:Resources.Popup_ConfirmClearPlaylistQuestion}"></Label>

                                </Grid>

                                <Button Content="{x:Static properties:Resources.Popup_OK}" Command="{Binding PlaylistListviewClearPopupCommand}" x:Name="PlaylistItemsListviewPopupConfirmClearPlaylistSongDefaultButton" IsDefault="True" Width="60" Margin="12" HorizontalAlignment="Right">
                                </Button>

                            </StackPanel>
                        </Border>
                    </Popup>

                </Grid>

            </Grid>

            <!-- GridSplitter -->
            <GridSplitter x:Name="DebugWindowGridSplitter" Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="3" ResizeDirection="Rows" Background="{DynamicResource BoardBackgroundColorBrush}" Style="{StaticResource GridSplitterStyle}" Visibility="Collapsed"></GridSplitter>

            <!-- Debug Windows -->
            <Grid x:Name="DebugWindow" Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="3" Visibility="Collapsed">

                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="1*"/>
                        <ColumnDefinition Width="8"/>
                        <ColumnDefinition Width="1*"/>
                    </Grid.ColumnDefinitions>

                    <Button Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3" ToolTip="{x:Static properties:Resources.Debug_Window_Close}" Style="{StaticResource PathButton}" Width="30" Height="30" Margin="0 0 0 0" HorizontalAlignment="Right" VerticalAlignment="Center" Content="M19,3H16.3H7.7H5A2,2 0 0,0 3,5V7.7V16.4V19A2,2 0 0,0 5,21H7.7H16.4H19A2,2 0 0,0 21,19V16.3V7.7V5A2,2 0 0,0 19,3M15.6,17L12,13.4L8.4,17L7,15.6L10.6,12L7,8.4L8.4,7L12,10.6L15.6,7L17,8.4L13.4,12L17,15.6L15.6,17Z" Command="{Binding ShowDebugWindowCommand}"></Button>

                    <Grid Grid.Row="1" Grid.Column="0">

                        <TextBox x:Name="DebugCommandTextBox" Padding="6 6 24 6" Background="{DynamicResource WindowBackgroundBaseColorBrush}" Foreground="Gray" BorderThickness="0" VerticalAlignment="Stretch" TextWrapping="NoWrap" IsReadOnly="True" IsTabStop="False" Margin="0" MinHeight="24" VerticalScrollBarVisibility="Visible" HorizontalScrollBarVisibility="Auto">
                            <TextBox.Resources>
                                <Style TargetType="{x:Type ScrollBar}">
                                    <Setter Property="SnapsToDevicePixels" Value="True" />
                                    <Setter Property="OverridesDefaultStyle" Value="true" />
                                    <Setter Property="Margin" Value="0,0,0,0" />
                                    <Setter Property="BorderThickness" Value="0" />
                                    <Style.Triggers>
                                        <Trigger Property="Orientation" Value="Vertical">
                                            <Setter Property="Width" Value="14"/>
                                            <Setter Property="Height" Value="Auto" />
                                            <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                                        </Trigger>
                                        <Trigger Property="Orientation" Value="Horizontal">
                                            <Setter Property="Width" Value="Auto"/>
                                            <Setter Property="Height" Value="14" />
                                            <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                                <Style TargetType="{x:Type ScrollViewer}">
                                    <Setter Property="OverridesDefaultStyle" Value="True" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                                <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="*" />
                                                        <ColumnDefinition Width="Auto" />
                                                    </Grid.ColumnDefinitions>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="*" />
                                                        <RowDefinition Height="Auto" />
                                                    </Grid.RowDefinitions>
                                                    <!--
                                                    <Rectangle x:Name="Corner" Grid.Row="1" Grid.Column="1" Fill="Transparent" />
                                                    -->
                                                    <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Row="0" Grid.Column="0" Margin="{TemplateBinding Padding}" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
                                                    <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Row="0" Grid.RowSpan="2" Grid.Column="1" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay,RelativeSource={RelativeSource TemplatedParent}}" />
                                                    <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Row="1" Grid.Column="0" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset,Mode=OneWay,RelativeSource={RelativeSource TemplatedParent}}" />
                                                </Grid>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </TextBox.Resources>
                        </TextBox>

                        <Button Style="{StaticResource PathButton}" Width="30" Height="30" HorizontalAlignment="Right" Margin="0 0 18 0" VerticalAlignment="Top" ToolTip="{x:Static properties:Resources.Debug_Window_Clear}" Content="M16.24,3.56L21.19,8.5C21.97,9.29 21.97,10.55 21.19,11.34L12,20.53C10.44,22.09 7.91,22.09 6.34,20.53L2.81,17C2.03,16.21 2.03,14.95 2.81,14.16L13.41,3.56C14.2,2.78 15.46,2.78 16.24,3.56M4.22,15.58L7.76,19.11C8.54,19.9 9.8,19.9 10.59,19.11L14.12,15.58L9.17,10.63L4.22,15.58Z" Command="{Binding ClearDebugCommandTextCommand}"></Button>

                    </Grid>

                    <GridSplitter Grid.Row="1" Grid.Column="1" ResizeDirection="Columns" Style="{StaticResource GridSplitterStyle}"></GridSplitter>

                    <Grid Grid.Row="1" Grid.Column="2">

                        <TextBox x:Name="DebugIdleTextBox" Padding="6 6 24 6" Background="{DynamicResource WindowBackgroundBaseColorBrush}" Foreground="Gray" BorderThickness="0" VerticalAlignment="Stretch" TextWrapping="NoWrap" IsReadOnly="True" IsTabStop="False" Margin="0" MinHeight="24" VerticalScrollBarVisibility="Visible" HorizontalScrollBarVisibility="Auto">
                            <TextBox.Resources>
                                <Style TargetType="{x:Type ScrollBar}">
                                    <Setter Property="SnapsToDevicePixels" Value="True" />
                                    <Setter Property="OverridesDefaultStyle" Value="true" />
                                    <Setter Property="Margin" Value="0,0,0,0" />
                                    <Setter Property="BorderThickness" Value="0" />
                                    <Style.Triggers>
                                        <Trigger Property="Orientation" Value="Vertical">
                                            <Setter Property="Width" Value="14"/>
                                            <Setter Property="Height" Value="Auto" />
                                            <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                                        </Trigger>
                                        <Trigger Property="Orientation" Value="Horizontal">
                                            <Setter Property="Width" Value="Auto"/>
                                            <Setter Property="Height" Value="14" />
                                            <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                                <Style TargetType="{x:Type ScrollViewer}">
                                    <Setter Property="OverridesDefaultStyle" Value="True" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                                <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="*" />
                                                        <ColumnDefinition Width="Auto" />
                                                    </Grid.ColumnDefinitions>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="*" />
                                                        <RowDefinition Height="Auto" />
                                                    </Grid.RowDefinitions>
                                                    <!--
                                                    <Rectangle x:Name="Corner" Grid.Row="1" Grid.Column="1" Fill="Transparent" />
                                                    -->
                                                    <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Row="0" Grid.Column="0" Margin="{TemplateBinding Padding}" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
                                                    <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Row="0" Grid.RowSpan="2" Grid.Column="1" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay,RelativeSource={RelativeSource TemplatedParent}}" />
                                                    <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Row="1" Grid.Column="0" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset,Mode=OneWay,RelativeSource={RelativeSource TemplatedParent}}" />
                                                </Grid>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </TextBox.Resources>
                        </TextBox>

                        <Button Style="{StaticResource PathButton}" Width="30" Height="30" HorizontalAlignment="Right" Margin="0 0 18 0" VerticalAlignment="Top" ToolTip="{x:Static properties:Resources.Debug_Window_Clear}" Content="M16.24,3.56L21.19,8.5C21.97,9.29 21.97,10.55 21.19,11.34L12,20.53C10.44,22.09 7.91,22.09 6.34,20.53L2.81,17C2.03,16.21 2.03,14.95 2.81,14.16L13.41,3.56C14.2,2.78 15.46,2.78 16.24,3.56M4.22,15.58L7.76,19.11C8.54,19.9 9.8,19.9 10.59,19.11L14.12,15.58L9.17,10.63L4.22,15.58Z" Command="{Binding ClearDebugIdleTextCommand}"></Button>

                    </Grid>

                </Grid>

            </Grid>

            <!-- StatusBar -->
            <StatusBar x:Name="StatusBar" Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="3" Background="{DynamicResource BoardBackgroundColorBrush}" Padding="0 0 0 0" Height="28" Margin="0 0 0 0" BorderBrush="{DynamicResource WindowBackgroundBaseColorBrush}" BorderThickness="0 0 0 0">
                <StatusBar.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                        </Grid>
                    </ItemsPanelTemplate>
                </StatusBar.ItemsPanel>

                <!-- Status icon and quick profile change combobox  -->
                <StatusBarItem Grid.Column="0">
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="0 0 0 0" Visibility="{Binding IsCurrentProfileSet, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">

                        <Viewbox Width="16" Height="16" Margin="2 0 4 0" Opacity="0.7">
                            <Canvas Width="24" Height="24">
                                <Path Fill="{DynamicResource ControlForegroundColorBrush}" Data="{Binding StatusButton}" />
                            </Canvas>
                        </Viewbox>

                        <ComboBox Style="{StaticResource ComboBoxFlatStyle}" IsEnabled="{Binding IsProfileSwitchOK}" ItemsSource="{Binding Profiles}" SelectedItem="{Binding SelectedQuickProfile}" Foreground="{DynamicResource ControlForegroundColorBrush}" HorizontalAlignment="Center" Tag="">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock Text="{Binding Path=Name}"></TextBlock>
                                    </StackPanel>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                        
                    </StackPanel>
                </StatusBarItem>

                <Separator Grid.Column="1" Opacity="0.3" Background="{DynamicResource BorderLightColorBrush}" Visibility="{Binding IsMpdStatusMessageContainsText, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}"/>

                <!-- MpdStatus Message  -->
                <StatusBarItem Grid.Column="2" Visibility="{Binding IsMpdStatusMessageContainsText, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="0 0 2 0" Visibility="{Binding IsConnected, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
                        
                        <!-- Status Error Icon -->
                        <Viewbox Width="16" Height="16" Margin="0 0 4 0" Opacity="0.7">
                            <Canvas Width="24" Height="24">
                                <Path Fill="{DynamicResource ControlDarkColorBrush}" Data="{Binding MpdStatusButton}" />
                            </Canvas>
                        </Viewbox>
                        
                        <!-- Status Error Message -->
                        <TextBlock Text="{Binding MpdStatusMessage}" Style="{DynamicResource DefaultTextBlockStyle}" VerticalAlignment="Center" HorizontalAlignment="Stretch" Margin="6 0 6 0" Padding="0" TextWrapping="NoWrap"></TextBlock>

                    </StackPanel>
                </StatusBarItem>

                <Separator Grid.Column="3" Opacity="0.3" Background="{DynamicResource BorderLightColorBrush}"/>
                
                <!-- Statusbar Message  -->
                <StatusBarItem Grid.Column="4" HorizontalContentAlignment="Left" VerticalAlignment="Center">
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="6 0 6 2">

                        <TextBlock Text="{Binding StatusBarMessage}" Style="{DynamicResource DefaultTextBlockStyle}" Foreground="{DynamicResource ControlDarkColorBrush}" VerticalAlignment="Center" HorizontalAlignment="Stretch" Margin="6 0 6 0" Padding="0" TextWrapping="NoWrap"></TextBlock>

                    </StackPanel>
                </StatusBarItem>

                <Separator Grid.Column="5" Opacity="0.3" Background="{DynamicResource BorderLightColorBrush}" />
                
                <!-- Debug Window Icon  -->
                <StatusBarItem Grid.Column="6" HorizontalContentAlignment="Right">
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0 0 0 0">

                        <Button Width="16" Height="16" Margin="0 0 0 0" Command="{Binding ShowDebugWindowCommand}" VerticalAlignment="Center" ToolTip="Debug Window" Opacity="0.7" Visibility="{Binding IsShowDebugWindow, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
                            <Button.Style>
                                <Style TargetType="{x:Type Button}">
                                    <Setter Property="OverridesDefaultStyle" Value="true" />
                                    <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}" />
                                    <Setter Property="Foreground" Value="{DynamicResource ControlForegroundColorBrush}"/>
                                    <Setter Property="BorderThickness" Value="0" />
                                    <Setter Property="Margin" Value="0 0 0 0" />
                                    <Setter Property="Padding" Value="0" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="Button">
                                                <Border x:Name="Border" Background="{TemplateBinding Background}" CornerRadius="0" BorderThickness="0">
                                                    <Viewbox Width="16" Height="16" Margin="0">
                                                        <Canvas Width="24" Height="24">
                                                            <Canvas.RenderTransform>
                                                                <TranslateTransform X="1" Y="1.5"/>
                                                            </Canvas.RenderTransform>
                                                            <Path x:Name="PathIcon" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Stretch="Uniform">
                                                                <Path.Fill>
                                                                    <SolidColorBrush x:Name="PathIconColor" Color="{DynamicResource ControlForegroundColor}"/>
                                                                </Path.Fill>
                                                                <Path.RenderTransform>
                                                                    <TransformGroup>
                                                                        <TransformGroup.Children>
                                                                            <RotateTransform Angle="0" />
                                                                            <ScaleTransform ScaleX="1.18" ScaleY="1.18" />
                                                                        </TransformGroup.Children>
                                                                    </TransformGroup>
                                                                </Path.RenderTransform>
                                                            </Path>
                                                        </Canvas>
                                                    </Viewbox>
                                                </Border>
                                                <ControlTemplate.Triggers>

                                                    <Trigger Property="IsMouseOver" Value="true">
                                                        <Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource ControlMouseOverColorBrush}"/>
                                                    </Trigger>

                                                    <Trigger Property="IsMouseOver" Value="true">
                                                        <Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource ControlMouseOverColorBrush}"/>
                                                    </Trigger>

                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="IsPressed" Value="False" />
                                                            <Condition Property="IsMouseOver" Value="True" />
                                                        </MultiTrigger.Conditions>
                                                        <Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource ControlMouseOverColorBrush}"/>
                                                    </MultiTrigger>

                                                    <MultiTrigger>
                                                        <Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource ControlPressedColorBrush}"/>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="IsPressed" Value="true" />
                                                            <Condition Property="IsMouseOver" Value="True" />
                                                        </MultiTrigger.Conditions>
                                                    </MultiTrigger>

                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Button.Style>
                            <Button.Content>
                                M20,8H17.19C16.74,7.2 16.12,6.5 15.37,6L17,4.41L15.59,3L13.42,5.17C12.96,5.06 12.5,5 12,5C11.5,5 11.05,5.06 10.59,5.17L8.41,3L7,4.41L8.62,6C7.87,6.5 7.26,7.21 6.81,8H4V10H6.09C6.03,10.33 6,10.66 6,11V12H4V14H6V15C6,15.34 6.03,15.67 6.09,16H4V18H6.81C8.47,20.87 12.14,21.84 15,20.18C15.91,19.66 16.67,18.9 17.19,18H20V16H17.91C17.97,15.67 18,15.34 18,15V14H20V12H18V11C18,10.66 17.97,10.33 17.91,10H20V8M16,15A4,4 0 0,1 12,19A4,4 0 0,1 8,15V11A4,4 0 0,1 12,7A4,4 0 0,1 16,11V15M14,10V12H10V10H14M10,14H14V16H10V14Z
                            </Button.Content>
                            <!-- チェック付きバグマーク 
                                M18,7H15.19C14.74,6.2 14.12,5.5 13.37,5L15,3.41L13.59,2L11.42,4.17C10.96,4.06 10.5,4 10,4C9.5,4 9.05,4.06 8.59,4.17L6.41,2L5,3.41L6.62,5C5.87,5.5 5.26,6.21 4.81,7H2V9H4.09C4.03,9.33 4,9.66 4,10V11H2V13H4V14C4,14.34 4.03,14.67 4.09,15H2V17H4.81C6.26,19.5 9.28,20.61 12,19.65C12,19.43 12,19.22 12,19C12,16.46 13.61,14.2 16,13.35V13H18V11H16V10C16,9.66 15.97,9.33 15.91,9H18V7M12,15H8V13H12V15M12,11H8V9H12V11M17.75,22.16L15,19.16L16.16,18L17.75,19.59L21.34,16L22.5,17.41L17.75,22.16Z
                            -->
                        </Button>

                    </StackPanel>
                </StatusBarItem>

            </StatusBar>

            <!-- Ack window -->
            <Grid Grid.Row="1" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="3" Visibility="{Binding IsShowAckWindow, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">

                <Grid SnapsToDevicePixels="True">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="1*"/>
                        <RowDefinition Height="160" MinHeight="36"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="3*"/>
                        <ColumnDefinition Width="7*"/>
                    </Grid.ColumnDefinitions>

                    <Border Grid.Row="1" Grid.Column="1" CornerRadius="4" BorderBrush="{DynamicResource BorderDarkColorBrush}" BorderThickness="2" Margin="30" Background="{DynamicResource WindowBackgroundBaseColorBrush}">
                        <Border.Style>
                            <Style TargetType="Border">
                                <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}"/>
                                <Setter Property="Effect">
                                    <Setter.Value>
                                        <DropShadowEffect Color="{DynamicResource ShadowBoardColor}" Opacity="1" ShadowDepth="1.8" BlurRadius="5" Direction="315"/>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Border.Style>
                        <Grid SnapsToDevicePixels="True" x:Name="AckWindow" MinHeight="36">

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <TextBox x:Name="AckTextBox" Grid.Row="0" Grid.Column="0" SnapsToDevicePixels="True" Padding="6 6 24 6" Background="Transparent" Foreground="Gray" TextOptions.TextFormattingMode="Display" BorderThickness="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" TextWrapping="NoWrap" IsReadOnly="True" IsTabStop="False" Margin="0" MinHeight="36" VerticalScrollBarVisibility="Visible" HorizontalScrollBarVisibility="Auto">
                                <TextBox.Resources>
                                    <Style TargetType="{x:Type ScrollBar}">
                                        <Setter Property="SnapsToDevicePixels" Value="True" />
                                        <Setter Property="OverridesDefaultStyle" Value="true" />
                                        <Setter Property="Margin" Value="0,0,0,0" />
                                        <Setter Property="BorderThickness" Value="0" />
                                        <Style.Triggers>
                                            <Trigger Property="Orientation" Value="Vertical">
                                                <Setter Property="Width" Value="14"/>
                                                <Setter Property="Height" Value="Auto" />
                                                <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                                            </Trigger>
                                            <Trigger Property="Orientation" Value="Horizontal">
                                                <Setter Property="Width" Value="Auto"/>
                                                <Setter Property="Height" Value="14" />
                                                <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                    <Style TargetType="{x:Type ScrollViewer}">
                                        <Setter Property="OverridesDefaultStyle" Value="True" />
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                                    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition Width="*" />
                                                            <ColumnDefinition Width="Auto" />
                                                        </Grid.ColumnDefinitions>
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition Height="*" />
                                                            <RowDefinition Height="Auto" />
                                                        </Grid.RowDefinitions>
                                                        <!--
                                                    <Rectangle x:Name="Corner" Grid.Row="1" Grid.Column="1" Fill="Transparent" />
                                                    -->
                                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Row="0" Grid.Column="0" Margin="{TemplateBinding Padding}" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
                                                        <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Row="0" Grid.RowSpan="2" Grid.Column="1" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay,RelativeSource={RelativeSource TemplatedParent}}" />
                                                        <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Row="1" Grid.Column="0" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset,Mode=OneWay,RelativeSource={RelativeSource TemplatedParent}}" />
                                                    </Grid>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </TextBox.Resources>
                            </TextBox>

                            <StackPanel Grid.Row="0" Grid.Column="1">

                                <Button Style="{StaticResource PathButton}" Width="30" Height="30" HorizontalAlignment="Right" Margin="0 0 0 0" VerticalAlignment="Top" Content="M19,3H16.3H7.7H5A2,2 0 0,0 3,5V7.7V16.4V19A2,2 0 0,0 5,21H7.7H16.4H19A2,2 0 0,0 21,19V16.3V7.7V5A2,2 0 0,0 19,3M15.6,17L12,13.4L8.4,17L7,15.6L10.6,12L7,8.4L8.4,7L12,10.6L15.6,7L17,8.4L13.4,12L17,15.6L15.6,17Z" Command="{Binding ShowAckWindowCommand}"></Button>

                                <Button Style="{StaticResource PathButton}" Width="30" Height="30" HorizontalAlignment="Right" Margin="0 0 0 0" VerticalAlignment="Top" ToolTip="{x:Static properties:Resources.Ack_Window_Clear}" Content="M16.24,3.56L21.19,8.5C21.97,9.29 21.97,10.55 21.19,11.34L12,20.53C10.44,22.09 7.91,22.09 6.34,20.53L2.81,17C2.03,16.21 2.03,14.95 2.81,14.16L13.41,3.56C14.2,2.78 15.46,2.78 16.24,3.56M4.22,15.58L7.76,19.11C8.54,19.9 9.8,19.9 10.59,19.11L14.12,15.58L9.17,10.63L4.22,15.58Z" Command="{Binding ClearAckTextCommand}"></Button>

                            </StackPanel>
                        </Grid>
                    </Border>
                </Grid>
            </Grid>

            <!-- Init setting / Re-connect screen -->
            <Grid Grid.Row="1" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="3" Background="{DynamicResource BoardBackgroundColorBrush}" Visibility="{Binding IsConnectionSettingShow, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" KeyboardNavigation.TabNavigation="Cycle">
                <Grid.RowDefinitions>
                    <RowDefinition Height="0"/>
                    <RowDefinition Height="35*"/>
                    <RowDefinition Height="65*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Grid Grid.Row="1" Margin="48 0 48 32" VerticalAlignment="Bottom" HorizontalAlignment="Center">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <Viewbox Grid.Row="0" Grid.Column="0" Margin="0 0 6 36" Width="24" Height="24" VerticalAlignment="Center" HorizontalAlignment="Center">
                        <Canvas Width="24" Height="24">
                            <Path Fill="{DynamicResource ControlForegroundColorBrush}" Data="{Binding StatusButton, NotifyOnTargetUpdated=True}" >
                                <Path.Triggers>
                                    <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0.0" To="1.0" Duration="0:0:5" AutoReverse="True" RepeatBehavior="Forever">
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger>
                                </Path.Triggers>
                            </Path>
                        </Canvas>
                    </Viewbox>

                    <TextBlock Grid.Row="1" Grid.Column="0" Text="{Binding ConnectionStatusMessage, NotifyOnTargetUpdated=True}" TextElement.Foreground="{DynamicResource NormalTextColorBrush}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" TextElement.FontWeight="Bold" TextWrapping="WrapWithOverflow">
                        <TextBlock.Triggers>
                            <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </TextBlock.Triggers>
                    </TextBlock>

                </Grid>

                <StackPanel Grid.Row="2" HorizontalAlignment="Center" VerticalAlignment="top">

                    <ComboBox Style="{StaticResource ComboBoxFlatStyle}" ItemsSource="{Binding Profiles}" SelectedItem="{Binding SelectedProfile}" HorizontalAlignment="Center" Tag="{x:Static properties:Resources.Profile_NewProfile}" Visibility="{Binding IsCurrentProfileSet, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <Viewbox Width="10" Height="10" Margin="0 0 6 0">
                                        <Canvas Width="18" Height="18">
                                            <Path Data="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" Fill="DimGray" Visibility="{Binding Path=IsDefault, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}"/>
                                        </Canvas>
                                    </Viewbox>
                                    <TextBlock Text="{Binding Path=Name}"></TextBlock>
                                </StackPanel>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>

                    <TextBlock Text="{x:Static properties:Resources.Host}" Style="{DynamicResource DefaultTextBlockStyle}" Margin="0 12 0 0"></TextBlock>
                    <TextBox x:Name="NewHost_TextBox" Text="{Binding Host, ValidatesOnDataErrors=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="240" IsVisibleChanged="TextBox_IsVisibleChanged">
                        <TextBox.Style>
                            <Style TargetType="TextBox" BasedOn="{StaticResource DefaultTextBoxStyle}">
                                <Style.Triggers>
                                    <Trigger Property="Validation.HasError" Value="true">
                                        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors)/ErrorContent}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>

                    <TextBlock Text="{x:Static properties:Resources.Port}" Style="{DynamicResource DefaultTextBlockStyle}" Margin="0 12 0 0"></TextBlock>
                    <TextBox Text="{Binding Port, ValidatesOnDataErrors=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="240">
                        <TextBox.Style>
                            <Style TargetType="TextBox" BasedOn="{StaticResource DefaultTextBoxStyle}">
                                <Style.Triggers>
                                    <Trigger Property="Validation.HasError" Value="true">
                                        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors)/ErrorContent}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>

                    <TextBlock Text="{x:Static properties:Resources.Password}" Style="{DynamicResource DefaultTextBlockStyle}" Margin="0 12 0 0"></TextBlock>

                    <StackPanel Visibility="{Binding IsNotPasswordSet, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
                        <PasswordBox x:Name="PasswordBoxNew" Style="{StaticResource DefaultPasswordBoxStyle}" PasswordChar="*" Width="240"></PasswordBox>
                    </StackPanel>
                    
                    <StackPanel Visibility="{Binding IsPasswordSet, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" Orientation="Horizontal">
                        <TextBlock Text="{Binding Password}" Width="198" HorizontalAlignment="Left" VerticalAlignment="Center" Style="{DynamicResource DefaultTextBlockStyle}" Padding="1" Margin="1"></TextBlock>
                        <Button Margin="12 -14 0 0" Width="30" Height="30" Style="{DynamicResource PathButton}" Command="{Binding ShowChangePasswordDialogCommand}" CommandParameter="{Binding ElementName=PasswordBoxNew}" ToolTip="{x:Static properties:Resources.Settings_UnlockAndChangePassword}" Content="M12,17C10.89,17 10,16.1 10,15C10,13.89 10.89,13 12,13A2,2 0 0,1 14,15A2,2 0 0,1 12,17M18,20V10H6V20H18M18,8A2,2 0 0,1 20,10V20A2,2 0 0,1 18,22H6C4.89,22 4,21.1 4,20V10C4,8.89 4.89,8 6,8H7V6A5,5 0 0,1 12,1A5,5 0 0,1 17,6V8H18M12,3A3,3 0 0,0 9,6V8H15V6A3,3 0 0,0 12,3Z"></Button>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="0 12 0 0">

                        <Button Content="{x:Static properties:Resources.Connect}" IsEnabled="{Binding Path=IsNotConnectingNorConnected}" Command="{Binding ChangeConnectionProfileCommand}" CommandParameter="{Binding ElementName=PasswordBoxNew}" Padding="4" Width="100" IsDefault="True"></Button>

                    </StackPanel>

                    <!--
                    <TextBlock Text="{x:Static properties:Resources.Password}" Style="{DynamicResource DefaultTextBlockStyle}" Margin="0 12 0 0"></TextBlock>
                    <PasswordBox x:Name="PasswordBoxNew" PasswordChar="*" Style="{DynamicResource DefaultPasswordBoxStyle}" Width="240">
                    </PasswordBox>

                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0 24 0 0">
                        <Button Content="{x:Static properties:Resources.Connect}" IsDefault="True" IsEnabled="{Binding Path=IsNotConnectingNorConnected}" Command="{Binding ConnectCommand}" CommandParameter="{Binding ElementName=PasswordBoxNew}" Padding="4" Width="100"></Button>
                    </StackPanel>
                    
                    -->

                </StackPanel>

            </Grid>

            <!-- Setting screen -->
            <Grid Grid.Row="1" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="3" Visibility="{Binding IsSettingsShow, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" KeyboardNavigation.TabNavigation="Cycle">
                <Grid.RowDefinitions>
                    <RowDefinition Height="0"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <TabControl Grid.Row="1" TabStripPlacement="Left" Background="{DynamicResource WindowBackgroundColorBrush}" BorderThickness="0" Margin="0" Style="{DynamicResource SettingsTabControlStyle}">

                    <!-- Setting -->
                    <TabItem Width="100" Height="48" Style="{DynamicResource SettingsTabItemStyle}" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <TabItem.Header>
                            <Label Content="{x:Static properties:Resources.Settings}" Foreground="{Binding RelativeSource={RelativeSource AncestorType=TabItem}, Path=Foreground}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"></Label>
                        </TabItem.Header>

                        <TabControl Margin="12">
                            <TabControl.Resources>
                                <Style x:Key="LicenseTabFocusVisualStyle">
                                    <Setter Property="Control.Template">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <Rectangle Margin="1" StrokeThickness="1" StrokeDashArray="1 2" Stroke="{DynamicResource ControlMediumColorBrush}"/>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>

                                <Style TargetType="{x:Type TabControl}">
                                    <Setter Property="OverridesDefaultStyle" Value="False" />
                                    <Setter Property="Foreground" Value="{DynamicResource NormalTextColorBrush}" />
                                    <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}"/>
                                    <Setter Property="BorderThickness" Value="0"/>
                                </Style>
                                <Style x:Key="LicenseTabItemStyle" TargetType="{x:Type TabItem}">
                                    <Setter Property="OverridesDefaultStyle" Value="False" />
                                    <Setter Property="FocusVisualStyle" Value="{StaticResource LicenseTabFocusVisualStyle}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource ControlDarkColorBrush}" />
                                    <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}"/>
                                    <Setter Property="BorderThickness" Value="0 0 0 2"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type TabItem}">

                                                <Border Name="HeaderBorder" BorderThickness="0,0,0,2" Background="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Center" CornerRadius="0">
                                                    <ContentPresenter x:Name="ContentSite" HorizontalAlignment="Center" VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" />
                                                </Border>

                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsSelected" Value="True">
                                                        <Setter Property="Foreground" Value="{DynamicResource TitleTextColorBrush}" />
                                                        <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="{DynamicResource ControlLightColorBrush}" />
                                                        <Setter TargetName="HeaderBorder" Property="BorderThickness" Value="0 0 0 2"/>
                                                    </Trigger>

                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter Property="Foreground" Value="{DynamicResource TitleTextColorBrush}" />
                                                        <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="{DynamicResource ControlDarkColorBrush}" />
                                                        <Setter TargetName="HeaderBorder" Property="BorderThickness" Value="0 0 0 2"/>
                                                    </Trigger>

                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Background" Value="gray" />
                                                        <Setter Property="BorderBrush" Value="#FFC9C7BA" />
                                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </TabControl.Resources>

                            <!-- Profiles -->
                            <TabItem Style="{DynamicResource LicenseTabItemStyle}">
                                <TabItem.Header>
                                    <Label Content="{x:Static properties:Resources.Connection}" Style="{DynamicResource SectionTitle}" Padding="6" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"></Label>
                                </TabItem.Header>

                                <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" VerticalAlignment="Top" Padding="6" Style="{DynamicResource CustomScrollViewerStyle}">
                                    <Grid Margin="10">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                        </Grid.RowDefinitions>

                                        <Border Grid.Row="0" HorizontalAlignment="Stretch" BorderBrush="{DynamicResource ControlLightColorBrush}" BorderThickness="0 0 0 1">
                                            <Label Style="{DynamicResource SectionTitle}" Content="{x:Static properties:Resources.Profiles}" HorizontalAlignment="Left"/>
                                        </Border>

                                        <!-- Profiles -->
                                        <Grid Grid.Row="1" HorizontalAlignment="Left" Margin="0 0 0 0">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>

                                            <StackPanel Grid.Row="0" Grid.Column="0" HorizontalAlignment="Left">

                                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="0 12 0 0">
                                                    <TextBlock Style="{DynamicResource DefaultTextBlockStyle}" Text="{Binding SettingProfileEditMessage, NotifyOnTargetUpdated=True}">
                                                        <TextBlock.Triggers>
                                                            <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                                                <BeginStoryboard>
                                                                    <Storyboard>
                                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                                                                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                            <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="1"/>
                                                                        </DoubleAnimationUsingKeyFrames>
                                                                    </Storyboard>
                                                                </BeginStoryboard>
                                                            </EventTrigger>
                                                        </TextBlock.Triggers>
                                                    </TextBlock>
                                                </StackPanel>

                                                <StackPanel Orientation="Horizontal" Margin="0 12 0 0">
                                                    <ComboBox Style="{StaticResource ComboBoxFlatStyle}" HorizontalAlignment="Left" ItemsSource="{Binding Profiles}" SelectedItem="{Binding SelectedProfile}" Tag="{x:Static properties:Resources.Profile_NewProfile}" Width="170">
                                                        <ComboBox.ItemTemplate>
                                                            <DataTemplate>
                                                                <StackPanel Orientation="Horizontal">
                                                                    <Viewbox Width="10" Height="10" Margin="0 0 6 0">
                                                                        <Canvas Width="18" Height="18">
                                                                            <Path Data="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" Fill="{DynamicResource NormalTextColorBrush}" Visibility="{Binding Path=IsDefault, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}"/>
                                                                        </Canvas>
                                                                    </Viewbox>
                                                                    <TextBlock Text="{Binding Path=Name}"></TextBlock>
                                                                </StackPanel>
                                                            </DataTemplate>
                                                        </ComboBox.ItemTemplate>
                                                    </ComboBox>

                                                    <Button Margin="12 0 0 0" Width="30" Height="30" Style="{DynamicResource PathButton}" Content="M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M13,7H11V11H7V13H11V17H13V13H17V11H13V7Z" ToolTip="{x:Static properties:Resources.New}" Command="{Binding NewProfileCommand}"></Button>
                                                    <Button Margin="6 0 0 0" Width="30" Height="30" Style="{DynamicResource PathButton}" Content="M17,13H7V11H17M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z" ToolTip="{x:Static properties:Resources.Delete}" Command="{Binding DeleteProfileCommand}"></Button>

                                                </StackPanel>

                                                <TextBlock Text="{x:Static properties:Resources.Host}" Style="{DynamicResource DefaultTextBlockStyle}" Margin="0 12 0 3"></TextBlock>
                                                <TextBox Text="{Binding Host, ValidatesOnDataErrors=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="240">
                                                    <TextBox.Style>
                                                        <Style TargetType="TextBox" BasedOn="{StaticResource DefaultTextBoxStyle}">
                                                            <Style.Triggers>
                                                                <Trigger Property="Validation.HasError" Value="true">
                                                                    <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors)/ErrorContent}" />
                                                                </Trigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </TextBox.Style>
                                                </TextBox>

                                                <TextBlock Text="{x:Static properties:Resources.Port}" Style="{DynamicResource DefaultTextBlockStyle}" Margin="0 12 0 3"></TextBlock>
                                                <TextBox Text="{Binding Port, ValidatesOnDataErrors=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="240">
                                                    <TextBox.Style>
                                                        <Style TargetType="TextBox" BasedOn="{StaticResource DefaultTextBoxStyle}">
                                                            <Style.Triggers>
                                                                <Trigger Property="Validation.HasError" Value="true">
                                                                    <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors)/ErrorContent}" />
                                                                </Trigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </TextBox.Style>
                                                </TextBox>

                                                <TextBlock Text="{x:Static properties:Resources.Password}" Style="{DynamicResource DefaultTextBlockStyle}" Margin="0 12 0 3"></TextBlock>
                                                
                                                <StackPanel Visibility="{Binding IsNotPasswordSet, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
                                                    <PasswordBox x:Name="PasswordBox" Style="{StaticResource DefaultPasswordBoxStyle}" PasswordChar="*" Width="240"></PasswordBox>
                                                </StackPanel>
                                                
                                                <StackPanel Visibility="{Binding IsPasswordSet, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" Orientation="Horizontal">
                                                    <TextBlock Text="{Binding Password}" Width="198" HorizontalAlignment="Left" VerticalAlignment="Center" Style="{DynamicResource DefaultTextBlockStyle}" Padding="1" Margin="1 1 1 3"></TextBlock>
                                                    <Button Margin="12 -14 0 0" Width="30" Height="30" Style="{DynamicResource PathButton}" Command="{Binding ShowChangePasswordDialogCommand}" CommandParameter="{Binding ElementName=PasswordBox}" ToolTip="{x:Static properties:Resources.Settings_UnlockAndChangePassword}" Content="M12,17C10.89,17 10,16.1 10,15C10,13.89 10.89,13 12,13A2,2 0 0,1 14,15A2,2 0 0,1 12,17M18,20V10H6V20H18M18,8A2,2 0 0,1 20,10V20A2,2 0 0,1 18,22H6C4.89,22 4,21.1 4,20V10C4,8.89 4.89,8 6,8H7V6A5,5 0 0,1 12,1A5,5 0 0,1 17,6V8H18M12,3A3,3 0 0,0 9,6V8H15V6A3,3 0 0,0 12,3Z"></Button>
                                                </StackPanel>

                                                <CheckBox Content="{x:Static properties:Resources.Default}" Style="{DynamicResource DefaultCheckBoxStyle}" IsChecked="{Binding SetIsDefault}" Margin="0 12 0 3"></CheckBox>

                                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="0 12 0 0">
                                                    <Button Content="{x:Static properties:Resources.Update}" Command="{Binding UpdateProfileCommand}" CommandParameter="{Binding ElementName=PasswordBox}" Padding="4" Margin="0 0 0 0" Width="100" IsDefault="False"></Button>
                                                    <Button Content="{x:Static properties:Resources.Save}" Command="{Binding SaveProfileCommand}" CommandParameter="{Binding ElementName=PasswordBox}" Padding="4" Margin="12 0 0 0" Width="100" IsDefault="False"></Button>
                                                </StackPanel>

                                                <StackPanel Orientation="Horizontal" Margin="0 12 0 0" HorizontalAlignment="Left">
                                                    <TextBlock Width="240" Text="{Binding ConnectionStatusMessage, NotifyOnTargetUpdated=True}" TextElement.Foreground="{DynamicResource NormalTextColorBrush}" TextAlignment="Center" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" TextElement.FontWeight="Bold" TextWrapping="WrapWithOverflow">
                                                        <TextBlock.Triggers>
                                                            <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                                                <BeginStoryboard>
                                                                    <Storyboard>
                                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                                                                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                            <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="1"/>
                                                                        </DoubleAnimationUsingKeyFrames>
                                                                    </Storyboard>
                                                                </BeginStoryboard>
                                                            </EventTrigger>
                                                        </TextBlock.Triggers>
                                                    </TextBlock>
                                                </StackPanel>

                                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="0 12 0 0">

                                                    <Button Content="{x:Static properties:Resources.Connect}" IsEnabled="{Binding Path=IsNotConnecting}" Command="{Binding ChangeConnectionProfileCommand}" CommandParameter="{Binding ElementName=PasswordBox}" Padding="4" Width="100" IsDefault="False"></Button>

                                                </StackPanel>

                                            </StackPanel>


                                        </Grid>

                                    </Grid>
                                </ScrollViewer>

                            </TabItem>
                            
                            <!-- Options -->
                            <TabItem Style="{DynamicResource LicenseTabItemStyle}">
                                <TabItem.Header>
                                    <Label Content="{x:Static properties:Resources.Options}" Style="{DynamicResource SectionTitle}" Padding="6" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"></Label>
                                </TabItem.Header>

                                <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" VerticalAlignment="Top" Padding="6" Style="{DynamicResource CustomScrollViewerStyle}">
                                    <Grid Margin="10">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                        </Grid.RowDefinitions>
                                        <!-- Themes -->

                                        <Border Grid.Row="0" Margin="0 0 0 0" HorizontalAlignment="Stretch" BorderBrush="{DynamicResource ControlLightColorBrush}" BorderThickness="0 0 0 1">
                                            <Label Style="{DynamicResource SectionTitle}" Content="{x:Static properties:Resources.Settings_Opts_Themes}" HorizontalAlignment="Left"/>
                                        </Border>

                                        <Grid Grid.Row="1" HorizontalAlignment="Left" Margin="0 24 0 0">
                                            <StackPanel Orientation="Horizontal">
                                                <ComboBox x:Name="ThemeComboBox" ItemsSource="{Binding Themes}" SelectedItem="{Binding CurrentTheme}" VerticalAlignment="Center" Margin="0" Padding="4 3 4 3" Background="Transparent">
                                                    <ComboBox.ItemTemplate>
                                                        <DataTemplate>
                                                            <StackPanel Orientation="Horizontal">
                                                                <Canvas Background="Transparent" Margin="4 3 4 3" Width="12" Height="12" ToolTip="{Binding Path=Label, Mode=OneWay}">
                                                                    <Path Fill="{Binding RelativeSource={RelativeSource AncestorType=ComboBox}, Path=Foreground}" Width="12" Height="12" Stretch="Uniform" Data="{Binding Path=IconData, Mode=OneWay}" />
                                                                </Canvas>
                                                                <TextBlock Text="{Binding Path=Label, Mode=OneWay}" Margin="4 3 4 3"></TextBlock>
                                                            </StackPanel>
                                                        </DataTemplate>
                                                    </ComboBox.ItemTemplate>
                                                </ComboBox>
                                            </StackPanel>
                                        </Grid>
                                        
                                        <!-- MPD Server -->
                                        <Border Grid.Row="2" Margin="0 32 0 0" HorizontalAlignment="Stretch" BorderBrush="{DynamicResource ControlLightColorBrush}" BorderThickness="0 0 0 1">
                                            <Label Style="{DynamicResource SectionTitle}" Content="{x:Static properties:Resources.Settings_Opts_MPDDatabase}" HorizontalAlignment="Left"/>
                                        </Border>

                                        <Grid Grid.Row="3" HorizontalAlignment="Left" Margin="0 12 0 0">
                                            <CheckBox Content="{x:Static properties:Resources.Settings_Opts_UpdateDatabaseOnStartup}" Style="{DynamicResource DefaultCheckBoxStyle}" IsChecked="{Binding IsUpdateOnStartup}" Margin="0 12 0 0"></CheckBox>
                                        </Grid>

                                        <!-- Options -->
                                        <Border Grid.Row="4" Margin="0 32 0 0" HorizontalAlignment="Stretch" BorderBrush="{DynamicResource ControlLightColorBrush}" BorderThickness="0 0 0 1">
                                            <Label Style="{DynamicResource SectionTitle}" Content="{x:Static properties:Resources.Settings_Opts_Options}" HorizontalAlignment="Left"/>
                                        </Border>

                                        <Grid Grid.Row="5" HorizontalAlignment="Left" Margin="0 12 0 0">
                                            <CheckBox Content="{x:Static properties:Resources.Settings_Opts_AutoScrollToNowPlaying}" Style="{DynamicResource DefaultCheckBoxStyle}" IsChecked="{Binding IsAutoScrollToNowPlaying}" Margin="0 12 0 0"></CheckBox>
                                        </Grid>

                                        <Grid Grid.Row="6" HorizontalAlignment="Left" Margin="0 12 0 0">
                                            <CheckBox Content="{x:Static properties:Resources.Settings_Opts_EnableAlbumArt}" Style="{DynamicResource DefaultCheckBoxStyle}" IsChecked="{Binding IsDownloadAlbumArt}" Margin="0 12 0 0"></CheckBox>
                                        </Grid>
                                        
                                        <Grid Grid.Row="7" HorizontalAlignment="Left" Margin="24 12 0 0">
                                            <CheckBox Content="{x:Static properties:Resources.Settings_Opts_UseReadPicture}" IsEnabled="{Binding IsDownloadAlbumArt}" Style="{DynamicResource DefaultCheckBoxStyle}" IsChecked="{Binding IsDownloadAlbumArtEmbeddedUsingReadPicture}" Margin="0 12 0 0"></CheckBox>
                                        </Grid>


                                        <!-- Developer Mode -->
                                        <Border Grid.Row="8" Margin="0 32 0 0" HorizontalAlignment="Stretch" BorderBrush="{DynamicResource ControlLightColorBrush}" BorderThickness="0 0 0 1">
                                            <Label Style="{DynamicResource SectionTitle}" Content="{x:Static properties:Resources.DeveloperMode}" HorizontalAlignment="Left"/>
                                        </Border>

                                        <Grid Grid.Row="9" HorizontalAlignment="Left" Margin="0 12 0 0">
                                            <CheckBox Content="{x:Static properties:Resources.Settings_Opts_ShowDebugWidow}" Style="{DynamicResource DefaultCheckBoxStyle}" IsChecked="{Binding IsShowDebugWindow}" Margin="0 12 0 0"></CheckBox>
                                        </Grid>
                                        
                                        <Grid Grid.Row="10" HorizontalAlignment="Left" Margin="0 12 0 0">
                                            <CheckBox Content="{x:Static properties:Resources.Settings_Opts_SaveLog}" Style="{DynamicResource DefaultCheckBoxStyle}" IsChecked="{Binding IsSaveLog}" Margin="0 12 0 0"></CheckBox>
                                        </Grid>


                                    </Grid>
                                </ScrollViewer>

                            </TabItem>

                        </TabControl>

                    </TabItem>

                    <!-- About -->
                    <TabItem Width="100" Height="48" Style="{DynamicResource SettingsTabItemStyle}" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <TabItem.Header>
                            <Label Content="{x:Static properties:Resources.About}" Foreground="{Binding RelativeSource={RelativeSource AncestorType=TabItem}, Path=Foreground}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"></Label>
                        </TabItem.Header>

                        <TabControl Margin="12">
                            <TabControl.Resources>
                                <Style x:Key="LicenseTabFocusVisualStyle">
                                    <Setter Property="Control.Template">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <Rectangle Margin="1" StrokeThickness="1" StrokeDashArray="1 2" Stroke="{DynamicResource ControlMediumColorBrush}"/>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>

                                <Style TargetType="{x:Type TabControl}">
                                    <Setter Property="OverridesDefaultStyle" Value="False" />
                                    <Setter Property="Foreground" Value="{DynamicResource NormalTextColorBrush}" />
                                    <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}"/>
                                    <Setter Property="BorderThickness" Value="0"/>
                                </Style>
                                <Style x:Key="LicenseTabItemStyle" TargetType="{x:Type TabItem}">
                                    <Setter Property="OverridesDefaultStyle" Value="False" />
                                    <Setter Property="FocusVisualStyle" Value="{StaticResource LicenseTabFocusVisualStyle}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource ControlDarkColorBrush}" />
                                    <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}"/>
                                    <Setter Property="BorderThickness" Value="0 0 0 2"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type TabItem}">

                                                <Border Name="HeaderBorder" BorderThickness="0,0,0,2" Background="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Center" CornerRadius="0">
                                                    <ContentPresenter x:Name="ContentSite" HorizontalAlignment="Center" VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" />
                                                </Border>

                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsSelected" Value="True">
                                                        <Setter Property="Foreground" Value="{DynamicResource TitleTextColorBrush}" />
                                                        <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="{DynamicResource ControlLightColorBrush}" />
                                                        <Setter TargetName="HeaderBorder" Property="BorderThickness" Value="0 0 0 2"/>
                                                    </Trigger>

                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter Property="Foreground" Value="{DynamicResource TitleTextColorBrush}" />
                                                        <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="{DynamicResource ControlDarkColorBrush}" />
                                                        <Setter TargetName="HeaderBorder" Property="BorderThickness" Value="0 0 0 2"/>
                                                    </Trigger>

                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Background" Value="gray" />
                                                        <Setter Property="BorderBrush" Value="#FFC9C7BA" />
                                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </TabControl.Resources>
                            
                            <!-- Application -->
                            <TabItem Style="{DynamicResource LicenseTabItemStyle}">
                                <TabItem.Header>
                                    <Label Content="{x:Static properties:Resources.Application}" Style="{DynamicResource SectionTitle}" Padding="6" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"></Label>
                                </TabItem.Header>

                                <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" VerticalAlignment="Top" Padding="6" Style="{DynamicResource CustomScrollViewerStyle}">

                                    <Grid Margin="10">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                        </Grid.RowDefinitions>

                                        <!--  -->
                                        <Border Grid.Row="0" HorizontalAlignment="Stretch" BorderBrush="{DynamicResource ControlLightColorBrush}" BorderThickness="0 0 0 1">
                                            <Label Style="{DynamicResource SectionTitle}" Content="{x:Static properties:Resources.Version}" HorizontalAlignment="Left"/>
                                        </Border>

                                        <Grid Grid.Row="1" HorizontalAlignment="Left" Margin="12">
                                            <TextBlock Style="{DynamicResource DefaultTextBlockStyle}" Text="{Binding AppTitleVer}"></TextBlock>
                                        </Grid>

                                        <!--  -->
                                        <Border Grid.Row="2" HorizontalAlignment="Stretch" BorderBrush="{DynamicResource ControlLightColorBrush}" BorderThickness="0 0 0 1">
                                            <Label Style="{DynamicResource SectionTitle}" Content="{x:Static properties:Resources.Website}" HorizontalAlignment="Left"/>
                                        </Border>

                                        <Grid Grid.Row="3" HorizontalAlignment="Left" Margin="12">
                                            <TextBlock Style="{DynamicResource DefaultTextBlockStyle}">
                                                <Hyperlink NavigateUri="https://torum.github.io/MPDCtrl" RequestNavigate="Hyperlink_RequestNavigate">https://torum.github.io/MPDCtrl</Hyperlink>
                                            </TextBlock>
                                        </Grid>

                                        <!--  -->
                                        <Border Grid.Row="4" HorizontalAlignment="Stretch" BorderBrush="{DynamicResource ControlLightColorBrush}" BorderThickness="0 0 0 1">
                                            <Label Style="{DynamicResource SectionTitle}" Content="{x:Static properties:Resources.PrivacyPolicy}" HorizontalAlignment="Left"/>
                                        </Border>

                                        <Grid Grid.Row="5" HorizontalAlignment="Left" Margin="12">
                                            <TextBlock Style="{DynamicResource DefaultTextBlockStyle}" TextWrapping="Wrap" Text="{x:Static properties:Resources.PrivacyPolicyText}"></TextBlock>
                                        </Grid>

                                    </Grid>

                                </ScrollViewer>

                            </TabItem>
                            
                            <!-- License -->
                            <TabItem Style="{DynamicResource LicenseTabItemStyle}">
                                
                                <TabItem.Header>
                                    <Label Content="{x:Static properties:Resources.License}" Style="{DynamicResource SectionTitle}" Padding="6" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"></Label>
                                </TabItem.Header>

                                <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" VerticalAlignment="Top" Padding="6" Style="{DynamicResource CustomScrollViewerStyle}">

                                    <Grid Margin="10">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                        </Grid.RowDefinitions>

                                        <!-- License -->
                                        <Border Grid.Row="0" HorizontalAlignment="Stretch" BorderBrush="{DynamicResource ControlLightColorBrush}" BorderThickness="0 0 0 1">
                                            <Label Style="{DynamicResource SectionTitle}" Content="{x:Static properties:Resources.LicenseTitle}" HorizontalAlignment="Left"/>
                                        </Border>

                                        <Grid Grid.Row="1" HorizontalAlignment="Left" Margin="12">
                                            <StackPanel >
                                                <TextBlock Text="{x:Static properties:Resources.LicenseText}" TextWrapping="Wrap" Padding="6 0 6 6" Style="{DynamicResource DefaultTextBlockStyle}"></TextBlock>
                                            </StackPanel>
                                        </Grid>
                                    </Grid>
                                    
                                </ScrollViewer>

                            </TabItem>
                            
                        </TabControl>

                    </TabItem>

                </TabControl>

                <Border Grid.Row="2" Height="48" Margin="0" Background="{DynamicResource BoardBackgroundColorBrush}">
                    <Border  BorderThickness="0 1 0 0" BorderBrush="{DynamicResource ControlDarkColorBrush}">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0 12 12 12">
                            <Button Width="80" Content="{x:Static properties:Resources.Close}" Margin="0 0 32 0" Padding="3" IsDefault="False" Command="{Binding SettingsOKCommand}"></Button>
                        </StackPanel>
                    </Border>
                </Border>

            </Grid>

            <!-- Change Password screen -->
            <Grid Grid.Row="1" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="3" Visibility="{Binding IsChangePasswordDialogShow, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" KeyboardNavigation.TabNavigation="Cycle">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{DynamicResource WindowBackgroundBaseColorBrush}" Opacity="0.8"></Rectangle>

                <Border Background="{DynamicResource BoardBackgroundColorBrush}" Style="{DynamicResource BoardStyle}" HorizontalAlignment="Center" VerticalAlignment="Center">

                    <Grid Width="300" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <Border Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3" HorizontalAlignment="Stretch" BorderBrush="{DynamicResource ControlLightColorBrush}" BorderThickness="0 0 0 1">
                            <Label Style="{DynamicResource SectionTitle}" Content="{x:Static properties:Resources.ChangePasswordDialog_ChangePassword}" HorizontalAlignment="Left"/>
                        </Border>
                        
                        <StackPanel Grid.Row="1" Grid.Column="1" Margin="12" Width="250">
                            <TextBlock Text="{Binding ChangePasswordDialogMessage, NotifyOnTargetUpdated=True}" TextWrapping="Wrap" Style="{DynamicResource DefaultTextBlockStyle}" Margin="5 0 0 0">
                                <TextBlock.Triggers>
                                    <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="1"/>
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger>
                                </TextBlock.Triggers>
                            </TextBlock>

                            <TextBlock Text="{x:Static properties:Resources.ChangePasswordDialog_CurrentPassword}" Style="{DynamicResource DefaultTextBlockStyle}" Margin="5 12 0 6"></TextBlock>
                            <PasswordBox x:Name="ChangeOldPasswordBox" Width="250" IsVisibleChanged="PasswordBox_IsVisibleChanged" Style="{DynamicResource DefaultPasswordBoxStyle}"></PasswordBox>

                            <TextBlock Text="{x:Static properties:Resources.ChangePasswordDialog_NewPassword}" Style="{DynamicResource DefaultTextBlockStyle}" Margin="5 12 0 6"></TextBlock>
                            <PasswordBox x:Name="ChangeNewPasswordBox" Width="250" Style="{DynamicResource DefaultPasswordBoxStyle}"></PasswordBox>

                        </StackPanel>
                        <StackPanel Grid.Row="2" Grid.Column="1" Margin="12 12 12 24">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0 12 0 0">
                                <Button Width="80" Content="{x:Static properties:Resources.OK}" Margin="15 0 15 0" Padding="3" IsDefault="True" Command="{Binding ChangePasswordDialogOKCommand}">
                                    <Button.CommandParameter>
                                        <MultiBinding Converter="{StaticResource MultipleCommandParameterConverter}">
                                            <Binding ElementName="ChangeOldPasswordBox" />
                                            <Binding ElementName="ChangeNewPasswordBox" />
                                        </MultiBinding>
                                    </Button.CommandParameter>
                                </Button>
                                <Button Width="80" Content="{x:Static properties:Resources.Cancel}" Margin="15 0 15 0" Padding="3" IsDefault="False" Command="{Binding ChangePasswordDialogCancelCommand}"></Button>
                            </StackPanel>
                        </StackPanel>

                    </Grid>

                </Border>
            </Grid>

        </Grid>
    </Border>
</Window>
