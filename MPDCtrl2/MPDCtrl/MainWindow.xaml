<Window x:Class="MPDCtrl.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:properties="clr-namespace:MPDCtrl.Properties"
        xmlns:local="clr-namespace:MPDCtrl"
        mc:Ignorable="d"
        WindowStyle="None"
        Background="{DynamicResource WindowBackgroundBaseColorBrush}"
        StateChanged="Window_StateChanged"
        DataContext="{StaticResource MainViewModel}"
        Title="{Binding AppTitle}"
        Height="480" Width="800"
        MinWidth="300">
    <WindowChrome.WindowChrome>
        <WindowChrome CaptionHeight="30" ResizeBorderThickness="{x:Static SystemParameters.WindowResizeBorderThickness}"/>
    </WindowChrome.WindowChrome>
    <Window.InputBindings>
        <KeyBinding Command="{Binding PlayCommand}"
                            Key="Play" />
        <KeyBinding Command="{Binding PlayCommand}"
                            Key="MediaPlayPause" />
        <KeyBinding Command="{Binding PlayNextCommand}"
                            Key="MediaNextTrack" />
        <KeyBinding Command="{Binding PlayPrevCommand}"
                            Key="MediaPreviousTrack" />
        <KeyBinding Command="{Binding PlayCommand}"
                            Key="MediaStop" />
        <KeyBinding Command="{Binding VolumeMuteCommand}"
                            Key="VolumeMute" />
        <KeyBinding Command="{Binding VolumeDownCommand}"
                            Key="VolumeDown" />
        <KeyBinding Command="{Binding VolumeUpCommand}"
                            Key="VolumeUp" />
    </Window.InputBindings>
    <Border Style="{StaticResource WindowMainPanelStyle}">
        <Grid Background="{DynamicResource BoardBackgroundColorBrush}">
            <Grid.RowDefinitions>
                <RowDefinition Height="27"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <!-- アプリタイトルバー -->
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="27"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="auto"/>
                </Grid.ColumnDefinitions>

                <!-- App icon -->
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                    <Button ToolTip="{Binding AppTitle}" IsHitTestVisible="True" WindowChrome.IsHitTestVisibleInChrome="True">
                        <Button.Style>
                            <Style TargetType="{x:Type Button}">
                                <Setter Property="OverridesDefaultStyle" Value="true" />
                                <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}" />
                                <Setter Property="Foreground" Value="{DynamicResource ControlForegroundColorBrush}"/>
                                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                                <Setter Property="BorderThickness" Value="0" />
                                <Setter Property="Margin" Value="0" />
                                <Setter Property="Padding" Value="0" />
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="Button">
                                            <Border x:Name="Border" CornerRadius="0" BorderThickness="0">
                                                <Viewbox Width="16" Height="16" Margin="6 0 6 0" IsHitTestVisible="True">
                                                    <Canvas Width="101.52757" Height="101.52314">
                                                        <Canvas.RenderTransform>
                                                            <TranslateTransform X="0" Y="0"/>
                                                        </Canvas.RenderTransform>
                                                        <Canvas Name="layer1">
                                                            <Canvas.RenderTransform>
                                                                <TranslateTransform X="-2.8648005" Y="-194.52514"/>
                                                            </Canvas.RenderTransform>
                                                            <Path Fill="{DynamicResource ControlForegroundColorBrush}" Data="M 53.823864 196.04415 C 21.886528 194.83142 -3.7832653 229.72314 6.7745021 259.84651 15.060196 290.6957 55.964235 304.96229 81.631867 285.93948 108.66537 268.90685 110.19826 225.61676 84.437146 206.71473 75.820617 199.84108 64.844621 196.0167 53.823864 196.04415 Z m 0 9.84942 c 18.184368 -0.34132 35.234253 13.61727 38.596795 31.47035 3.761965 16.86267 -5.208339 35.37926 -20.678288 43.01021 -15.289342 8.1535 -35.646071 4.41591 -47.068046 -8.60652 -12.118898 -12.84888 -13.65815 -34.02695 -3.509928 -48.48554 7.159606 -10.73064 19.738995 -17.49358 32.659467 -17.3885 z m -9.850044 17.2371 c 0 14.77475 0 29.5495 0 44.32425 9.849834 -7.38748 19.699667 -14.77496 29.549501 -22.16244 -9.849834 -7.38727 -19.699667 -14.77454 -29.549501 -22.16181 z"/>
                                                        </Canvas>
                                                    </Canvas>
                                                </Viewbox>
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Button.Style>
                    </Button>

                </StackPanel>

                <!-- Now Playing -->
                <StackPanel Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="80 0 0 0" Visibility="{Binding IsConnected, Converter={StaticResource BoolToVisibilityCollapsedConverter}}">
                    <TextBlock Style="{StaticResource DefaultTextBlockStyle}">
                        <TextBlock.Triggers>
                            <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0.1" To="1.0" Duration="0:0:2">
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </TextBlock.Triggers>
                            <Run x:Name="CurrentSongTitle" Foreground="{DynamicResource ControlLightColorBrush}" FontWeight="DemiBold" Text="{Binding CurrentSongTitle, NotifyOnTargetUpdated=True, Mode=OneWay}" Style="{DynamicResource DefaultRunStyle}"/>
                            <Run Text=" - ">
                                 <Run.Style>
                                     <Style>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=CurrentSongArtist}" Value="">
                                                <Setter Property="Control.Foreground" Value="Transparent" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Run.Style>
                            </Run>
                            <Run x:Name="CurrentSongArtist" Foreground="{DynamicResource ControlMediumColorBrush}" Text="{Binding CurrentSongArtist, NotifyOnTargetUpdated=True, Mode=OneWay}" Style="{DynamicResource DefaultRunStyle}" />
                    </TextBlock>
                </StackPanel>

                <!-- Sys icons -->
                <StackPanel Orientation="Horizontal" Grid.Column="2" HorizontalAlignment="Right" Margin="0">

                    <Button x:Name="SettingsButton" Style="{DynamicResource PathButton}" Width="27" Height="27" Margin="0" Opacity="0.7" Command="{Binding ShowSettingsCommand}" ToolTip="(Ctrl+S)" WindowChrome.IsHitTestVisibleInChrome="True"
                                Content="M12,15.5A3.5,3.5 0 0,1 8.5,12A3.5,3.5 0 0,1 12,
8.5A3.5,3.5 0 0,1 15.5,12A3.5,3.5 0 0,1 12,15.5M19.43,12.97C19.47,12.65 19.5,12.33 19.5,12C19.5,
11.67 19.47,11.34 19.43,11L21.54,9.37C21.73,9.22 21.78,8.95 21.66,8.73L19.66,5.27C19.54,5.05 19.27,
4.96 19.05,5.05L16.56,6.05C16.04,5.66 15.5,5.32 14.87,5.07L14.5,2.42C14.46,2.18 14.25,2 14,2H10C9.75,
2 9.54,2.18 9.5,2.42L9.13,5.07C8.5,5.32 7.96,5.66 7.44,6.05L4.95,5.05C4.73,4.96 4.46,5.05 4.34,
5.27L2.34,8.73C2.21,8.95 2.27,9.22 2.46,9.37L4.57,11C4.53,11.34 4.5,11.67 4.5,12C4.5,12.33 4.53,
12.65 4.57,12.97L2.46,14.63C2.27,14.78 2.21,15.05 2.34,15.27L4.34,18.73C4.46,18.95 4.73,19.03 4.95,
18.95L7.44,17.94C7.96,18.34 8.5,18.68 9.13,18.93L9.5,21.58C9.54,21.82 9.75,22 10,22H14C14.25,22 14.46,
21.82 14.5,21.58L14.87,18.93C15.5,18.67 16.04,18.34 16.56,17.94L19.05,18.95C19.27,19.03 19.54,
18.95 19.66,18.73L21.66,15.27C21.78,15.05 21.73,14.78 21.54,14.63L19.43,12.97Z">
                    </Button>

                    <Button x:Name="MinimizeButton" Style="{StaticResource PathButton}" Width="27" Height="27" Margin="0" Opacity="0.7" Click="MinimizeButton_Click" WindowChrome.IsHitTestVisibleInChrome="True">
                        M20,14H4V10H20
                    </Button>

                    <Button x:Name="RestoreButton" Style="{StaticResource PathButton}" Width="27" Height="27" Margin="0" Opacity="0.7" Click="RestoreButton_Click" WindowChrome.IsHitTestVisibleInChrome="True">
                        M4,8H8V4H20V16H16V20H4V8M16,8V14H18V6H10V8H16M6,12V18H14V12H6Z
                    </Button>

                    <Button x:Name="MaxButton" Style="{StaticResource PathButton}" Width="27" Height="27" Margin="0" Opacity="0.7" Click="MaxButton_Click" WindowChrome.IsHitTestVisibleInChrome="True">
                        M4,4H20V20H4V4M6,8V18H18V8H6Z
                    </Button>

                    <Button x:Name="CloseButton" Style="{StaticResource PathButton}" Width="27" Height="27" Margin="0" Opacity="0.7" Click="CloseButton_Click" WindowChrome.IsHitTestVisibleInChrome="True">
                        M13.46,12L19,17.54V19H17.54L12,13.46L6.46,19H5V17.54L10.54,12L5,6.46V5H6.46L12,10.54L17.54,5H19V6.46L13.46,12Z
                    </Button>

                </StackPanel>

            </Grid>

            <!-- 接続中画面の背景（起動時に、設定されているホストに接続を試行している時に一瞬表示される。） -->
            <Grid Grid.Row="1">
                <Viewbox Grid.Row="0" Grid.Column="0" Margin="0 0 6 0" Width="32" Height="32" VerticalAlignment="Center" HorizontalAlignment="Center">
                    <Canvas Width="24" Height="24">
                        <Path Fill="{DynamicResource ControlForegroundColorBrush}" Data="{Binding StatusButton, NotifyOnTargetUpdated=True}" >
                            <Path.Triggers>
                                <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0.0" To="1.0" Duration="0:0:2" AutoReverse="True" RepeatBehavior="Forever">
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </Path.Triggers>
                        </Path>
                    </Canvas>
                </Viewbox>
            </Grid>

            <!-- メイン画面 -->
            <Grid Grid.Row="1" Visibility="{Binding IsMainShow, Converter={StaticResource BoolToVisibilityCollapsedConverter}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="0"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <!-- Header grid -->
                <Grid Grid.Row="1">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="8"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="8"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <!-- Album cover TODO: -->
                    <Grid Grid.Row="1" Grid.Column="0" Visibility="Collapsed">
                        <StackPanel Margin="18 3 3 3">
                            <TextBlock Text="{Binding CurrentSongArtist}" Style="{StaticResource DefaultTextBlockStyle}"></TextBlock>
                            <Label Content="{Binding CurrentSongTitle}" Style="{StaticResource SectionTitle}"></Label>
                        </StackPanel>
                    </Grid>


                    <!-- Playback Controls -->
                    <Grid Grid.Row="1" Grid.Column="1">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <!-- Playback Buttons -->
                        <Grid Grid.Row="0" Grid.Column="1" Width="280">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <Button x:Name="BackButton" Grid.Column="0" HorizontalAlignment="Center" Height="42" Width="42" Background="Transparent" Foreground="White" Content="M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M8,8H10V16H8M16,8V16L11,12" Style="{StaticResource PathButton}" Command="{Binding PlayPrevCommand}" >
                            </Button>
                            <Button x:Name="PlayButton" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Height="62" Width="62" Background="Transparent" Foreground="White" Style="{StaticResource PathButton}" Command="{Binding PlayCommand}" Content="{Binding PlayButton}">
                            </Button>
                            <Button x:Name="NextButton" Grid.Column="2" HorizontalAlignment="Center" Height="42" Width="42" Background="Transparent" Foreground="White" Content="M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M8,8L13,12L8,16M14,8H16V16H14" Style="{StaticResource PathButton}" Command="{Binding PlayNextCommand}" >
                            </Button>

                        </Grid>

                        <!-- Slider Seek -->
                        <Grid Grid.Row="1" Grid.ColumnSpan="3" Width="450">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="24"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="24"/>
                            </Grid.ColumnDefinitions>

                            <Slider x:Name="SliderSeek" Grid.Column="1" VerticalAlignment="Center" Margin="6 0 6 0" Foreground="Gray" Background="Transparent" IsMoveToPointEnabled="True" Minimum="1" Maximum="{Binding Mode=TwoWay,Path=Time}" Value="{Binding Mode=TwoWay,Path=Elapsed}">
                            </Slider>

                        </Grid>

                    </Grid>

                    <!-- Playback Options and Volume -->
                    <Grid Grid.Row="1" Grid.Column="2">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <StackPanel Orientation="Horizontal" Grid.Column="0" VerticalAlignment="Bottom">
                            <ToggleButton x:Name="RepeatButton" IsChecked="{Binding Mode=TwoWay,Path=Repeat}" Template="{StaticResource PathToggleButton}" Width="16" Height="16" Padding="0" Margin="4" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="White" 
                                  Content="M17,17H7V14L3,18L7,22V19H19V13H17M7,7H17V10L21,6L17,2V5H5V11H7V7Z">
                            </ToggleButton>
                            <ToggleButton x:Name="ShuffleButton" IsChecked="{Binding Mode=TwoWay,Path=Random}" Template="{StaticResource PathToggleButton}" Width="16" Height="16" Padding="0" Margin="4" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="White"
                                  Content="M17,3L22.25,7.5L17,12L22.25,16.5L17,21V18H14.26L11.44,15.18L13.56,13.06L15.5,15H17V12L17,9H15.5L6.5,18H2V15H5.26L14.26,6H17V3M2,6H6.5L9.32,8.82L7.2,10.94L5.26,9H2V6Z">
                            </ToggleButton>
                        </StackPanel>

                        <Slider x:Name="SliderVol" Grid.Column="1" Orientation="Vertical" HorizontalAlignment="Right" IsMoveToPointEnabled="True" Margin="0 0 18 0" Foreground="Gainsboro" Maximum="100" Value="{Binding Volume}">
                        </Slider>
                    </Grid>

                </Grid>

                <!-- Songs -->
                <Grid Grid.Row="2" Margin="0 8 0 0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="300"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <!-- Libraries -->
                    <Grid Grid.Row="0" Grid.Column="0" Background="{DynamicResource WindowBackgroundBaseColorBrush}">

                        <TabControl Style="{StaticResource NoChromeTabControl}" Margin="0 1 0 0" Background="{DynamicResource BoardBackgroundColorBrush}">
                            <!-- Playlists -->
                            <TabItem Header="Playlists" Width="120" Style="{StaticResource NoChromeTabHeader}">

                                <ListView x:Name="PlaylistListview" ItemsSource="{Binding Playlists}" SelectedItem="{Binding SelectedPlaylist}" SelectionMode="Single" Background="Transparent" IsSynchronizedWithCurrentItem="True" BorderThickness="0" Padding="0" Margin="0" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto">
                                    <ListView.InputBindings>
                                        <KeyBinding Key="Return" Command="{Binding Path=DataContext.PlaylistListviewEnterKeyCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}"
                                                                 CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" />
                                    </ListView.InputBindings>
                                    <ListView.Resources>
                                        <ContextMenu x:Key="PlaylistItemContextMenu">
                                            <!--
                                                <MenuItem Header="Load" 
                                                        Command="{Binding Path=DataContext.PlaylistListviewLoadPlaylistCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" 
                                                        CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                                </MenuItem>
                                                -->
                                            <MenuItem Header="Add to queue" 
                                                        Command="{Binding Path=DataContext.PlaylistListviewAddPlaylistCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" 
                                                        CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                            </MenuItem>
                                            <Separator />
                                        </ContextMenu>
                                        <Style TargetType="{x:Type ScrollBar}">
                                            <Setter Property="Margin" Value="0,0,0,0" />
                                            <Setter Property="BorderThickness" Value="0" />
                                            <Style.Triggers>
                                                <Trigger Property="Orientation" Value="Vertical">
                                                    <Setter Property="Width" Value="18"/>
                                                    <Setter Property="Height" Value="Auto" />
                                                    <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ListView.Resources>
                                    <ListView.View>
                                        <GridView>
                                            <GridView.ColumnHeaderContainerStyle>
                                                <Style TargetType="GridViewColumnHeader" BasedOn="{StaticResource GridViewColumnHeaderStyle}">
                                                    <Setter Property="Visibility" Value="Collapsed" />
                                                </Style>
                                            </GridView.ColumnHeaderContainerStyle>
                                            <GridViewColumn Header="Playlists">
                                                <GridViewColumn.CellTemplate>
                                                    <DataTemplate>
                                                        <StackPanel HorizontalAlignment="Left">
                                                            <TextBlock Text="{Binding }" Padding="3" />
                                                        </StackPanel>
                                                    </DataTemplate>
                                                </GridViewColumn.CellTemplate>
                                            </GridViewColumn>
                                        </GridView>
                                    </ListView.View>
                                    <ListView.ItemContainerStyle>
                                        <Style TargetType="ListViewItem" BasedOn="{StaticResource ListViewItemStyle}">
                                            <Setter Property="ContextMenu" Value="{StaticResource PlaylistItemContextMenu}" />
                                            <Setter Property="Margin" Value="0 0 0 0"/>
                                            <Setter Property="Padding" Value="0 1 0 1"/>
                                            <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                                                        <Border Name="Border" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="{TemplateBinding ClipToBounds}" CornerRadius="0" SnapsToDevicePixels="true">
                                                            <Border.InputBindings>
                                                                <MouseBinding Command="{Binding Path=DataContext.PlaylistListviewLeftDoubleClickCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" Gesture="LeftDoubleClick" />
                                                            </Border.InputBindings>

                                                            <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ListView.ItemContainerStyle>
                                </ListView>

                            </TabItem>

                            <!-- Local files -->
                            <TabItem Header="Local Files" Width="120" Style="{StaticResource NoChromeTabHeader}">

                                <ListView x:Name="LocalfileListview" ItemsSource="{Binding Localfiles}" SelectedItem="{Binding SelectedLocalfile}" Background="Transparent" IsSynchronizedWithCurrentItem="True" BorderThickness="0" Padding="0" Margin="0" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto">
                                    <ListView.Resources>
                                        <ContextMenu x:Key="LocalfileItemContextMenu">
                                            <MenuItem Header="Selected Items">
                                                <MenuItem Header="Add to the queue" 
                                                        Command="{Binding Path=DataContext.LocalfileListviewAddCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" 
                                                        CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                                </MenuItem>
                                            </MenuItem>
                                            <Separator />
                                            <!--
                                            <MenuItem Header="Reload" 
                                                        Command="{Binding Path=DataContext.AutoTradeDeleteItemListviewCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}"
                                                        CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                                <MenuItem.Resources>
                                                    <ControlTemplate x:Key="CancelIcon">
                                                        <Canvas Background="Transparent" >
                                                            <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2M12,4A8,8 0 0,0 4,12C4,13.85 4.63,15.55 5.68,16.91L16.91,5.68C15.55,4.63 13.85,4 12,4M12,20A8,8 0 0,0 20,12C20,10.15 19.37,8.45 18.32,7.09L7.09,18.32C8.45,19.37 10.15,20 12,20Z" />
                                                        </Canvas>
                                                    </ControlTemplate>
                                                </MenuItem.Resources>
                                                <MenuItem.Icon>
                                                    <ContentControl Template="{StaticResource CancelIcon}" />
                                                </MenuItem.Icon>
                                                
                                            </MenuItem>
                                            -->
                                        </ContextMenu>
                                        <Style TargetType="{x:Type ScrollBar}">
                                            <Setter Property="Margin" Value="0,0,0,0" />
                                            <Setter Property="BorderThickness" Value="0" />
                                            <Style.Triggers>
                                                <Trigger Property="Orientation" Value="Vertical">
                                                    <Setter Property="Width" Value="18"/>
                                                    <Setter Property="Height" Value="Auto" />
                                                    <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ListView.Resources>
                                    <ListView.View>
                                        <GridView>
                                            <GridView.ColumnHeaderContainerStyle>
                                                <Style TargetType="GridViewColumnHeader" BasedOn="{StaticResource GridViewColumnHeaderStyle}">
                                                    <Setter Property="Visibility" Value="Collapsed" />
                                                </Style>
                                            </GridView.ColumnHeaderContainerStyle>
                                            <GridViewColumn Header="Files">
                                                <GridViewColumn.CellTemplate>
                                                    <DataTemplate>
                                                        <StackPanel HorizontalAlignment="Left">
                                                            <TextBlock Text="{Binding }" Padding="3" />
                                                        </StackPanel>
                                                    </DataTemplate>
                                                </GridViewColumn.CellTemplate>
                                            </GridViewColumn>
                                        </GridView>
                                    </ListView.View>
                                    <ListView.ItemContainerStyle>
                                        <Style TargetType="ListViewItem" BasedOn="{StaticResource ListViewItemStyle}">
                                            <Setter Property="ContextMenu" Value="{StaticResource LocalfileItemContextMenu}" />
                                            <Setter Property="Margin" Value="0 0 0 0"/>
                                            <Setter Property="Padding" Value="0 1 0 1"/>
                                            <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                                                        <Border Name="Border" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="{TemplateBinding ClipToBounds}" CornerRadius="0" SnapsToDevicePixels="true">
                                                            <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ListView.ItemContainerStyle>
                                </ListView>

                            </TabItem>

                        </TabControl>

                    </Grid>

                    <!-- GridSplitter -->
                    <GridSplitter Grid.Row="0" Grid.Column="1" ResizeDirection="Columns" Style="{StaticResource GridSplitterStyle}">
                    </GridSplitter>

                    <!-- Queue -->
                    <Grid Grid.Row="0" Grid.Column="2">
                        <Grid x:Name="AT2Dummy" Grid.Row="0" Grid.Column="2" Visibility="Hidden" Margin="0 0 0 0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="0" />
                                <ColumnDefinition Width="9*"/>
                                <ColumnDefinition Width="9*"/>
                            </Grid.ColumnDefinitions>

                            <!--  This is the hidden helper Field which is used to bind to, using the "Fill" column of the helper grid  -->
                            <Grid x:Name="AT2Width0" Grid.Column="0" />
                            <Grid x:Name="AT2Width1" Grid.Column="1" />
                            <Grid x:Name="AT2Width2" Grid.Column="2" />
                        </Grid>

                        <ListView x:Name="SongListView" ItemsSource="{Binding Queue}" SelectedItem="{Binding Path=SelectedSong, Mode=TwoWay}" SelectionMode="Extended" Background="{DynamicResource WindowBackgroundBaseColorBrush}" IsSynchronizedWithCurrentItem="True" BorderThickness="0" Padding="0" Margin="0" SelectionChanged="SongListView_SelectionChanged" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto">
                            <ListView.InputBindings>
                                <KeyBinding Key="Return" Command="{Binding Path=DataContext.SongListViewEnterKeyCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" />
                            </ListView.InputBindings>
                            <ListView.Resources>
                                <ContextMenu x:Key="SongItemContextMenu">
                                    <MenuItem Header="Selected Items">
                                        <MenuItem Header="Delete from queue" Command="{Binding Path=DataContext.SongListviewDeleteCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                        </MenuItem>
                                    </MenuItem>
                                    <Separator />
                                    <MenuItem Header="Clear queue" Command="{Binding Path=DataContext.SongListviewClearCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                    </MenuItem>
                                    <!--
                                            <MenuItem Header="Reload" 
                                                        Command="{Binding Path=DataContext.AutoTradeDeleteItemListviewCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}"
                                                        CommandParameter="{Binding Path=SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}">
                                                <MenuItem.Resources>
                                                    <ControlTemplate x:Key="CancelIcon">
                                                        <Canvas Background="Transparent" >
                                                            <Path Fill="#373737" Width="14.3775" Height="14" Canvas.Left="0.311264" Canvas.Top="0.500005" Stretch="Uniform" Data="M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2M12,4A8,8 0 0,0 4,12C4,13.85 4.63,15.55 5.68,16.91L16.91,5.68C15.55,4.63 13.85,4 12,4M12,20A8,8 0 0,0 20,12C20,10.15 19.37,8.45 18.32,7.09L7.09,18.32C8.45,19.37 10.15,20 12,20Z" />
                                                        </Canvas>
                                                    </ControlTemplate>
                                                </MenuItem.Resources>
                                                <MenuItem.Icon>
                                                    <ContentControl Template="{StaticResource CancelIcon}" />
                                                </MenuItem.Icon>
                                                
                                            </MenuItem>
                                            -->
                                </ContextMenu>
                                <Style TargetType="{x:Type ScrollBar}">
                                    <Setter Property="Margin" Value="0,0,0,0" />
                                    <Setter Property="BorderThickness" Value="0" />
                                    <Style.Triggers>
                                        <Trigger Property="Orientation" Value="Vertical">
                                            <Setter Property="Width" Value="18"/>
                                            <Setter Property="Height" Value="Auto" />
                                            <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </ListView.Resources>
                            <ListView.View>
                                <GridView>
                                    <GridView.ColumnHeaderContainerStyle>
                                        <Style TargetType="GridViewColumnHeader" BasedOn="{StaticResource GridViewColumnHeaderStyle}">
                                            <Setter Property="Visibility" Value="Visible" />
                                        </Style>
                                    </GridView.ColumnHeaderContainerStyle>
                                    <GridViewColumn Header="ID" Width="{Binding ElementName=AT2Width0, Path=ActualWidth}">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <StackPanel HorizontalAlignment="Left">
                                                    <TextBlock Text="{Binding Path=ID}" Padding="3" />
                                                </StackPanel>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Header="Song" Width="{Binding ElementName=AT2Width1, Path=ActualWidth}">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <StackPanel HorizontalAlignment="Left">
                                                    <TextBlock Text="{Binding Path=Title}" Padding="3" />
                                                </StackPanel>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Header="Artist" Width="{Binding ElementName=AT2Width2, Path=ActualWidth}">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <StackPanel HorizontalAlignment="Left">
                                                    <TextBlock Text="{Binding Path=Artist}" Padding="3" />
                                                </StackPanel>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                </GridView>
                            </ListView.View>
                            <ListView.ItemContainerStyle>
                                <Style TargetType="ListViewItem" BasedOn="{StaticResource ListViewItemStyle}">
                                    <Setter Property="ContextMenu" Value="{StaticResource SongItemContextMenu}" />
                                    <Setter Property="Margin" Value="0 0 0 0"/>
                                    <Setter Property="Padding" Value="0 1 0 1"/>
                                    <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ListViewItem}">
                                                <Border Name="Border" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="{TemplateBinding ClipToBounds}" CornerRadius="0" SnapsToDevicePixels="true">
                                                    <Border.InputBindings>
                                                        <MouseBinding Command="{Binding Path=DataContext.SongListViewLeftDoubleClickCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}" Gesture="LeftDoubleClick" />
                                                    </Border.InputBindings>
                                                    <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                </Border>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ListView.ItemContainerStyle>
                        </ListView>

                    </Grid>

                </Grid>


                <!-- Status -->
                <StatusBar Grid.Row="5" Background="Transparent" VerticalAlignment="Center">
                    <Viewbox Width="16" Height="16">
                        <Canvas Width="24" Height="24">
                            <Path Fill="{DynamicResource ControlForegroundColorBrush}" Data="{Binding StatusButton}" />
                        </Canvas>
                    </Viewbox>
                    <Label Content="{Binding StatusMessage}" Style="{DynamicResource DefaultLabelStyle}" VerticalAlignment="Center" Margin="0" Padding="0"></Label>
                </StatusBar>

            </Grid>

            <!-- 初期設定画面 -->
            <Grid Grid.Row="1" Background="{DynamicResource BoardBackgroundColorBrush}" Visibility="{Binding IsConnectionSettingShow, Converter={StaticResource BoolToVisibilityCollapsedConverter}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="0"/>
                    <RowDefinition Height="35*"/>
                    <RowDefinition Height="65*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Grid Grid.Row="1" Margin="48 0 48 32" VerticalAlignment="Bottom" HorizontalAlignment="Center">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <Viewbox Grid.Row="0" Grid.Column="0" Margin="0 0 6 36" Width="32" Height="32" VerticalAlignment="Center" HorizontalAlignment="Center">
                        <Canvas Width="24" Height="24">
                            <Path Fill="{DynamicResource ControlForegroundColorBrush}" Data="{Binding StatusButton, NotifyOnTargetUpdated=True}" >
                                <Path.Triggers>
                                    <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0.0" To="1.0" Duration="0:0:5" AutoReverse="True" RepeatBehavior="Forever">
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger>
                                </Path.Triggers>
                            </Path>
                        </Canvas>
                    </Viewbox>

                    <TextBlock Grid.Row="1" Grid.Column="0" Text="{Binding StatusMessage, NotifyOnTargetUpdated=True}" TextElement.Foreground="WhiteSmoke" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" TextElement.FontWeight="Bold" TextWrapping="WrapWithOverflow">
                        <TextBlock.Triggers>
                            <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </TextBlock.Triggers>
                    </TextBlock>

                </Grid>

                <StackPanel Grid.Row="2" HorizontalAlignment="Center" VerticalAlignment="top">

                    <ComboBox Style="{StaticResource ComboBoxFlatStyle}" ItemsSource="{Binding Profiles}" SelectedItem="{Binding CurrentProfile}" Tag="New Profile">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <Viewbox Width="10" Height="10" Margin="0 0 6 0">
                                        <Canvas Width="18" Height="18">
                                            <Path Data="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" Fill="DimGray" Visibility="{Binding Path=IsDefault, Converter={StaticResource BoolToVisibilityCollapsedConverter}}"/>
                                        </Canvas>
                                    </Viewbox>
                                    <TextBlock Text="{Binding Path=Name}"></TextBlock>
                                </StackPanel>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>


                    <TextBlock Text="{x:Static properties:Resources.Host}" TextElement.Foreground="White"></TextBlock>
                    <TextBox x:Name="NewHost_TextBox" Text="{Binding Host, ValidatesOnDataErrors=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="240" IsVisibleChanged="TextBox_IsVisibleChanged">
                        <TextBox.Style>
                            <Style TargetType="TextBox">
                                <Style.Triggers>
                                    <Trigger Property="Validation.HasError" Value="true">
                                        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors)/ErrorContent}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>

                    <TextBlock Text="{x:Static properties:Resources.Port}" TextElement.Foreground="White" Margin="0 12 0 0"></TextBlock>
                    <TextBox Text="{Binding Port, ValidatesOnDataErrors=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="240">
                        <TextBox.Style>
                            <Style TargetType="TextBox">
                                <Style.Triggers>
                                    <Trigger Property="Validation.HasError" Value="true">
                                        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors)/ErrorContent}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>


                    <TextBlock Text="{x:Static properties:Resources.Password}" TextElement.Foreground="White" Margin="0 12 0 0"></TextBlock>
                    <PasswordBox x:Name="PasswordBoxNew" PasswordChar="*" Tag="{Binding Password}" Width="240" ToolTip="{x:Static properties:Resources.Optional}" PasswordChanged="PasswordBoxNew_PasswordChanged">
                        <PasswordBox.Style>
                            <Style TargetType="{x:Type PasswordBox}">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type PasswordBox}">
                                            <Grid Background="{TemplateBinding Background}">
                                                <ScrollViewer x:Name="PART_ContentHost"/>
                                                <TextBlock x:Name="UserMessage"
                                                                   Margin="5,0,5,0"
                                                                   Text="{Binding Password}" 
                                                                   IsHitTestVisible="False"
                                                                   HorizontalAlignment="Left"
                                                                   VerticalAlignment="Center"
                                                                   Visibility="Visible"/>
                                            </Grid>
                                            <ControlTemplate.Triggers>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="Tag" Value=""/>
                                                    </MultiTrigger.Conditions>
                                                    <Setter Property="Visibility" TargetName="UserMessage" Value="Hidden"/>
                                                    <Setter Property="Text" TargetName="UserMessage" Value=""/>
                                                </MultiTrigger>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="IsKeyboardFocusWithin" Value="true"/>
                                                    </MultiTrigger.Conditions>
                                                    <Setter Property="Visibility" TargetName="UserMessage" Value="Hidden"/>
                                                    <Setter Property="Text" TargetName="UserMessage" Value=""/>
                                                </MultiTrigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </PasswordBox.Style>
                    </PasswordBox>

                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0 24 0 0">
                        <Button Content="{x:Static properties:Resources.Connect}" IsDefault="True" IsEnabled="{Binding Path=IsNotConnectingNorConnected}" Command="{Binding ConnectCommand}" CommandParameter="{Binding ElementName=PasswordBoxNew}" Padding="4" Width="100"></Button>
                    </StackPanel>

                </StackPanel>

            </Grid>

            <!-- 設定画面 -->
            <Grid Grid.Row="1" Visibility="{Binding IsSettingsShow, Converter={StaticResource BoolToVisibilityCollapsedConverter}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="0"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <TabControl Grid.Row="1" TabStripPlacement="Left" Background="{DynamicResource WindowBackgroundColorBrush}" BorderThickness="0" Margin="0" Style="{DynamicResource SettingsTabControlStyle}">

                    <!-- 設定 -->
                    <TabItem Width="100" Height="48" Style="{DynamicResource SettingsTabItemStyle}" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <TabItem.Header>
                            <Label Content="{x:Static properties:Resources.Settings}" Foreground="{Binding RelativeSource={RelativeSource AncestorType=TabItem}, Path=Foreground}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"></Label>
                        </TabItem.Header>

                        <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" VerticalAlignment="Top" Padding="12" Style="{DynamicResource CustomScrollViewerStyle}">
                            <Grid Margin="10">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <Border Grid.Row="0" HorizontalAlignment="Stretch" BorderBrush="{DynamicResource ControlLightColorBrush}" BorderThickness="0 0 0 1">
                                    <Label Style="{DynamicResource SectionTitle}" Content="コネクションの設定" HorizontalAlignment="Left"/>
                                </Border>

                                <!-- Profiles -->
                                <Grid Grid.Row="1" HorizontalAlignment="Left" Width="500" Margin="0 32 0 0">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>

                                    <StackPanel Grid.Row="0" Grid.Column="0" HorizontalAlignment="Left">

                                        <ComboBox Style="{StaticResource ComboBoxFlatStyle}" ItemsSource="{Binding Profiles}" SelectedItem="{Binding SelectedProfile}" Tag="New Profile">
                                            <ComboBox.ItemTemplate>
                                                <DataTemplate>
                                                    <StackPanel Orientation="Horizontal">
                                                        <Viewbox Width="10" Height="10" Margin="0 0 6 0">
                                                            <Canvas Width="18" Height="18">
                                                                <Path Data="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" Fill="DimGray" Visibility="{Binding Path=IsDefault, Converter={StaticResource BoolToVisibilityCollapsedConverter}}"/>
                                                            </Canvas>
                                                        </Viewbox>
                                                        <TextBlock Text="{Binding Path=Name}"></TextBlock>
                                                    </StackPanel>
                                                </DataTemplate>
                                            </ComboBox.ItemTemplate>
                                        </ComboBox>

                                        <TextBlock Text="{x:Static properties:Resources.Host}" TextElement.Foreground="White" Margin="0 12 0 0"></TextBlock>
                                        <TextBox Text="{Binding Host, ValidatesOnDataErrors=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="240">
                                            <TextBox.Style>
                                                <Style TargetType="TextBox" BasedOn="{StaticResource DefaultTextBoxStyle}">
                                                    <Style.Triggers>
                                                        <Trigger Property="Validation.HasError" Value="true">
                                                            <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors)/ErrorContent}" />
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBox.Style>
                                        </TextBox>

                                        <TextBlock Text="{x:Static properties:Resources.Port}" TextElement.Foreground="White" Margin="0 12 0 0"></TextBlock>
                                        <TextBox Text="{Binding Port, ValidatesOnDataErrors=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="240">
                                            <TextBox.Style>
                                                <Style TargetType="TextBox" BasedOn="{StaticResource DefaultTextBoxStyle}">
                                                    <Style.Triggers>
                                                        <Trigger Property="Validation.HasError" Value="true">
                                                            <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors)/ErrorContent}" />
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBox.Style>
                                        </TextBox>


                                        <TextBlock Text="{x:Static properties:Resources.Password}" TextElement.Foreground="White" Margin="0 12 0 0"></TextBlock>
                                        <PasswordBox x:Name="PasswordBox" PasswordChar="*" Tag="{Binding Password}" Width="240" ToolTip="{x:Static properties:Resources.Optional}" PasswordChanged="PasswordBox_PasswordChanged">
                                            <PasswordBox.Style>
                                                <Style TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource DefaultPasswordBoxStyle}">
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type PasswordBox}">
                                                                <Border BorderBrush="DimGray" Background="DarkGray" BorderThickness="1" Margin="0">
                                                                    <Grid Background="{TemplateBinding Background}">
                                                                        <ScrollViewer x:Name="PART_ContentHost"/>
                                                                        <TextBlock x:Name="UserMessage" Margin="5,0,5,0" Text="{Binding Password}" IsHitTestVisible="False" HorizontalAlignment="Left" VerticalAlignment="Center" Visibility="Visible"/>
                                                                    </Grid>
                                                                </Border>
                                                                <ControlTemplate.Triggers>
                                                                    <MultiTrigger>
                                                                        <MultiTrigger.Conditions>
                                                                            <Condition Property="Tag" Value=""/>
                                                                        </MultiTrigger.Conditions>
                                                                        <Setter Property="Visibility" TargetName="UserMessage" Value="Hidden"/>
                                                                        <Setter Property="Text" TargetName="UserMessage" Value=""/>
                                                                    </MultiTrigger>
                                                                    <MultiTrigger>
                                                                        <MultiTrigger.Conditions>
                                                                            <Condition Property="IsKeyboardFocusWithin" Value="true"/>
                                                                        </MultiTrigger.Conditions>
                                                                        <Setter Property="Visibility" TargetName="UserMessage" Value="Hidden"/>
                                                                        <Setter Property="Text" TargetName="UserMessage" Value=""/>
                                                                    </MultiTrigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </PasswordBox.Style>
                                        </PasswordBox>

                                        <CheckBox Content="Default" Style="{DynamicResource DefaultCheckBoxStyle}" IsChecked="{Binding SetIsDefault}" Margin="0 12 0 0"></CheckBox>

                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0 12 0 0">
                                            <TextBlock Style="{DynamicResource DefaultTextBlockStyle}" Text="{Binding SettingProfileEditMessage}"></TextBlock>
                                        </StackPanel>

                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0 12 0 0">
                                            <Button Content="新規" Command="{Binding NewProfileCommand}" Padding="4" Margin="0 0 0 0" Width="100" IsDefault="False"></Button>
                                            <Button Content="保存" Command="{Binding SaveProfileCommand}" CommandParameter="{Binding ElementName=PasswordBox}" Padding="4" Margin="12 0 0 0" Width="100" IsDefault="False"></Button>
                                        </StackPanel>
                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0 12 0 0">
                                            <Button Content="更新" Command="{Binding UpdateProfileCommand}" Padding="4" Margin="0 0 0 0" Width="100" IsDefault="False"></Button>
                                            <Button Content="{x:Static properties:Resources.Delete}" Command="{Binding DeleteProfileCommand}" Padding="4" Margin="12 0 0 0" Width="100" IsDefault="False"></Button>
                                        </StackPanel>

                                        <StackPanel Orientation="Horizontal" Margin="0 12 0 0" HorizontalAlignment="Center">
                                            <TextBlock Width="240" Text="{Binding StatusMessage, NotifyOnTargetUpdated=True}" TextElement.Foreground="WhiteSmoke" TextAlignment="Center" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" TextElement.FontWeight="Bold" TextWrapping="WrapWithOverflow">
                                                <TextBlock.Triggers>
                                                    <EventTrigger RoutedEvent="Binding.TargetUpdated">
                                                        <BeginStoryboard>
                                                            <Storyboard>
                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                                                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="1"/>
                                                                </DoubleAnimationUsingKeyFrames>
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </EventTrigger>
                                                </TextBlock.Triggers>
                                            </TextBlock>
                                        </StackPanel>

                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0 12 0 0">

                                            <Button Content="接続" IsEnabled="{Binding Path=IsNotConnecting}" Command="{Binding ChangeConnectionProfileCommand}" CommandParameter="{Binding ElementName=PasswordBox}" Padding="4" Width="100" IsDefault="False"></Button>

                                        </StackPanel>

                                    </StackPanel>


                                </Grid>

                                <!-- Options -->
                                <Border Grid.Row="2" Margin="0 32 0 0" HorizontalAlignment="Stretch" BorderBrush="{DynamicResource ControlLightColorBrush}" BorderThickness="0 0 0 1">
                                    <Label Style="{DynamicResource SectionTitle}" Content="オプションの設定" HorizontalAlignment="Left"/>
                                </Border>

                                <Grid Grid.Row="3" HorizontalAlignment="Left" Width="500" Margin="0 12 0 0">
                                    <CheckBox Content="Update database on startup" Style="{DynamicResource DefaultCheckBoxStyle}" IsChecked="{Binding IsUpdateOnStartup}" Margin="0 12 0 0"></CheckBox>
                                </Grid>

                                <Border Grid.Row="4" Margin="0 32 0 0" HorizontalAlignment="Stretch" BorderBrush="{DynamicResource ControlLightColorBrush}" BorderThickness="0 0 0 1">
                                    <Label Style="{DynamicResource SectionTitle}" Content="デベロッパーモード" HorizontalAlignment="Left"/>
                                </Border>
                                <Grid Grid.Row="5" HorizontalAlignment="Left" Width="500" Margin="0 12 0 0">
                                    <CheckBox Content="Show debug widow" Style="{DynamicResource DefaultCheckBoxStyle}" IsChecked="{Binding IsShowDebugWindow}" Margin="0 12 0 0"></CheckBox>
                                </Grid>


                            </Grid>
                        </ScrollViewer>

                    </TabItem>

                    <!-- About -->
                    <TabItem Width="100" Height="48" Style="{DynamicResource SettingsTabItemStyle}" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <TabItem.Header>
                            <Label Content="About" Foreground="{Binding RelativeSource={RelativeSource AncestorType=TabItem}, Path=Foreground}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"></Label>
                        </TabItem.Header>

                        <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" VerticalAlignment="Top" Padding="12" Style="{DynamicResource CustomScrollViewerStyle}">
                            <Grid Margin="10">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <Border HorizontalAlignment="Stretch" BorderBrush="{DynamicResource ControlLightColorBrush}" BorderThickness="0 0 0 1">
                                    <Label Style="{DynamicResource SectionTitle}" Content="About this application" HorizontalAlignment="Left"/>
                                </Border>

                                <!--  -->
                                <Grid Grid.Row="1" HorizontalAlignment="Left" Margin="0 32 0 0">




                                </Grid>


                            </Grid>
                        </ScrollViewer>
                    </TabItem>

                    <!-- ライセンス -->
                    <TabItem Width="100" Height="48" Style="{DynamicResource SettingsTabItemStyle}" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <TabItem.Header>
                            <Label Content="ライセンス" Foreground="{Binding RelativeSource={RelativeSource AncestorType=TabItem}, Path=Foreground}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"></Label>
                        </TabItem.Header>

                        <TabControl Margin="12">
                            <TabControl.Resources>
                                <Style x:Key="LicenseTabFocusVisualStyle">
                                    <Setter Property="Control.Template">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <Rectangle Margin="1" StrokeThickness="1" StrokeDashArray="1 2" Stroke="{DynamicResource ControlMediumColorBrush}"/>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>

                                <Style TargetType="{x:Type TabControl}">
                                    <Setter Property="OverridesDefaultStyle" Value="False" />
                                    <Setter Property="Foreground" Value="{DynamicResource NormalTextColorBrush}" />
                                    <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}"/>
                                    <Setter Property="BorderThickness" Value="0"/>
                                </Style>
                                <Style x:Key="LicenseTabItemStyle" TargetType="{x:Type TabItem}">
                                    <Setter Property="OverridesDefaultStyle" Value="False" />
                                    <Setter Property="FocusVisualStyle" Value="{StaticResource LicenseTabFocusVisualStyle}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource ControlDarkColorBrush}" />
                                    <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}"/>
                                    <Setter Property="BorderThickness" Value="0 0 0 2"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type TabItem}">

                                                <Border Name="HeaderBorder" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Center" CornerRadius="0">
                                                    <ContentPresenter x:Name="ContentSite" HorizontalAlignment="Center" VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" />
                                                </Border>

                                                <ControlTemplate.Triggers>

                                                    <Trigger Property="IsSelected" Value="True">
                                                        <Setter Property="Foreground" Value="{DynamicResource TitleTextColorBrush}" />
                                                        <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="{DynamicResource ControlLightColorBrush}" />
                                                        <Setter TargetName="HeaderBorder" Property="BorderThickness" Value="0 0 0 2"/>
                                                    </Trigger>

                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter Property="Foreground" Value="{DynamicResource TitleTextColorBrush}" />
                                                        <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="{DynamicResource ControlDarkColorBrush}" />
                                                        <Setter TargetName="HeaderBorder" Property="BorderThickness" Value="0 0 0 2"/>
                                                    </Trigger>

                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Background" Value="gray" />
                                                        <Setter Property="BorderBrush" Value="#FFC9C7BA" />
                                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </TabControl.Resources>

                            <TabItem Style="{DynamicResource LicenseTabItemStyle}">
                                <TabItem.Header>
                                    <Label Content="使用許諾契約書 (EULA)" Style="{DynamicResource SectionTitle}" Padding="6" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"></Label>
                                </TabItem.Header>

                                <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" VerticalAlignment="Top" Padding="6" Style="{DynamicResource CustomScrollViewerStyle}">

                                    <TextBlock TextWrapping="Wrap" Padding="6" Style="{DynamicResource DefaultTextBlockStyle}">
ソフトウェアの使用許諾書
    <LineBreak/>
    <LineBreak/>                            
第１条 （本契約の成立）<LineBreak/>
ご利用者（甲）が、本ソフトウェアの使用もしくはインストールを行った時点で、本契約書記載の内容に同意いただいたものとみなし、本ソフトウェアの開発者（以下開発者、乙）もしくは開発者が再使用許諾権を付与した者（以下あわせて「開発者」といいます）
との間で、本契約が有効に成立するものといたします。
                                <LineBreak/><LineBreak/>
第２条 （使用許諾）<LineBreak/>
1. ご利用者は、無償で本ソフトウェアを、日本国内において、個人としての使用に限定して、無料で使用することができま
す。
                                <LineBreak/>
2. ご利用者は、本ソフトウェアを改変したり、再発布することはできません。
                                <LineBreak/>
3. ご利用者は、本条項に基づき本ソフトウェアの使用権のみを取得し、本ソフトウェアの著作権、所有権その他のいかなる権利も取得しません。
                                <LineBreak/>
4. 本契約はご利用者に対し、本ソフトウェアの改訂版(アドオンパック)、変更、機能強化、サービスパック、またはその他のサポートサービスを受ける権利を付与するものではありません。
                                <LineBreak/>
5. ご利用者は、本ソフトウェアを、直接的、間接的を問わず、日本国、米国およびその他の国の全ての法律・規則に違反して輸出してはいけません。
                                <LineBreak/><LineBreak/>
第３条 （保証責任）<LineBreak/>
1. 開発者は、別途記載するライブラリを除き、本ソフトウェアの著作権を有し、または著作権者から再使用許諾する権利を受けていることを保証します。
                                    <LineBreak/>
2. 開発者は、本ソフトウェアのご利用者の使用目的への適合性および法律上の瑕疵担保責任を含め一切の保証を行いません。
                                <LineBreak/><LineBreak/>
第４条 （責任の範囲）<LineBreak/>
1. 前条に関わらず、ご利用者が本ソフトウェアを使用したことによりご利用者に直接的結果として発生した損害に対し開発者は責任を負いません。
                                <LineBreak/>
3. 開発者は、開発者の判断により第三者に本契約記載の業務を委託することができるものとします。ただし、委託にあたっての責任は、全て開発者の責任においてなされるものとします。
                                <LineBreak/><LineBreak/>
第５条 （権利の譲渡）<LineBreak/>
ご利用者は、当社の書面による事前の承諾なく下記の行為を行ってはいけません。<LineBreak/>
①． 本ソフトウェアの複製物を第三者に譲渡、貸与、占有移転すること<LineBreak/>
②． 本契約上の地位または本契約に基づく権利義務を第三者に移転、譲渡、担保の用に供すること
                                <LineBreak/><LineBreak/>
第６条 （本契約の終了）<LineBreak/>
ご利用者が本契約の条項に違反し、開発者が違反の是正を催告した後、２週間以内に是正されなかった場合、当社は本契約を解約し、ご利用者の本ソフトウェアの使用を終了させることができます。
                                <LineBreak/><LineBreak/>
第７条 （契約の変更）<LineBreak/>
本契約の変更は、開発者の判断で、変更できるものとします。
                                <LineBreak/><LineBreak/>
第８条 （協議）<LineBreak/>
本契約に規定されていない事項または本契約の解釈に疑義が生じた場合は、甲および乙は、誠意をもって協議するものとします。
                                <LineBreak/><LineBreak/>
以上
                                
                                <LineBreak/>


                                    </TextBlock>

                                </ScrollViewer>

                            </TabItem>

                            <TabItem Style="{DynamicResource LicenseTabItemStyle}">
                                <TabItem.Header>
                                    <Label Content="使用ライブラリ等" Style="{DynamicResource SectionTitle}" Padding="6" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"></Label>
                                </TabItem.Header>

                                <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" VerticalAlignment="Top" Padding="6" Style="{DynamicResource CustomScrollViewerStyle}">

                                    <StackPanel Margin="6 6 50 6">

                                        <StackPanel Margin="0 0 0 0">

                                            <TextBlock TextWrapping="Wrap" Style="{DynamicResource DefaultTextBlockStyle}">
                                        本ソフトウェアは下記のライブラリを使用しています。
                                        <LineBreak/>
                                            </TextBlock>

                                            <TextBlock TextWrapping="Wrap" FontWeight="Bold" Style="{DynamicResource DefaultTextBlockStyle}">
                                    Live Chart for WPF<LineBreak/>
                                            </TextBlock>

                                            <TextBlock TextWrapping="Wrap" Padding="6" Style="{DynamicResource DefaultTextBlockStyle}">
The MIT License (MIT)<LineBreak/>
<LineBreak/>
Copyright (c) 2016 Alberto Rodriguez and LiveCharts contributors<LineBreak/>
<LineBreak/>
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
<LineBreak/><LineBreak/>
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
<LineBreak/><LineBreak/>
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
                                            </TextBlock>
                                        </StackPanel>


                                        <StackPanel Margin="0 24 0 0">
                                            <TextBlock TextWrapping="Wrap" FontWeight="Bold" Style="{DynamicResource DefaultTextBlockStyle}">
                                    Json.NET<LineBreak/>
                                            </TextBlock>
                                        </StackPanel>

                                        <TextBlock TextWrapping="Wrap" Padding="6" Style="{DynamicResource DefaultTextBlockStyle}">
                                        MIT License
<LineBreak/><LineBreak/>
Copyright (c) 2007 James Newton-King
<LineBreak/><LineBreak/>
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
<LineBreak/><LineBreak/>
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
<LineBreak/><LineBreak/>
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

                                        </TextBlock>

                                    </StackPanel>

                                </ScrollViewer>

                            </TabItem>

                        </TabControl>

                    </TabItem>

                </TabControl>

                <Border Grid.Row="2" Height="62" Margin="-1 -1 -1 0" Background="{DynamicResource BoardBackgroundColorBrush}">
                    <Border  BorderThickness="0 0.5 0 0" BorderBrush="{DynamicResource ControlMediumColorBrush}">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0 12 0 0">
                            <Button Width="80" Content="{x:Static properties:Resources.Close}" Margin="0 0 32 0" Padding="3" IsDefault="True" Command="{Binding SettingsOKCommand}"></Button>
                        </StackPanel>

                    </Border>
                </Border>

            </Grid>

        </Grid>
    </Border>
</Window>
